using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Domain.Models;

public partial class TrainingContext : DbContext
{
    public TrainingContext()
    {
    }

    public TrainingContext(DbContextOptions<TrainingContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AMgmtAbc> AMgmtAbcs { get; set; }

    public virtual DbSet<Abc2> Abc2s { get; set; }

    public virtual DbSet<AddDepartment> AddDepartments { get; set; }

    public virtual DbSet<AirApilogTest> AirApilogTests { get; set; }

    public virtual DbSet<AirlineMaster> AirlineMasters { get; set; }

    public virtual DbSet<AirlineTypeMaster> AirlineTypeMasters { get; set; }

    public virtual DbSet<AnnualLeaveInfoMaster> AnnualLeaveInfoMasters { get; set; }

    public virtual DbSet<AsdfBackUo> AsdfBackUos { get; set; }

    public virtual DbSet<AspnetApplication> AspnetApplications { get; set; }

    public virtual DbSet<AspnetMembership> AspnetMemberships { get; set; }

    public virtual DbSet<AspnetPath> AspnetPaths { get; set; }

    public virtual DbSet<AspnetPersonalizationAllUser> AspnetPersonalizationAllUsers { get; set; }

    public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUsers { get; set; }

    public virtual DbSet<AspnetProfile> AspnetProfiles { get; set; }

    public virtual DbSet<AspnetRole> AspnetRoles { get; set; }

    public virtual DbSet<AspnetSchemaVersion> AspnetSchemaVersions { get; set; }

    public virtual DbSet<AspnetUser> AspnetUsers { get; set; }

    public virtual DbSet<AspnetWebEventEvent> AspnetWebEventEvents { get; set; }

    public virtual DbSet<BankXml> BankXmls { get; set; }

    public virtual DbSet<BookDetail> BookDetails { get; set; }

    public virtual DbSet<CharVsVarChar> CharVsVarChars { get; set; }

    public virtual DbSet<Chintan> Chintans { get; set; }

    public virtual DbSet<CityExport> CityExports { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<CreateTaBle> CreateTaBles { get; set; }

    public virtual DbSet<CurrentWorkItemView> CurrentWorkItemViews { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Customerxml> Customerxmls { get; set; }

    public virtual DbSet<DailyIncome> DailyIncomes { get; set; }

    public virtual DbSet<DboTemptable> DboTemptables { get; set; }

    public virtual DbSet<Ddlaudit> Ddlaudits { get; set; }

    public virtual DbSet<Demo3> Demo3s { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<Digit> Digits { get; set; }

    public virtual DbSet<DscCategory> DscCategories { get; set; }

    public virtual DbSet<DscCategoryManufacturerCount> DscCategoryManufacturerCounts { get; set; }

    public virtual DbSet<DscImage> DscImages { get; set; }

    public virtual DbSet<DscManufacturer> DscManufacturers { get; set; }

    public virtual DbSet<E> Es { get; set; }

    public virtual DbSet<EmaiL> EmaiLs { get; set; }

    public virtual DbSet<Emp> Emps { get; set; }

    public virtual DbSet<Emp2> Emp2s { get; set; }

    public virtual DbSet<EmpHi> EmpHis { get; set; }

    public virtual DbSet<EmpLeaveApproveDet> EmpLeaveApproveDets { get; set; }

    public virtual DbSet<EmpLeaveTakenDet> EmpLeaveTakenDets { get; set; }

    public virtual DbSet<EmpLeaveTypeDet> EmpLeaveTypeDets { get; set; }

    public virtual DbSet<EmpLog> EmpLogs { get; set; }

    public virtual DbSet<EmpLog2> EmpLog2s { get; set; }

    public virtual DbSet<Empdepart> Empdeparts { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Employee1> Employees1 { get; set; }

    public virtual DbSet<EmployeeCur> EmployeeCurs { get; set; }

    public virtual DbSet<EmployeeDemoAudit> EmployeeDemoAudits { get; set; }

    public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }

    public virtual DbSet<EmployeeMaster> EmployeeMasters { get; set; }

    public virtual DbSet<EmployeeTest> EmployeeTests { get; set; }

    public virtual DbSet<EmployeeTree> EmployeeTrees { get; set; }

    public virtual DbSet<Error> Errors { get; set; }

    public virtual DbSet<Example> Examples { get; set; }

    public virtual DbSet<FactProductPurchaseHistory> FactProductPurchaseHistories { get; set; }

    public virtual DbSet<Ffff> Ffffs { get; set; }

    public virtual DbSet<Ganpat> Ganpats { get; set; }

    public virtual DbSet<Harsh> Harshes { get; set; }

    public virtual DbSet<HistoryTable> HistoryTables { get; set; }

    public virtual DbSet<J1> J1s { get; set; }

    public virtual DbSet<J2> J2s { get; set; }

    public virtual DbSet<J2back> J2backs { get; set; }

    public virtual DbSet<Jayesh> Jayeshes { get; set; }

    public virtual DbSet<JobGrade> JobGrades { get; set; }

    public virtual DbSet<KeyoorViewTest> KeyoorViewTests { get; set; }

    public virtual DbSet<Lastnumber> Lastnumbers { get; set; }

    public virtual DbSet<LeaveApprovalMaster> LeaveApprovalMasters { get; set; }

    public virtual DbSet<LeaveMaster> LeaveMasters { get; set; }

    public virtual DbSet<LeaveTypeMaster> LeaveTypeMasters { get; set; }

    public virtual DbSet<LogTable> LogTables { get; set; }

    public virtual DbSet<Malay> Malays { get; set; }

    public virtual DbSet<Mobile> Mobiles { get; set; }

    public virtual DbSet<Movie> Movies { get; set; }

    public virtual DbSet<Mvc> Mvcs { get; set; }

    public virtual DbSet<MyName> MyNames { get; set; }

    public virtual DbSet<MyServiceLog> MyServiceLogs { get; set; }

    public virtual DbSet<MyTable12Nov> MyTable12Novs { get; set; }

    public virtual DbSet<New> News { get; set; }

    public virtual DbSet<New1> New1s { get; set; }

    public virtual DbSet<NewCon> NewCons { get; set; }

    public virtual DbSet<NewTest> NewTests { get; set; }

    public virtual DbSet<Newdeptmast> Newdeptmasts { get; set; }

    public virtual DbSet<Newemp> Newemps { get; set; }

    public virtual DbSet<Newempmast> Newempmasts { get; set; }

    public virtual DbSet<Newempmaster> Newempmasters { get; set; }

    public virtual DbSet<NopAcl> NopAcls { get; set; }

    public virtual DbSet<NopAclperObject> NopAclperObjects { get; set; }

    public virtual DbSet<NopActivityLog> NopActivityLogs { get; set; }

    public virtual DbSet<NopActivityLogType> NopActivityLogTypes { get; set; }

    public virtual DbSet<NopAddress> NopAddresses { get; set; }

    public virtual DbSet<NopAffiliate> NopAffiliates { get; set; }

    public virtual DbSet<NopBannedIpAddress> NopBannedIpAddresses { get; set; }

    public virtual DbSet<NopBannedIpNetwork> NopBannedIpNetworks { get; set; }

    public virtual DbSet<NopBlogComment> NopBlogComments { get; set; }

    public virtual DbSet<NopBlogPost> NopBlogPosts { get; set; }

    public virtual DbSet<NopCampaign> NopCampaigns { get; set; }

    public virtual DbSet<NopCategory> NopCategories { get; set; }

    public virtual DbSet<NopCategoryLocalized> NopCategoryLocalizeds { get; set; }

    public virtual DbSet<NopCategoryTemplate> NopCategoryTemplates { get; set; }

    public virtual DbSet<NopCheckoutAttribute> NopCheckoutAttributes { get; set; }

    public virtual DbSet<NopCheckoutAttributeLocalized> NopCheckoutAttributeLocalizeds { get; set; }

    public virtual DbSet<NopCheckoutAttributeValue> NopCheckoutAttributeValues { get; set; }

    public virtual DbSet<NopCheckoutAttributeValueLocalized> NopCheckoutAttributeValueLocalizeds { get; set; }

    public virtual DbSet<NopCountry> NopCountries { get; set; }

    public virtual DbSet<NopCreditCardType> NopCreditCardTypes { get; set; }

    public virtual DbSet<NopCrossSellProduct> NopCrossSellProducts { get; set; }

    public virtual DbSet<NopCurrency> NopCurrencies { get; set; }

    public virtual DbSet<NopCustomer> NopCustomers { get; set; }

    public virtual DbSet<NopCustomerAction> NopCustomerActions { get; set; }

    public virtual DbSet<NopCustomerAttribute> NopCustomerAttributes { get; set; }

    public virtual DbSet<NopCustomerRole> NopCustomerRoles { get; set; }

    public virtual DbSet<NopCustomerRoleProductPrice> NopCustomerRoleProductPrices { get; set; }

    public virtual DbSet<NopCustomerSession> NopCustomerSessions { get; set; }

    public virtual DbSet<NopDiscount> NopDiscounts { get; set; }

    public virtual DbSet<NopDiscountUsageHistory> NopDiscountUsageHistories { get; set; }

    public virtual DbSet<NopDownload> NopDownloads { get; set; }

    public virtual DbSet<NopEmailAccount> NopEmailAccounts { get; set; }

    public virtual DbSet<NopForumsForum> NopForumsForums { get; set; }

    public virtual DbSet<NopForumsGroup> NopForumsGroups { get; set; }

    public virtual DbSet<NopForumsPost> NopForumsPosts { get; set; }

    public virtual DbSet<NopForumsPrivateMessage> NopForumsPrivateMessages { get; set; }

    public virtual DbSet<NopForumsSubscription> NopForumsSubscriptions { get; set; }

    public virtual DbSet<NopForumsTopic> NopForumsTopics { get; set; }

    public virtual DbSet<NopGiftCard> NopGiftCards { get; set; }

    public virtual DbSet<NopGiftCardUsageHistory> NopGiftCardUsageHistories { get; set; }

    public virtual DbSet<NopLanguage> NopLanguages { get; set; }

    public virtual DbSet<NopLocaleStringResource> NopLocaleStringResources { get; set; }

    public virtual DbSet<NopLog> NopLogs { get; set; }

    public virtual DbSet<NopManufacturer> NopManufacturers { get; set; }

    public virtual DbSet<NopManufacturerLocalized> NopManufacturerLocalizeds { get; set; }

    public virtual DbSet<NopManufacturerTemplate> NopManufacturerTemplates { get; set; }

    public virtual DbSet<NopMeasureDimension> NopMeasureDimensions { get; set; }

    public virtual DbSet<NopMeasureWeight> NopMeasureWeights { get; set; }

    public virtual DbSet<NopMessageTemplate> NopMessageTemplates { get; set; }

    public virtual DbSet<NopMessageTemplateLocalized> NopMessageTemplateLocalizeds { get; set; }

    public virtual DbSet<NopNews> NopNews { get; set; }

    public virtual DbSet<NopNewsComment> NopNewsComments { get; set; }

    public virtual DbSet<NopNewsLetterSubscription> NopNewsLetterSubscriptions { get; set; }

    public virtual DbSet<NopOrder> NopOrders { get; set; }

    public virtual DbSet<NopOrderNote> NopOrderNotes { get; set; }

    public virtual DbSet<NopOrderProductVariant> NopOrderProductVariants { get; set; }

    public virtual DbSet<NopPaymentMethod> NopPaymentMethods { get; set; }

    public virtual DbSet<NopPicture> NopPictures { get; set; }

    public virtual DbSet<NopPoll> NopPolls { get; set; }

    public virtual DbSet<NopPollAnswer> NopPollAnswers { get; set; }

    public virtual DbSet<NopPollVotingRecord> NopPollVotingRecords { get; set; }

    public virtual DbSet<NopPricelist> NopPricelists { get; set; }

    public virtual DbSet<NopProduct> NopProducts { get; set; }

    public virtual DbSet<NopProductAttribute> NopProductAttributes { get; set; }

    public virtual DbSet<NopProductAttributeLocalized> NopProductAttributeLocalizeds { get; set; }

    public virtual DbSet<NopProductCategoryMapping> NopProductCategoryMappings { get; set; }

    public virtual DbSet<NopProductLocalized> NopProductLocalizeds { get; set; }

    public virtual DbSet<NopProductManufacturerMapping> NopProductManufacturerMappings { get; set; }

    public virtual DbSet<NopProductPicture> NopProductPictures { get; set; }

    public virtual DbSet<NopProductRating> NopProductRatings { get; set; }

    public virtual DbSet<NopProductReview> NopProductReviews { get; set; }

    public virtual DbSet<NopProductReviewHelpfulness> NopProductReviewHelpfulnesses { get; set; }

    public virtual DbSet<NopProductSpecificationAttributeMapping> NopProductSpecificationAttributeMappings { get; set; }

    public virtual DbSet<NopProductTag> NopProductTags { get; set; }

    public virtual DbSet<NopProductTemplate> NopProductTemplates { get; set; }

    public virtual DbSet<NopProductVariant> NopProductVariants { get; set; }

    public virtual DbSet<NopProductVariantAttributeCombination> NopProductVariantAttributeCombinations { get; set; }

    public virtual DbSet<NopProductVariantAttributeValue> NopProductVariantAttributeValues { get; set; }

    public virtual DbSet<NopProductVariantAttributeValueLocalized> NopProductVariantAttributeValueLocalizeds { get; set; }

    public virtual DbSet<NopProductVariantLocalized> NopProductVariantLocalizeds { get; set; }

    public virtual DbSet<NopProductVariantPricelistMapping> NopProductVariantPricelistMappings { get; set; }

    public virtual DbSet<NopProductVariantProductAttributeMapping> NopProductVariantProductAttributeMappings { get; set; }

    public virtual DbSet<NopQbentity> NopQbentities { get; set; }

    public virtual DbSet<NopQueuedEmail> NopQueuedEmails { get; set; }

    public virtual DbSet<NopRecurringPayment> NopRecurringPayments { get; set; }

    public virtual DbSet<NopRecurringPaymentHistory> NopRecurringPaymentHistories { get; set; }

    public virtual DbSet<NopRelatedProduct> NopRelatedProducts { get; set; }

    public virtual DbSet<NopReturnRequest> NopReturnRequests { get; set; }

    public virtual DbSet<NopRewardPointsHistory> NopRewardPointsHistories { get; set; }

    public virtual DbSet<NopSearchLog> NopSearchLogs { get; set; }

    public virtual DbSet<NopSetting> NopSettings { get; set; }

    public virtual DbSet<NopShippingByTotal> NopShippingByTotals { get; set; }

    public virtual DbSet<NopShippingByWeight> NopShippingByWeights { get; set; }

    public virtual DbSet<NopShippingByWeightAndCountry> NopShippingByWeightAndCountries { get; set; }

    public virtual DbSet<NopShippingMethod> NopShippingMethods { get; set; }

    public virtual DbSet<NopShippingRateComputationMethod> NopShippingRateComputationMethods { get; set; }

    public virtual DbSet<NopShoppingCartItem> NopShoppingCartItems { get; set; }

    public virtual DbSet<NopSmsprovider> NopSmsproviders { get; set; }

    public virtual DbSet<NopSpecificationAttribute> NopSpecificationAttributes { get; set; }

    public virtual DbSet<NopSpecificationAttributeLocalized> NopSpecificationAttributeLocalizeds { get; set; }

    public virtual DbSet<NopSpecificationAttributeOption> NopSpecificationAttributeOptions { get; set; }

    public virtual DbSet<NopSpecificationAttributeOptionLocalized> NopSpecificationAttributeOptionLocalizeds { get; set; }

    public virtual DbSet<NopStateProvince> NopStateProvinces { get; set; }

    public virtual DbSet<NopTaxCategory> NopTaxCategories { get; set; }

    public virtual DbSet<NopTaxProvider> NopTaxProviders { get; set; }

    public virtual DbSet<NopTaxRate> NopTaxRates { get; set; }

    public virtual DbSet<NopTierPrice> NopTierPrices { get; set; }

    public virtual DbSet<NopTopic> NopTopics { get; set; }

    public virtual DbSet<NopTopicLocalized> NopTopicLocalizeds { get; set; }

    public virtual DbSet<NopWarehouse> NopWarehouses { get; set; }

    public virtual DbSet<Number> Numbers { get; set; }

    public virtual DbSet<Orderxml> Orderxmls { get; set; }

    public virtual DbSet<Oss> Osses { get; set; }

    public virtual DbSet<Ossa> Ossas { get; set; }

    public virtual DbSet<Ossa1> Ossa1s { get; set; }

    public virtual DbSet<Ossagent1> Ossagent1s { get; set; }

    public virtual DbSet<Ossagent2> Ossagent2s { get; set; }

    public virtual DbSet<Patel> Patels { get; set; }

    public virtual DbSet<Patientdetail> Patientdetails { get; set; }

    public virtual DbSet<Patientmaster> Patientmasters { get; set; }

    public virtual DbSet<Pedido> Pedidos { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Product1> Products1 { get; set; }

    public virtual DbSet<ProductDatum> ProductData { get; set; }

    public virtual DbSet<ProductInventoryWcf> ProductInventoryWcfs { get; set; }

    public virtual DbSet<ProductPurchase> ProductPurchases { get; set; }

    public virtual DbSet<ProductSale> ProductSales { get; set; }

    public virtual DbSet<ProductWcf> ProductWcfs { get; set; }

    public virtual DbSet<ResDept> ResDepts { get; set; }

    public virtual DbSet<ResDeptRowlock> ResDeptRowlocks { get; set; }

    public virtual DbSet<ResDesignation> ResDesignations { get; set; }

    public virtual DbSet<ResEmp> ResEmps { get; set; }

    public virtual DbSet<ResEmployee> ResEmployees { get; set; }

    public virtual DbSet<ResJob> ResJobs { get; set; }

    public virtual DbSet<ResPlacement> ResPlacements { get; set; }

    public virtual DbSet<ResProduction> ResProductions { get; set; }

    public virtual DbSet<ResSale> ResSales { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SampleImage> SampleImages { get; set; }

    public virtual DbSet<Split> Splits { get; set; }

    public virtual DbSet<SqlServerDestination> SqlServerDestinations { get; set; }

    public virtual DbSet<Stft1> Stft1s { get; set; }

    public virtual DbSet<Stft2> Stft2s { get; set; }

    public virtual DbSet<Stft3> Stft3s { get; set; }

    public virtual DbSet<Student> Students { get; set; }

    public virtual DbSet<StudentMark> StudentMarks { get; set; }

    public virtual DbSet<SyncTest> SyncTests { get; set; }

    public virtual DbSet<SyncTest1> SyncTest1s { get; set; }

    public virtual DbSet<T> Ts { get; set; }

    public virtual DbSet<T101> T101s { get; set; }

    public virtual DbSet<T102> T102s { get; set; }

    public virtual DbSet<T11> T11s { get; set; }

    public virtual DbSet<T1emp> T1emps { get; set; }

    public virtual DbSet<T2> T2s { get; set; }

    public virtual DbSet<T3> T3s { get; set; }

    public virtual DbSet<Table1> Table1s { get; set; }

    public virtual DbSet<Table2> Table2s { get; set; }

    public virtual DbSet<TableA> TableAs { get; set; }

    public virtual DbSet<TableauthorMaster> TableauthorMasters { get; set; }

    public virtual DbSet<Tbl1> Tbl1s { get; set; }

    public virtual DbSet<Tbl2> Tbl2s { get; set; }

    public virtual DbSet<TblAircommCriteriaMaster> TblAircommCriteriaMasters { get; set; }

    public virtual DbSet<TblAircommCriteriaMasterCommand> TblAircommCriteriaMasterCommands { get; set; }

    public virtual DbSet<TblAircommCriteriaMasterHistory> TblAircommCriteriaMasterHistories { get; set; }

    public virtual DbSet<TblAircommissionBookingDateDetail> TblAircommissionBookingDateDetails { get; set; }

    public virtual DbSet<TblAircommissionBookingDateDetailBkp> TblAircommissionBookingDateDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionCodeShareDetail> TblAircommissionCodeShareDetails { get; set; }

    public virtual DbSet<TblAircommissionCodeShareDetailBkp> TblAircommissionCodeShareDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionCountryDetail> TblAircommissionCountryDetails { get; set; }

    public virtual DbSet<TblAircommissionCountryDetailBkp> TblAircommissionCountryDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionDepartureDateDetail> TblAircommissionDepartureDateDetails { get; set; }

    public virtual DbSet<TblAircommissionDepartureDateDetailBkp> TblAircommissionDepartureDateDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionMaster> TblAircommissionMasters { get; set; }

    public virtual DbSet<TblAircommissionMasterBkp> TblAircommissionMasterBkps { get; set; }

    public virtual DbSet<TblAircommissionReturnDateDetail> TblAircommissionReturnDateDetails { get; set; }

    public virtual DbSet<TblAircommissionReturnDateDetailBkp> TblAircommissionReturnDateDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionRoutingDetail> TblAircommissionRoutingDetails { get; set; }

    public virtual DbSet<TblAircommissionRoutingDetailBkp> TblAircommissionRoutingDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionSaleCountryDetail> TblAircommissionSaleCountryDetails { get; set; }

    public virtual DbSet<TblAircommissionSaleCountryDetailBkp> TblAircommissionSaleCountryDetailBkps { get; set; }

    public virtual DbSet<TblAircommissionSectorDetail> TblAircommissionSectorDetails { get; set; }

    public virtual DbSet<TblAircommissionSectorDetailBkp> TblAircommissionSectorDetailBkps { get; set; }

    public virtual DbSet<TblAircustomerDetail> TblAircustomerDetails { get; set; }

    public virtual DbSet<TblAircustomerDetailCommand> TblAircustomerDetailCommands { get; set; }

    public virtual DbSet<TblAircustomerDetailHistory> TblAircustomerDetailHistories { get; set; }

    public virtual DbSet<TblAircustomerGroupMaster> TblAircustomerGroupMasters { get; set; }

    public virtual DbSet<TblAircustomerGroupMasterCommand> TblAircustomerGroupMasterCommands { get; set; }

    public virtual DbSet<TblAircustomerGroupMasterHistory> TblAircustomerGroupMasterHistories { get; set; }

    public virtual DbSet<TblAircustomerGroupTypeMaster> TblAircustomerGroupTypeMasters { get; set; }

    public virtual DbSet<TblAircustomerGroupTypeMasterCommand> TblAircustomerGroupTypeMasterCommands { get; set; }

    public virtual DbSet<TblAircustomerGroupTypeMasterHistory> TblAircustomerGroupTypeMasterHistories { get; set; }

    public virtual DbSet<TblAirdownlineCommissionMaster> TblAirdownlineCommissionMasters { get; set; }

    public virtual DbSet<TblAirdownlineCommissionMasterBkp> TblAirdownlineCommissionMasterBkps { get; set; }

    public virtual DbSet<TblAirinterfaceMaster> TblAirinterfaceMasters { get; set; }

    public virtual DbSet<TblAirlineMaster> TblAirlineMasters { get; set; }

    public virtual DbSet<TblAirlineMasterD1> TblAirlineMasterD1s { get; set; }

    public virtual DbSet<TblAirlineTypeMaster> TblAirlineTypeMasters { get; set; }

    public virtual DbSet<TblAirlineTypeMasterCommand> TblAirlineTypeMasterCommands { get; set; }

    public virtual DbSet<TblAirlineTypeMasterHistory> TblAirlineTypeMasterHistories { get; set; }

    public virtual DbSet<TblApimaster> TblApimasters { get; set; }

    public virtual DbSet<TblApistationLinkMasterBu> TblApistationLinkMasterBus { get; set; }

    public virtual DbSet<TblAttendanceMaster> TblAttendanceMasters { get; set; }

    public virtual DbSet<TblAudit> TblAudits { get; set; }

    public virtual DbSet<TblAuthorMaster> TblAuthorMasters { get; set; }

    public virtual DbSet<TblAuthorMasterHistory> TblAuthorMasterHistories { get; set; }

    public virtual DbSet<TblAvl16feb2011> TblAvl16feb2011s { get; set; }

    public virtual DbSet<TblBankBranchMaster> TblBankBranchMasters { get; set; }

    public virtual DbSet<TblBankBranchMasterCommand> TblBankBranchMasterCommands { get; set; }

    public virtual DbSet<TblBankBranchMasterHistory> TblBankBranchMasterHistories { get; set; }

    public virtual DbSet<TblBankCustomerMaster> TblBankCustomerMasters { get; set; }

    public virtual DbSet<TblBankCustomerMasterCommand> TblBankCustomerMasterCommands { get; set; }

    public virtual DbSet<TblBankCustomerMasterHistory> TblBankCustomerMasterHistories { get; set; }

    public virtual DbSet<TblBankMaster> TblBankMasters { get; set; }

    public virtual DbSet<TblBankMaster1> TblBankMaster1s { get; set; }

    public virtual DbSet<TblBankMasterCommand> TblBankMasterCommands { get; set; }

    public virtual DbSet<TblBankMasterHistory> TblBankMasterHistories { get; set; }

    public virtual DbSet<TblBankStmtDetail> TblBankStmtDetails { get; set; }

    public virtual DbSet<TblBankStmtMaster> TblBankStmtMasters { get; set; }

    public virtual DbSet<TblBanksMaster> TblBanksMasters { get; set; }

    public virtual DbSet<TblBanksMasterCommand> TblBanksMasterCommands { get; set; }

    public virtual DbSet<TblBanksMasterHistory> TblBanksMasterHistories { get; set; }

    public virtual DbSet<TblBookCategoryMaster> TblBookCategoryMasters { get; set; }

    public virtual DbSet<TblBookCategoryMasterCommand> TblBookCategoryMasterCommands { get; set; }

    public virtual DbSet<TblBookCategoryMasterHistory> TblBookCategoryMasterHistories { get; set; }

    public virtual DbSet<TblBookMaster> TblBookMasters { get; set; }

    public virtual DbSet<TblBookMasterCommand> TblBookMasterCommands { get; set; }

    public virtual DbSet<TblBookMasterHistory> TblBookMasterHistories { get; set; }

    public virtual DbSet<TblBookTypeMaster> TblBookTypeMasters { get; set; }

    public virtual DbSet<TblBookTypeMasterCommand> TblBookTypeMasterCommands { get; set; }

    public virtual DbSet<TblBookTypeMasterHistory> TblBookTypeMasterHistories { get; set; }

    public virtual DbSet<TblBooksMaster> TblBooksMasters { get; set; }

    public virtual DbSet<TblBooksMasterCommand> TblBooksMasterCommands { get; set; }

    public virtual DbSet<TblBooksMasterHistory> TblBooksMasterHistories { get; set; }

    public virtual DbSet<TblBooksType> TblBooksTypes { get; set; }

    public virtual DbSet<TblBulkInsertDemo> TblBulkInsertDemos { get; set; }

    public virtual DbSet<TblCardLedger> TblCardLedgers { get; set; }

    public virtual DbSet<TblCategoryMaster> TblCategoryMasters { get; set; }

    public virtual DbSet<TblCategoryMasterCommand> TblCategoryMasterCommands { get; set; }

    public virtual DbSet<TblCategoryMasterHistory> TblCategoryMasterHistories { get; set; }

    public virtual DbSet<TblCategoryTypeMaster> TblCategoryTypeMasters { get; set; }

    public virtual DbSet<TblCategoryTypeMasterCommand> TblCategoryTypeMasterCommands { get; set; }

    public virtual DbSet<TblCategoryTypeMasterHistory> TblCategoryTypeMasterHistories { get; set; }

    public virtual DbSet<TblCitiesAto> TblCitiesAtos { get; set; }

    public virtual DbSet<TblCity> TblCities { get; set; }

    public virtual DbSet<TblCity1> TblCitys { get; set; }

    public virtual DbSet<TblCity2> TblCities1 { get; set; }

    public virtual DbSet<TblCityMaster> TblCityMasters { get; set; }

    public virtual DbSet<TblCityMasterCommand> TblCityMasterCommands { get; set; }

    public virtual DbSet<TblCityMasterSunilSingh> TblCityMasterSunilSinghs { get; set; }

    public virtual DbSet<TblCityMst> TblCityMsts { get; set; }

    public virtual DbSet<TblCityMstCommand> TblCityMstCommands { get; set; }

    public virtual DbSet<TblCityMstHistory> TblCityMstHistories { get; set; }

    public virtual DbSet<TblClassMaster> TblClassMasters { get; set; }

    public virtual DbSet<TblCommand> TblCommands { get; set; }

    public virtual DbSet<TblCommand1> TblCommands1 { get; set; }

    public virtual DbSet<TblCommand2> TblCommand2s { get; set; }

    public virtual DbSet<TblCommandsEntriesProductTypeMaster> TblCommandsEntriesProductTypeMasters { get; set; }

    public virtual DbSet<TblCommissionOrder> TblCommissionOrders { get; set; }

    public virtual DbSet<TblCompany> TblCompanies { get; set; }

    public virtual DbSet<TblCompanyMaster> TblCompanyMasters { get; set; }

    public virtual DbSet<TblCompanyMasterCommand> TblCompanyMasterCommands { get; set; }

    public virtual DbSet<TblCompanyMasterHistory> TblCompanyMasterHistories { get; set; }

    public virtual DbSet<TblCompanyTypeMaster> TblCompanyTypeMasters { get; set; }

    public virtual DbSet<TblCompanyTypeMasterCommand> TblCompanyTypeMasterCommands { get; set; }

    public virtual DbSet<TblCompanyTypeMasterHistory> TblCompanyTypeMasterHistories { get; set; }

    public virtual DbSet<TblCouapicourierServiceProviderLinkMaster> TblCouapicourierServiceProviderLinkMasters { get; set; }

    public virtual DbSet<TblCouapicourierServiceProviderLinkMasterCommand> TblCouapicourierServiceProviderLinkMasterCommands { get; set; }

    public virtual DbSet<TblCouapicourierServiceProviderLinkMasterHistory> TblCouapicourierServiceProviderLinkMasterHistories { get; set; }

    public virtual DbSet<TblCouapimaster> TblCouapimasters { get; set; }

    public virtual DbSet<TblCouapimasterCommand> TblCouapimasterCommands { get; set; }

    public virtual DbSet<TblCouapimasterHistory> TblCouapimasterHistories { get; set; }

    public virtual DbSet<TblCoucourierServiceProviderMaster> TblCoucourierServiceProviderMasters { get; set; }

    public virtual DbSet<TblCoucourierServiceProviderMasterCommand> TblCoucourierServiceProviderMasterCommands { get; set; }

    public virtual DbSet<TblCoucourierServiceProviderMasterHistory> TblCoucourierServiceProviderMasterHistories { get; set; }

    public virtual DbSet<TblCountry> TblCountries { get; set; }

    public virtual DbSet<TblCountry1> TblCountries1 { get; set; }

    public virtual DbSet<TblCountryAto> TblCountryAtos { get; set; }

    public virtual DbSet<TblCountryMaster> TblCountryMasters { get; set; }

    public virtual DbSet<TblCountryMasterHistory> TblCountryMasterHistories { get; set; }

    public virtual DbSet<TblCoupon> TblCoupons { get; set; }

    public virtual DbSet<TblCoupon1> TblCoupons1 { get; set; }

    public virtual DbSet<TblCouponCustomerMaster> TblCouponCustomerMasters { get; set; }

    public virtual DbSet<TblCouponDetail> TblCouponDetails { get; set; }

    public virtual DbSet<TblCouponEventMaster> TblCouponEventMasters { get; set; }

    public virtual DbSet<TblCouponMaster> TblCouponMasters { get; set; }

    public virtual DbSet<TblCouponOrderDetail> TblCouponOrderDetails { get; set; }

    public virtual DbSet<TblCouponOrderPaymentMaster> TblCouponOrderPaymentMasters { get; set; }

    public virtual DbSet<TblCouponOrderRequestMaster> TblCouponOrderRequestMasters { get; set; }

    public virtual DbSet<TblCouponRedeemHistory> TblCouponRedeemHistories { get; set; }

    public virtual DbSet<TblCouponVendorMaster> TblCouponVendorMasters { get; set; }

    public virtual DbSet<TblCourseMaster> TblCourseMasters { get; set; }

    public virtual DbSet<TblCourseMasterCommand> TblCourseMasterCommands { get; set; }

    public virtual DbSet<TblCourseMasterError> TblCourseMasterErrors { get; set; }

    public virtual DbSet<TblCourseMasterHistory> TblCourseMasterHistories { get; set; }

    public virtual DbSet<TblCourseMasterspErrMgmt> TblCourseMasterspErrMgmts { get; set; }

    public virtual DbSet<TblCpDeptmaster> TblCpDeptmasters { get; set; }

    public virtual DbSet<TblCtm> TblCtms { get; set; }

    public virtual DbSet<TblCustCommand> TblCustCommands { get; set; }

    public virtual DbSet<TblCustMaster> TblCustMasters { get; set; }

    public virtual DbSet<TblCustMasterCommand> TblCustMasterCommands { get; set; }

    public virtual DbSet<TblCustMasterHistory> TblCustMasterHistories { get; set; }

    public virtual DbSet<TblCustomer> TblCustomers { get; set; }

    public virtual DbSet<TblCustomer1> TblCustomer1s { get; set; }

    public virtual DbSet<TblCustomerMast> TblCustomerMasts { get; set; }

    public virtual DbSet<TblDatabaseLog> TblDatabaseLogs { get; set; }

    public virtual DbSet<TblDbenableErrorLog> TblDbenableErrorLogs { get; set; }

    public virtual DbSet<TblDberrorLog> TblDberrorLogs { get; set; }

    public virtual DbSet<TblDbuserwiseObjectRightsChangedHistory> TblDbuserwiseObjectRightsChangedHistories { get; set; }

    public virtual DbSet<TblDbuserwiseObjectRightsChangedHistoryDetail> TblDbuserwiseObjectRightsChangedHistoryDetails { get; set; }

    public virtual DbSet<TblDdleventLog> TblDdleventLogs { get; set; }

    public virtual DbSet<TblDdltest> TblDdltests { get; set; }

    public virtual DbSet<TblDepartmentMaster> TblDepartmentMasters { get; set; }

    public virtual DbSet<TblDepartmentMaster1> TblDepartmentMaster1s { get; set; }

    public virtual DbSet<TblDepartmentMasterCommand> TblDepartmentMasterCommands { get; set; }

    public virtual DbSet<TblDepartmentMasterHistory> TblDepartmentMasterHistories { get; set; }

    public virtual DbSet<TblDepartmentTypeMaster> TblDepartmentTypeMasters { get; set; }

    public virtual DbSet<TblDepartmentTypeMasterCommand> TblDepartmentTypeMasterCommands { get; set; }

    public virtual DbSet<TblDepartmentTypeMasterHistory> TblDepartmentTypeMasterHistories { get; set; }

    public virtual DbSet<TblDept> TblDepts { get; set; }

    public virtual DbSet<TblDeptHistory> TblDeptHistories { get; set; }

    public virtual DbSet<TblDeptMaster> TblDeptMasters { get; set; }

    public virtual DbSet<TblDeptMasterCommand> TblDeptMasterCommands { get; set; }

    public virtual DbSet<TblDeptMasterDetail> TblDeptMasterDetails { get; set; }

    public virtual DbSet<TblDeptMasterHistory> TblDeptMasterHistories { get; set; }

    public virtual DbSet<TblDesiyaCityList> TblDesiyaCityLists { get; set; }

    public virtual DbSet<TblDesiyaFacility> TblDesiyaFacilities { get; set; }

    public virtual DbSet<TblDesiyaHotelOverViewAll> TblDesiyaHotelOverViewAlls { get; set; }

    public virtual DbSet<TblDesiyaHotelOverview> TblDesiyaHotelOverviews { get; set; }

    public virtual DbSet<TblDesiyaHotelReview> TblDesiyaHotelReviews { get; set; }

    public virtual DbSet<TblDesiyaImageUrl> TblDesiyaImageUrls { get; set; }

    public virtual DbSet<TblDesiyaInAndAround> TblDesiyaInAndArounds { get; set; }

    public virtual DbSet<TblDesiyaPoiDatum> TblDesiyaPoiData { get; set; }

    public virtual DbSet<TblDesiyaRoomDescription> TblDesiyaRoomDescriptions { get; set; }

    public virtual DbSet<TblDesiyaSecondaryArea> TblDesiyaSecondaryAreas { get; set; }

    public virtual DbSet<TblDesiyaThemeAndCategory> TblDesiyaThemeAndCategories { get; set; }

    public virtual DbSet<TblDhavanCommand> TblDhavanCommands { get; set; }

    public virtual DbSet<TblDhavanEntry> TblDhavanEntries { get; set; }

    public virtual DbSet<TblDhavanHist> TblDhavanHists { get; set; }

    public virtual DbSet<TblDhavanHistory> TblDhavanHistories { get; set; }

    public virtual DbSet<TblDhavanMaster> TblDhavanMasters { get; set; }

    public virtual DbSet<TblDiscount> TblDiscounts { get; set; }

    public virtual DbSet<TblDistAdminMenuInVisibleByDistType> TblDistAdminMenuInVisibleByDistTypes { get; set; }

    public virtual DbSet<TblDistAdminMenuInVisibleByDistTypeHistory> TblDistAdminMenuInVisibleByDistTypeHistories { get; set; }

    public virtual DbSet<TblDistAdminMenuMaster> TblDistAdminMenuMasters { get; set; }

    public virtual DbSet<TblDistAdminMenuMasterHistory> TblDistAdminMenuMasterHistories { get; set; }

    public virtual DbSet<TblDistAdminMenuRight> TblDistAdminMenuRights { get; set; }

    public virtual DbSet<TblDistAdminMenuRightsHistory> TblDistAdminMenuRightsHistories { get; set; }

    public virtual DbSet<TblDistAdminPageMaster> TblDistAdminPageMasters { get; set; }

    public virtual DbSet<TblDistAdminPageMasterHistory> TblDistAdminPageMasterHistories { get; set; }

    public virtual DbSet<TblDistAdminUser> TblDistAdminUsers { get; set; }

    public virtual DbSet<TblDistributorLimitApprovalDetail> TblDistributorLimitApprovalDetails { get; set; }

    public virtual DbSet<TblDistributorLimitApprovalDetailsMax> TblDistributorLimitApprovalDetailsMaxes { get; set; }

    public virtual DbSet<TblDistributorMaster> TblDistributorMasters { get; set; }

    public virtual DbSet<TblDistributorMaster1> TblDistributorMaster1s { get; set; }

    public virtual DbSet<TblDistributorMasterAto> TblDistributorMasterAtos { get; set; }

    public virtual DbSet<TblDistributorMasterPrakash> TblDistributorMasterPrakashes { get; set; }

    public virtual DbSet<TblDistributorMasterPrakashCommand> TblDistributorMasterPrakashCommands { get; set; }

    public virtual DbSet<TblDistributorMasterPrakashHistory> TblDistributorMasterPrakashHistories { get; set; }

    public virtual DbSet<TblDistributorMasterRto> TblDistributorMasterRtos { get; set; }

    public virtual DbSet<TblDistributorMasterTemp> TblDistributorMasterTemps { get; set; }

    public virtual DbSet<TblDob> TblDobs { get; set; }

    public virtual DbSet<TblDtl> TblDtls { get; set; }

    public virtual DbSet<TblDummyMaster> TblDummyMasters { get; set; }

    public virtual DbSet<TblDummyMasterHistory> TblDummyMasterHistories { get; set; }

    public virtual DbSet<TblEm> TblEms { get; set; }

    public virtual DbSet<TblEmp1> TblEmps1 { get; set; }

    public virtual DbSet<TblEmp2> TblEmps2 { get; set; }

    public virtual DbSet<TblEmpCommandD1> TblEmpCommandD1s { get; set; }

    public virtual DbSet<TblEmpDetail> TblEmpDetails { get; set; }

    public virtual DbSet<TblEmpDetailsBackup08012010> TblEmpDetailsBackup08012010s { get; set; }

    public virtual DbSet<TblEmpDetailsOld> TblEmpDetailsOlds { get; set; }

    public virtual DbSet<TblEmpDhavan> TblEmpDhavans { get; set; }

    public virtual DbSet<TblEmpDhavanCommand> TblEmpDhavanCommands { get; set; }

    public virtual DbSet<TblEmpH> TblEmpHs { get; set; }

    public virtual DbSet<TblEmpHcommand> TblEmpHcommands { get; set; }

    public virtual DbSet<TblEmpHhistory> TblEmpHhistories { get; set; }

    public virtual DbSet<TblEmpHistoryD1> TblEmpHistoryD1s { get; set; }

    public virtual DbSet<TblEmpHistroyDhavan> TblEmpHistroyDhavans { get; set; }

    public virtual DbSet<TblEmpInfo> TblEmpInfos { get; set; }

    public virtual DbSet<TblEmpMa> TblEmpMas { get; set; }

    public virtual DbSet<TblEmpMast> TblEmpMasts { get; set; }

    public virtual DbSet<TblEmpMaster> TblEmpMasters { get; set; }

    public virtual DbSet<TblEmpMasterD1> TblEmpMasterD1s { get; set; }

    public virtual DbSet<TblEmpMasterDetail> TblEmpMasterDetails { get; set; }

    public virtual DbSet<TblEmpMasterDhavan> TblEmpMasterDhavans { get; set; }

    public virtual DbSet<TblEmpMasterOld> TblEmpMasterOlds { get; set; }

    public virtual DbSet<TblEmployeHistoryMaster1> TblEmployeHistoryMaster1s { get; set; }

    public virtual DbSet<TblEmployeMaster1> TblEmployeMaster1s { get; set; }

    public virtual DbSet<TblEmployeeDemo> TblEmployeeDemos { get; set; }

    public virtual DbSet<TblEmployeeLeaveDetail> TblEmployeeLeaveDetails { get; set; }

    public virtual DbSet<TblEmployeeLeaveDetailCommand> TblEmployeeLeaveDetailCommands { get; set; }

    public virtual DbSet<TblEmployeeLeaveDetailHistory> TblEmployeeLeaveDetailHistories { get; set; }

    public virtual DbSet<TblEmployeeMaster> TblEmployeeMasters { get; set; }

    public virtual DbSet<TblEmployeeMasterForPrakash> TblEmployeeMasterForPrakashes { get; set; }

    public virtual DbSet<TblEmployeeMasterTable> TblEmployeeMasterTables { get; set; }

    public virtual DbSet<TblEmployeeMasterTableCommand> TblEmployeeMasterTableCommands { get; set; }

    public virtual DbSet<TblEmployeeMasterTableHistory> TblEmployeeMasterTableHistories { get; set; }

    public virtual DbSet<TblEmployeeMasterTableHistory2> TblEmployeeMasterTableHistory2s { get; set; }

    public virtual DbSet<TblEmployemasterCommand> TblEmployemasterCommands { get; set; }

    public virtual DbSet<TblEmpmasterCommandSunilSingh> TblEmpmasterCommandSunilSinghs { get; set; }

    public virtual DbSet<TblEmpmasterHistorySunilSingh> TblEmpmasterHistorySunilSinghs { get; set; }

    public virtual DbSet<TblEmpmasterSunilSingh> TblEmpmasterSunilSinghs { get; set; }

    public virtual DbSet<TblEmppMaster> TblEmppMasters { get; set; }

    public virtual DbSet<TblEmppType> TblEmppTypes { get; set; }

    public virtual DbSet<TblErr> TblErrs { get; set; }

    public virtual DbSet<TblError> TblErrors { get; set; }

    public virtual DbSet<TblEvent> TblEvents { get; set; }

    public virtual DbSet<TblEvent1> TblEvents1 { get; set; }

    public virtual DbSet<TblExcDatabaseMaster> TblExcDatabaseMasters { get; set; }

    public virtual DbSet<TblExcDocMast> TblExcDocMasts { get; set; }

    public virtual DbSet<TblExcMasterMast> TblExcMasterMasts { get; set; }

    public virtual DbSet<TblExcMenuMaster> TblExcMenuMasters { get; set; }

    public virtual DbSet<TblExcUserMaster> TblExcUserMasters { get; set; }

    public virtual DbSet<TblExcUsersMenuRight> TblExcUsersMenuRights { get; set; }

    public virtual DbSet<TblFamilyInfoDetail> TblFamilyInfoDetails { get; set; }

    public virtual DbSet<TblFamilyInfoMaster> TblFamilyInfoMasters { get; set; }

    public virtual DbSet<TblFindMobile> TblFindMobiles { get; set; }

    public virtual DbSet<TblForHelping123> TblForHelping123s { get; set; }

    public virtual DbSet<TblFoxcurrencyMaster> TblFoxcurrencyMasters { get; set; }

    public virtual DbSet<TblFoxorderMaster> TblFoxorderMasters { get; set; }

    public virtual DbSet<TblFoxorderMasterMax> TblFoxorderMasterMaxes { get; set; }

    public virtual DbSet<TblFoxorderStatusHistory> TblFoxorderStatusHistories { get; set; }

    public virtual DbSet<TblFoxorderStatusMaster> TblFoxorderStatusMasters { get; set; }

    public virtual DbSet<TblFoxpurposeMaster> TblFoxpurposeMasters { get; set; }

    public virtual DbSet<TblGroupBooking> TblGroupBookings { get; set; }

    public virtual DbSet<TblGroupBookingDetail> TblGroupBookingDetails { get; set; }

    public virtual DbSet<TblGroupBookingEmailSentDetail> TblGroupBookingEmailSentDetails { get; set; }

    public virtual DbSet<TblGtageoCode> TblGtageoCodes { get; set; }

    public virtual DbSet<TblGtahotel> TblGtahotels { get; set; }

    public virtual DbSet<TblGtahotelFacility> TblGtahotelFacilities { get; set; }

    public virtual DbSet<TblGtaimageLink> TblGtaimageLinks { get; set; }

    public virtual DbSet<TblGtamapPageLink> TblGtamapPageLinks { get; set; }

    public virtual DbSet<TblGtareport> TblGtareports { get; set; }

    public virtual DbSet<TblGtaroomCategory> TblGtaroomCategories { get; set; }

    public virtual DbSet<TblGtaroomFacility> TblGtaroomFacilities { get; set; }

    public virtual DbSet<TblGtaroomType> TblGtaroomTypes { get; set; }

    public virtual DbSet<TblHistory> TblHistories { get; set; }

    public virtual DbSet<TblHistoryProductTypeMaster> TblHistoryProductTypeMasters { get; set; }

    public virtual DbSet<TblHotel> TblHotels { get; set; }

    public virtual DbSet<TblHotelDetail> TblHotelDetails { get; set; }

    public virtual DbSet<TblHtlapicountryLinkMaster> TblHtlapicountryLinkMasters { get; set; }

    public virtual DbSet<TblHtlapidataSynchronization> TblHtlapidataSynchronizations { get; set; }

    public virtual DbSet<TblHtlapidataSynchronizationCommand> TblHtlapidataSynchronizationCommands { get; set; }

    public virtual DbSet<TblHtlapidataSynchronizationHistory> TblHtlapidataSynchronizationHistories { get; set; }

    public virtual DbSet<TblHtlapihotelCityLinkMaster> TblHtlapihotelCityLinkMasters { get; set; }

    public virtual DbSet<TblHtlapimaster> TblHtlapimasters { get; set; }

    public virtual DbSet<TblHtlcategoryMaster> TblHtlcategoryMasters { get; set; }

    public virtual DbSet<TblHtlcommonHotelDetail> TblHtlcommonHotelDetails { get; set; }

    public virtual DbSet<TblHtlcommonHotelMaster> TblHtlcommonHotelMasters { get; set; }

    public virtual DbSet<TblHtlhotelCityMaster> TblHtlhotelCityMasters { get; set; }

    public virtual DbSet<TblHtlhotelMaster> TblHtlhotelMasters { get; set; }

    public virtual DbSet<TblHtlhotelMasterBkp> TblHtlhotelMasterBkps { get; set; }

    public virtual DbSet<TblHtlhotelMasterOld> TblHtlhotelMasterOlds { get; set; }

    public virtual DbSet<TblHtlhotelReviewMaster> TblHtlhotelReviewMasters { get; set; }

    public virtual DbSet<TblHtlhotelReviewMasterOld> TblHtlhotelReviewMasterOlds { get; set; }

    public virtual DbSet<TblHtlhotelStateMaster> TblHtlhotelStateMasters { get; set; }

    public virtual DbSet<TblHtlinfoDetail> TblHtlinfoDetails { get; set; }

    public virtual DbSet<TblHtlinfoDetailOld> TblHtlinfoDetailOlds { get; set; }

    public virtual DbSet<TblHtlinfoMaster> TblHtlinfoMasters { get; set; }

    public virtual DbSet<TblHtlinfoMasterOld> TblHtlinfoMasterOlds { get; set; }

    public virtual DbSet<TblHtlinfoParameterMaster> TblHtlinfoParameterMasters { get; set; }

    public virtual DbSet<TblHtlsyncDatum> TblHtlsyncData { get; set; }

    public virtual DbSet<TblInformation> TblInformations { get; set; }

    public virtual DbSet<TblIpmaster> TblIpmasters { get; set; }

    public virtual DbSet<TblIrctcconfiguration> TblIrctcconfigurations { get; set; }

    public virtual DbSet<TblItemGroupMasterCommandSp> TblItemGroupMasterCommandSps { get; set; }

    public virtual DbSet<TblItemGroupMasterHistorySp> TblItemGroupMasterHistorySps { get; set; }

    public virtual DbSet<TblItemGroupMasterSp> TblItemGroupMasterSps { get; set; }

    public virtual DbSet<TblItemMaster> TblItemMasters { get; set; }

    public virtual DbSet<TblItemMasterCommand> TblItemMasterCommands { get; set; }

    public virtual DbSet<TblItemMasterCommandSp> TblItemMasterCommandSps { get; set; }

    public virtual DbSet<TblItemMasterHistory> TblItemMasterHistories { get; set; }

    public virtual DbSet<TblItemMasterHistorySp> TblItemMasterHistorySps { get; set; }

    public virtual DbSet<TblItemMasterSp> TblItemMasterSps { get; set; }

    public virtual DbSet<TblItemOrderMaster> TblItemOrderMasters { get; set; }

    public virtual DbSet<TblItemTypeMaster> TblItemTypeMasters { get; set; }

    public virtual DbSet<TblItemTypeMasterCommand> TblItemTypeMasterCommands { get; set; }

    public virtual DbSet<TblItemTypeMasterHistory> TblItemTypeMasterHistories { get; set; }

    public virtual DbSet<TblItineraryLogBackup> TblItineraryLogBackups { get; set; }

    public virtual DbSet<TblItmHistory> TblItmHistories { get; set; }

    public virtual DbSet<TblItmMaster> TblItmMasters { get; set; }

    public virtual DbSet<TblItmMasterCommand> TblItmMasterCommands { get; set; }

    public virtual DbSet<TblItmMasterHistory> TblItmMasterHistories { get; set; }

    public virtual DbSet<TblKeySql> TblKeySqls { get; set; }

    public virtual DbSet<TblKeyoor> TblKeyoors { get; set; }

    public virtual DbSet<TblKeyoorCommission> TblKeyoorCommissions { get; set; }

    public virtual DbSet<TblKycdocMaster> TblKycdocMasters { get; set; }

    public virtual DbSet<TblLevelCheck> TblLevelChecks { get; set; }

    public virtual DbSet<TblLibraryMaster> TblLibraryMasters { get; set; }

    public virtual DbSet<TblLibraryMasterCommand> TblLibraryMasterCommands { get; set; }

    public virtual DbSet<TblLibraryMasterHistory> TblLibraryMasterHistories { get; set; }

    public virtual DbSet<TblMachineMaster> TblMachineMasters { get; set; }

    public virtual DbSet<TblMachineMasterHistory> TblMachineMasterHistories { get; set; }

    public virtual DbSet<TblMachineTypeCommand> TblMachineTypeCommands { get; set; }

    public virtual DbSet<TblMachineTypeMaster> TblMachineTypeMasters { get; set; }

    public virtual DbSet<TblMachineTypemasterHistory> TblMachineTypemasterHistories { get; set; }

    public virtual DbSet<TblMast> TblMasts { get; set; }

    public virtual DbSet<TblMaster2> TblMaster2s { get; set; }

    public virtual DbSet<TblMasterAgent> TblMasterAgents { get; set; }

    public virtual DbSet<TblMasterAgentCommand> TblMasterAgentCommands { get; set; }

    public virtual DbSet<TblMasterAgentHistory> TblMasterAgentHistories { get; set; }

    public virtual DbSet<TblMasterCustomer> TblMasterCustomers { get; set; }

    public virtual DbSet<TblMasterCustomerCommand> TblMasterCustomerCommands { get; set; }

    public virtual DbSet<TblMasterCustomerHistory> TblMasterCustomerHistories { get; set; }

    public virtual DbSet<TblMasterDept> TblMasterDepts { get; set; }

    public virtual DbSet<TblMasterDeptCommand> TblMasterDeptCommands { get; set; }

    public virtual DbSet<TblMasterDeptHistory> TblMasterDeptHistories { get; set; }

    public virtual DbSet<TblMasterEmpCommand> TblMasterEmpCommands { get; set; }

    public virtual DbSet<TblMasterEmpHistory> TblMasterEmpHistories { get; set; }

    public virtual DbSet<TblMasterItem> TblMasterItems { get; set; }

    public virtual DbSet<TblMasterItemCommand> TblMasterItemCommands { get; set; }

    public virtual DbSet<TblMasterItemHistory> TblMasterItemHistories { get; set; }

    public virtual DbSet<TblMasterProduct> TblMasterProducts { get; set; }

    public virtual DbSet<TblMasterProductCommand> TblMasterProductCommands { get; set; }

    public virtual DbSet<TblMasterProductHistory> TblMasterProductHistories { get; set; }

    public virtual DbSet<TblMasterUnit> TblMasterUnits { get; set; }

    public virtual DbSet<TblMasterUnitCommand> TblMasterUnitCommands { get; set; }

    public virtual DbSet<TblMasterUnitHistory> TblMasterUnitHistories { get; set; }

    public virtual DbSet<TblMastx> TblMastxes { get; set; }

    public virtual DbSet<TblMaxId> TblMaxIds { get; set; }

    public virtual DbSet<TblMedicineMaster> TblMedicineMasters { get; set; }

    public virtual DbSet<TblMedicineMasterCommand> TblMedicineMasterCommands { get; set; }

    public virtual DbSet<TblMedicineMasterHistory> TblMedicineMasterHistories { get; set; }

    public virtual DbSet<TblMedicineTypeMaster> TblMedicineTypeMasters { get; set; }

    public virtual DbSet<TblMedicineTypeMasterCommand> TblMedicineTypeMasterCommands { get; set; }

    public virtual DbSet<TblMedicineTypeMasterHistory> TblMedicineTypeMasterHistories { get; set; }

    public virtual DbSet<TblMenuMaster1> TblMenuMaster1s { get; set; }

    public virtual DbSet<TblMenuRights1> TblMenuRights1s { get; set; }

    public virtual DbSet<TblMerchantMaster> TblMerchantMasters { get; set; }

    public virtual DbSet<TblMerchantMasterHistory> TblMerchantMasterHistories { get; set; }

    public virtual DbSet<TblMessageSendToCategoryMasterAto> TblMessageSendToCategoryMasterAtos { get; set; }

    public virtual DbSet<TblMessageSentMasterAto> TblMessageSentMasterAtos { get; set; }

    public virtual DbSet<TblMessageSentToDetailsAto> TblMessageSentToDetailsAtos { get; set; }

    public virtual DbSet<TblMobMaster> TblMobMasters { get; set; }

    public virtual DbSet<TblMobMasterCommand> TblMobMasterCommands { get; set; }

    public virtual DbSet<TblMobMasterHistory> TblMobMasterHistories { get; set; }

    public virtual DbSet<TblMspgdataApr2010> TblMspgdataApr2010s { get; set; }

    public virtual DbSet<TblMspgdataAug2010> TblMspgdataAug2010s { get; set; }

    public virtual DbSet<TblMspgdataDec2010> TblMspgdataDec2010s { get; set; }

    public virtual DbSet<TblMspgdataJan2011> TblMspgdataJan2011s { get; set; }

    public virtual DbSet<TblMspgdataJul2010> TblMspgdataJul2010s { get; set; }

    public virtual DbSet<TblMspgdataJun2010> TblMspgdataJun2010s { get; set; }

    public virtual DbSet<TblMspgdataMay2010> TblMspgdataMay2010s { get; set; }

    public virtual DbSet<TblMspgdataNov2010> TblMspgdataNov2010s { get; set; }

    public virtual DbSet<TblMspgdataOct2010> TblMspgdataOct2010s { get; set; }

    public virtual DbSet<TblMspgdataSep2010> TblMspgdataSep2010s { get; set; }

    public virtual DbSet<TblMspgrodatum> TblMspgrodata { get; set; }

    public virtual DbSet<TblNewOrderMaster> TblNewOrderMasters { get; set; }

    public virtual DbSet<TblNewStudentBookDetail> TblNewStudentBookDetails { get; set; }

    public virtual DbSet<TblNewStudentBookDetailsCommand> TblNewStudentBookDetailsCommands { get; set; }

    public virtual DbSet<TblNewStudentBookDetailsHistory> TblNewStudentBookDetailsHistories { get; set; }

    public virtual DbSet<TblNewStudentMaster> TblNewStudentMasters { get; set; }

    public virtual DbSet<TblNewStudentMasterCommand> TblNewStudentMasterCommands { get; set; }

    public virtual DbSet<TblNewStudentMasterHistory> TblNewStudentMasterHistories { get; set; }

    public virtual DbSet<TblOdrMaster> TblOdrMasters { get; set; }

    public virtual DbSet<TblOrder> TblOrders { get; set; }

    public virtual DbSet<TblOrderCancelDetail> TblOrderCancelDetails { get; set; }

    public virtual DbSet<TblOrderDetail> TblOrderDetails { get; set; }

    public virtual DbSet<TblOrderDetail1> TblOrderDetails1 { get; set; }

    public virtual DbSet<TblOrderMast> TblOrderMasts { get; set; }

    public virtual DbSet<TblOrderMaster> TblOrderMasters { get; set; }

    public virtual DbSet<TblOrderMasterTest> TblOrderMasterTests { get; set; }

    public virtual DbSet<TblOrderMasterTestCommand> TblOrderMasterTestCommands { get; set; }

    public virtual DbSet<TblOrderMasterTestHistory> TblOrderMasterTestHistories { get; set; }

    public virtual DbSet<TblOrderRequestDetail> TblOrderRequestDetails { get; set; }

    public virtual DbSet<TblOrderRequestMaster> TblOrderRequestMasters { get; set; }

    public virtual DbSet<TblPageMaster> TblPageMasters { get; set; }

    public virtual DbSet<TblPageMasterHistory> TblPageMasterHistories { get; set; }

    public virtual DbSet<TblPaymentGatewayMaster> TblPaymentGatewayMasters { get; set; }

    public virtual DbSet<TblPaymentGatewayPgapilinkMaster> TblPaymentGatewayPgapilinkMasters { get; set; }

    public virtual DbSet<TblPaymentGatewayPgapiprocessLinkMaster> TblPaymentGatewayPgapiprocessLinkMasters { get; set; }

    public virtual DbSet<TblPaymentGatewayPggroupTypeLinkMaster> TblPaymentGatewayPggroupTypeLinkMasters { get; set; }

    public virtual DbSet<TblPer> TblPers { get; set; }

    public virtual DbSet<TblPerchaseCoupon> TblPerchaseCoupons { get; set; }

    public virtual DbSet<TblPersonCommand> TblPersonCommands { get; set; }

    public virtual DbSet<TblPersonHistory> TblPersonHistories { get; set; }

    public virtual DbSet<TblPersonInfo> TblPersonInfos { get; set; }

    public virtual DbSet<TblPersonMaster> TblPersonMasters { get; set; }

    public virtual DbSet<TblPgapimaster> TblPgapimasters { get; set; }

    public virtual DbSet<TblPggroupTypeMaster> TblPggroupTypeMasters { get; set; }

    public virtual DbSet<TblPinCodeMasterOld> TblPinCodeMasterOlds { get; set; }

    public virtual DbSet<TblPinCodeTemp> TblPinCodeTemps { get; set; }

    public virtual DbSet<TblPinMaster> TblPinMasters { get; set; }

    public virtual DbSet<TblPinRequestMaster> TblPinRequestMasters { get; set; }

    public virtual DbSet<TblPinTypeMaster> TblPinTypeMasters { get; set; }

    public virtual DbSet<TblPincodeMaster> TblPincodeMasters { get; set; }

    public virtual DbSet<TblPlantMaster> TblPlantMasters { get; set; }

    public virtual DbSet<TblPlantMasterCommand> TblPlantMasterCommands { get; set; }

    public virtual DbSet<TblPlantMasterHistory> TblPlantMasterHistories { get; set; }

    public virtual DbSet<TblPlantTypeMaster> TblPlantTypeMasters { get; set; }

    public virtual DbSet<TblPlantTypeMasterCommand> TblPlantTypeMasterCommands { get; set; }

    public virtual DbSet<TblPlantTypeMasterHistory> TblPlantTypeMasterHistories { get; set; }

    public virtual DbSet<TblProcessMaster> TblProcessMasters { get; set; }

    public virtual DbSet<TblProdMaster> TblProdMasters { get; set; }

    public virtual DbSet<TblProductMast> TblProductMasts { get; set; }

    public virtual DbSet<TblProductMaster> TblProductMasters { get; set; }

    public virtual DbSet<TblProductMasterCommand> TblProductMasterCommands { get; set; }

    public virtual DbSet<TblProductMasterHistory> TblProductMasterHistories { get; set; }

    public virtual DbSet<TblProductServiceMaster> TblProductServiceMasters { get; set; }

    public virtual DbSet<TblProductServiceMasterCommand> TblProductServiceMasterCommands { get; set; }

    public virtual DbSet<TblProductServiceMasterHistory> TblProductServiceMasterHistories { get; set; }

    public virtual DbSet<TblProductTypeMaster> TblProductTypeMasters { get; set; }

    public virtual DbSet<TblProductTypeMasterCommand> TblProductTypeMasterCommands { get; set; }

    public virtual DbSet<TblProductTypeMasterHistory> TblProductTypeMasterHistories { get; set; }

    public virtual DbSet<TblProviderMaster> TblProviderMasters { get; set; }

    public virtual DbSet<TblProviderMasterCommand> TblProviderMasterCommands { get; set; }

    public virtual DbSet<TblProviderMasterHistory> TblProviderMasterHistories { get; set; }

    public virtual DbSet<TblProviderTypeMaster> TblProviderTypeMasters { get; set; }

    public virtual DbSet<TblProviderTypeMasterCommand> TblProviderTypeMasterCommands { get; set; }

    public virtual DbSet<TblProviderTypeMasterHistory> TblProviderTypeMasterHistories { get; set; }

    public virtual DbSet<TblReconciliationDetail> TblReconciliationDetails { get; set; }

    public virtual DbSet<TblReconciliationMaster> TblReconciliationMasters { get; set; }

    public virtual DbSet<TblRedeem> TblRedeems { get; set; }

    public virtual DbSet<TblRedeemOrder> TblRedeemOrders { get; set; }

    public virtual DbSet<TblRedeemOrdersMax> TblRedeemOrdersMaxes { get; set; }

    public virtual DbSet<TblRedeemProductBrandMaster> TblRedeemProductBrandMasters { get; set; }

    public virtual DbSet<TblRedeemProductCategoryMaster> TblRedeemProductCategoryMasters { get; set; }

    public virtual DbSet<TblRedeemProductMaster> TblRedeemProductMasters { get; set; }

    public virtual DbSet<TblRoleMaster> TblRoleMasters { get; set; }

    public virtual DbSet<TblRoleMaster1> TblRoleMaster1s { get; set; }

    public virtual DbSet<TblRoleMasterHistory> TblRoleMasterHistories { get; set; }

    public virtual DbSet<TblSampleMaster> TblSampleMasters { get; set; }

    public virtual DbSet<TblSampleMasterHistory> TblSampleMasterHistories { get; set; }

    public virtual DbSet<TblServiceMaster> TblServiceMasters { get; set; }

    public virtual DbSet<TblServiceMasterCommand> TblServiceMasterCommands { get; set; }

    public virtual DbSet<TblServiceMasterHistory> TblServiceMasterHistories { get; set; }

    public virtual DbSet<TblSperrorMgmt> TblSperrorMgmts { get; set; }

    public virtual DbSet<TblStaffIncentivePeriod> TblStaffIncentivePeriods { get; set; }

    public virtual DbSet<TblState> TblStates { get; set; }

    public virtual DbSet<TblState1> TblStates1 { get; set; }

    public virtual DbSet<TblStateMaster> TblStateMasters { get; set; }

    public virtual DbSet<TblStateMasterBu> TblStateMasterBus { get; set; }

    public virtual DbSet<TblStatesAto> TblStatesAtos { get; set; }

    public virtual DbSet<TblStationMasterBu> TblStationMasterBus { get; set; }

    public virtual DbSet<TblStdMaster> TblStdMasters { get; set; }

    public virtual DbSet<TblStdMasterCommand> TblStdMasterCommands { get; set; }

    public virtual DbSet<TblStdMasterHistory> TblStdMasterHistories { get; set; }

    public virtual DbSet<TblStomenuMaster> TblStomenuMasters { get; set; }

    public virtual DbSet<TblStoredProcedureMaster> TblStoredProcedureMasters { get; set; }

    public virtual DbSet<TblStousersMenuRight> TblStousersMenuRights { get; set; }

    public virtual DbSet<TblStud> TblStuds { get; set; }

    public virtual DbSet<TblStudMaster> TblStudMasters { get; set; }

    public virtual DbSet<TblStudMaster1> TblStudMasters1 { get; set; }

    public virtual DbSet<TblStudMasterCommand> TblStudMasterCommands { get; set; }

    public virtual DbSet<TblStudMasterCommand2> TblStudMasterCommands2 { get; set; }

    public virtual DbSet<TblStudMasterHistory> TblStudMasterHistories { get; set; }

    public virtual DbSet<TblStudMasterHistory1> TblStudMasterHistories1 { get; set; }

    public virtual DbSet<TblStudMasterMark> TblStudMasterMarks { get; set; }

    public virtual DbSet<TblStudMasterMarkCommand> TblStudMasterMarkCommands { get; set; }

    public virtual DbSet<TblStudMasterMarkHistory> TblStudMasterMarkHistories { get; set; }

    public virtual DbSet<TblStudMastercommand1> TblStudMastercommands1 { get; set; }

    public virtual DbSet<TblStudent> TblStudents { get; set; }

    public virtual DbSet<TblStudent1> TblStudents1 { get; set; }

    public virtual DbSet<TblStudent2> TblStudents2 { get; set; }

    public virtual DbSet<TblStudentCourseRegistration> TblStudentCourseRegistrations { get; set; }

    public virtual DbSet<TblStudentHistory> TblStudentHistories { get; set; }

    public virtual DbSet<TblStudentMaster> TblStudentMasters { get; set; }

    public virtual DbSet<TblStudentMasterCommand> TblStudentMasterCommands { get; set; }

    public virtual DbSet<TblStudentMasterCommand1> TblStudentMasterCommands1 { get; set; }

    public virtual DbSet<TblStudentMasterHistory> TblStudentMasterHistories { get; set; }

    public virtual DbSet<TblSubCategoryMaster> TblSubCategoryMasters { get; set; }

    public virtual DbSet<TblSyncDb> TblSyncDbs { get; set; }

    public virtual DbSet<TblTeamMaster> TblTeamMasters { get; set; }

    public virtual DbSet<TblTeamMemberMaster> TblTeamMemberMasters { get; set; }

    public virtual DbSet<TblTeamMemberMasterCommand> TblTeamMemberMasterCommands { get; set; }

    public virtual DbSet<TblTeamMemberMasterHistory> TblTeamMemberMasterHistories { get; set; }

    public virtual DbSet<TblTemp> TblTemps { get; set; }

    public virtual DbSet<TblTempBusapistationLinkMaster> TblTempBusapistationLinkMasters { get; set; }

    public virtual DbSet<TblTempBusstationMaster> TblTempBusstationMasters { get; set; }

    public virtual DbSet<TblTempKeyoor> TblTempKeyoors { get; set; }

    public virtual DbSet<TblTempRedBusStationResponse> TblTempRedBusStationResponses { get; set; }

    public virtual DbSet<TblTest> TblTests { get; set; }

    public virtual DbSet<TblTest1> TblTest1s { get; set; }

    public virtual DbSet<TblTest123> TblTest123s { get; set; }

    public virtual DbSet<TblTest1History> TblTest1Histories { get; set; }

    public virtual DbSet<TblTest567> TblTest567s { get; set; }

    public virtual DbSet<TblTest789> TblTest789s { get; set; }

    public virtual DbSet<TblTestDate> TblTestDates { get; set; }

    public virtual DbSet<TblTestDyn> TblTestDyns { get; set; }

    public virtual DbSet<TblTestEmp> TblTestEmps { get; set; }

    public virtual DbSet<TblTestSql> TblTestSqls { get; set; }

    public virtual DbSet<TblTestTrigger> TblTestTriggers { get; set; }

    public virtual DbSet<TblTestTriggerStatusLog> TblTestTriggerStatusLogs { get; set; }

    public virtual DbSet<TblTesting> TblTestings { get; set; }

    public virtual DbSet<TblText> TblTexts { get; set; }

    public virtual DbSet<TblTexthistory> TblTexthistories { get; set; }

    public virtual DbSet<TblTicketDetail> TblTicketDetails { get; set; }

    public virtual DbSet<TblTicketDetailMax> TblTicketDetailMaxes { get; set; }

    public virtual DbSet<TblTicketFlightDetail> TblTicketFlightDetails { get; set; }

    public virtual DbSet<TblTicketMaster> TblTicketMasters { get; set; }

    public virtual DbSet<TblTicketMasterMax> TblTicketMasterMaxes { get; set; }

    public virtual DbSet<TblTicketMasterTest> TblTicketMasterTests { get; set; }

    public virtual DbSet<TblTicketPassengerDetail> TblTicketPassengerDetails { get; set; }

    public virtual DbSet<TblTicketPxFareDetail> TblTicketPxFareDetails { get; set; }

    public virtual DbSet<TblTrainingMe> TblTrainingMes { get; set; }

    public virtual DbSet<TblTransaction> TblTransactions { get; set; }

    public virtual DbSet<TblTransactionAmount> TblTransactionAmounts { get; set; }

    public virtual DbSet<TblTripPeriodMaster> TblTripPeriodMasters { get; set; }

    public virtual DbSet<TblTripRegenerationCriterion> TblTripRegenerationCriteria { get; set; }

    public virtual DbSet<TblUser> TblUsers { get; set; }

    public virtual DbSet<TblUserAccessLocationMaster> TblUserAccessLocationMasters { get; set; }

    public virtual DbSet<TblUserAccessTimeMaster> TblUserAccessTimeMasters { get; set; }

    public virtual DbSet<TblUserMaster> TblUserMasters { get; set; }

    public virtual DbSet<TblUserMasterCommand> TblUserMasterCommands { get; set; }

    public virtual DbSet<TblUserMasterHistory> TblUserMasterHistories { get; set; }

    public virtual DbSet<TblUserTypeMaster> TblUserTypeMasters { get; set; }

    public virtual DbSet<TblUserTypeMaster1> TblUserTypeMaster1s { get; set; }

    public virtual DbSet<TblUserTypeMasterCommand> TblUserTypeMasterCommands { get; set; }

    public virtual DbSet<TblUserTypeMasterHistory> TblUserTypeMasterHistories { get; set; }

    public virtual DbSet<TblUserTypeMasterd1> TblUserTypeMasterd1s { get; set; }

    public virtual DbSet<TblUsersDocSeriesRight> TblUsersDocSeriesRights { get; set; }

    public virtual DbSet<TblVehicleMaster> TblVehicleMasters { get; set; }

    public virtual DbSet<TblVehicleMasterDetail> TblVehicleMasterDetails { get; set; }

    public virtual DbSet<TblVendor> TblVendors { get; set; }

    public virtual DbSet<TblWsdata2> TblWsdata2s { get; set; }

    public virtual DbSet<TblWsdataLive> TblWsdataLives { get; set; }

    public virtual DbSet<TblWsdataTest> TblWsdataTests { get; set; }

    public virtual DbSet<TblWsjayesh> TblWsjayeshes { get; set; }

    public virtual DbSet<TblWsjayeshCommand> TblWsjayeshCommands { get; set; }

    public virtual DbSet<TblauthorMasterCommand> TblauthorMasterCommands { get; set; }

    public virtual DbSet<Tblbranch> Tblbranches { get; set; }

    public virtual DbSet<TblcommandEmp> TblcommandEmps { get; set; }

    public virtual DbSet<Tblcrudnetcore> Tblcrudnetcores { get; set; }

    public virtual DbSet<Tbldepartment> Tbldepartments { get; set; }

    public virtual DbSet<Tbldepartment1> Tbldepartments1 { get; set; }

    public virtual DbSet<Tbldeptmaster11> Tbldeptmaster11s { get; set; }

    public virtual DbSet<TblebusTransaction> TblebusTransactions { get; set; }

    public virtual DbSet<Tbleempmaster1> Tbleempmaster1s { get; set; }

    public virtual DbSet<Tblektum> Tblekta { get; set; }

    public virtual DbSet<Tblemp> Tblemps { get; set; }

    public virtual DbSet<Tblemployee> Tblemployees { get; set; }

    public virtual DbSet<Tblemployee1> Tblemployees1 { get; set; }

    public virtual DbSet<Tblempmaster1> Tblempmaster1s { get; set; }

    public virtual DbSet<TblhistoryEmp> TblhistoryEmps { get; set; }

    public virtual DbSet<Tblmaster> Tblmasters { get; set; }

    public virtual DbSet<TblmasterEmp> TblmasterEmps { get; set; }

    public virtual DbSet<TblmasterEmp1> TblmasterEmps1 { get; set; }

    public virtual DbSet<TblmasterEmplog> TblmasterEmplogs { get; set; }

    public virtual DbSet<Tblmerchantmastercommand> Tblmerchantmastercommands { get; set; }

    public virtual DbSet<Tblre> Tblres { get; set; }

    public virtual DbSet<TblspErrMgmt> TblspErrMgmts { get; set; }

    public virtual DbSet<Tblstudcommand> Tblstudcommands { get; set; }

    public virtual DbSet<Tblstudentmasterhistorye> Tblstudentmasterhistoryes { get; set; }

    public virtual DbSet<Tblstudmastere> Tblstudmasteres { get; set; }

    public virtual DbSet<Tblstudmasterhistorye> Tblstudmasterhistoryes { get; set; }

    public virtual DbSet<TbltblRdsaccountSyncFileDetail> TbltblRdsaccountSyncFileDetails { get; set; }

    public virtual DbSet<Tbltempemp> Tbltempemps { get; set; }

    public virtual DbSet<Tbltraining> Tbltrainings { get; set; }

    public virtual DbSet<Tbluserdatum> Tbluserdata { get; set; }

    public virtual DbSet<Temp> Temps { get; set; }

    public virtual DbSet<Temp1> Temp1s { get; set; }

    public virtual DbSet<TempAtsr> TempAtsrs { get; set; }

    public virtual DbSet<Temptable> Temptables { get; set; }

    public virtual DbSet<Temptest> Temptests { get; set; }

    public virtual DbSet<Test> Tests { get; set; }

    public virtual DbSet<Test1> Test1s { get; set; }

    public virtual DbSet<Test10> Test10s { get; set; }

    public virtual DbSet<Test100> Test100s { get; set; }

    public virtual DbSet<Test11> Test11s { get; set; }

    public virtual DbSet<Test123> Test123s { get; set; }

    public virtual DbSet<Test2> Test2s { get; set; }

    public virtual DbSet<Test22> Test22s { get; set; }

    public virtual DbSet<TestDepartmentMaster> TestDepartmentMasters { get; set; }

    public virtual DbSet<TestEmp> TestEmps { get; set; }

    public virtual DbSet<TestEmployeeMaster> TestEmployeeMasters { get; set; }

    public virtual DbSet<TestImage> TestImages { get; set; }

    public virtual DbSet<TestProfiler> TestProfilers { get; set; }

    public virtual DbSet<TestProject> TestProjects { get; set; }

    public virtual DbSet<TestSpit1> TestSpit1s { get; set; }

    public virtual DbSet<TestSplit> TestSplits { get; set; }

    public virtual DbSet<TestTable> TestTables { get; set; }

    public virtual DbSet<TestTable1> TestTables1 { get; set; }

    public virtual DbSet<TestTable2> TestTables2 { get; set; }

    public virtual DbSet<TestTableForEncryption> TestTableForEncryptions { get; set; }

    public virtual DbSet<TestTblVehicleMasterDetail> TestTblVehicleMasterDetails { get; set; }

    public virtual DbSet<TestTree> TestTrees { get; set; }

    public virtual DbSet<TestUnknownToken1> TestUnknownToken1s { get; set; }

    public virtual DbSet<Testalter> Testalters { get; set; }

    public virtual DbSet<Testing> Testings { get; set; }

    public virtual DbSet<Testque> Testques { get; set; }

    public virtual DbSet<Testtran> Testtrans { get; set; }

    public virtual DbSet<Testxml> Testxmls { get; set; }

    public virtual DbSet<Tfsclient> Tfsclients { get; set; }

    public virtual DbSet<TmpProduct> TmpProducts { get; set; }

    public virtual DbSet<Tmpemp> Tmpemps { get; set; }

    public virtual DbSet<Tmptestsalary> Tmptestsalaries { get; set; }

    public virtual DbSet<TmtblDocMgmtClassMaster> TmtblDocMgmtClassMasters { get; set; }

    public virtual DbSet<TmtblDocMgmtDataTypeMaster> TmtblDocMgmtDataTypeMasters { get; set; }

    public virtual DbSet<TmtblDocMgmtFrmpgclassFunctionsUsed> TmtblDocMgmtFrmpgclassFunctionsUseds { get; set; }

    public virtual DbSet<TmtblDocMgmtFrmpgfunctionMaster> TmtblDocMgmtFrmpgfunctionMasters { get; set; }

    public virtual DbSet<TmtblDocMgmtFrmpgmaster> TmtblDocMgmtFrmpgmasters { get; set; }

    public virtual DbSet<TmtblDocMgmtReportMaster> TmtblDocMgmtReportMasters { get; set; }

    public virtual DbSet<TmtblDocMgmtReportSpused> TmtblDocMgmtReportSpuseds { get; set; }

    public virtual DbSet<TmtblDocMgmtSpcfdataRetrievalDetail> TmtblDocMgmtSpcfdataRetrievalDetails { get; set; }

    public virtual DbSet<TmtblDocMgmtSpcfmaster> TmtblDocMgmtSpcfmasters { get; set; }

    public virtual DbSet<TmtblDocMgmtSpcfparametersDetail> TmtblDocMgmtSpcfparametersDetails { get; set; }

    public virtual DbSet<TmtblDocMgmtSpcftablesUsed> TmtblDocMgmtSpcftablesUseds { get; set; }

    public virtual DbSet<TmtblDocMgmtTableFieldsDetail> TmtblDocMgmtTableFieldsDetails { get; set; }

    public virtual DbSet<TmtblDocMgmtTableMaster> TmtblDocMgmtTableMasters { get; set; }

    public virtual DbSet<TmtblDocument> TmtblDocuments { get; set; }

    public virtual DbSet<TmtblEmployeeMaster> TmtblEmployeeMasters { get; set; }

    public virtual DbSet<TmtblError> TmtblErrors { get; set; }

    public virtual DbSet<TmtblErrorMgmtUser> TmtblErrorMgmtUsers { get; set; }

    public virtual DbSet<TmtblMailServerConfiguration> TmtblMailServerConfigurations { get; set; }

    public virtual DbSet<TmtblMenuMaster> TmtblMenuMasters { get; set; }

    public virtual DbSet<TmtblMenuRight> TmtblMenuRights { get; set; }

    public virtual DbSet<TmtblPageMaster> TmtblPageMasters { get; set; }

    public virtual DbSet<TmtblPageRight> TmtblPageRights { get; set; }

    public virtual DbSet<TmtblProjectMaster> TmtblProjectMasters { get; set; }

    public virtual DbSet<TmtblProjectTeamMaster> TmtblProjectTeamMasters { get; set; }

    public virtual DbSet<TmtblReminder> TmtblReminders { get; set; }

    public virtual DbSet<TmtblRightsMgmtUser> TmtblRightsMgmtUsers { get; set; }

    public virtual DbSet<TmtblRoleMaster> TmtblRoleMasters { get; set; }

    public virtual DbSet<TmtblSperrorMgmt> TmtblSperrorMgmts { get; set; }

    public virtual DbSet<TmtblUser> TmtblUsers { get; set; }

    public virtual DbSet<TmtblWmpriorityMaster> TmtblWmpriorityMasters { get; set; }

    public virtual DbSet<TmtblWmworkAssignmentMaster> TmtblWmworkAssignmentMasters { get; set; }

    public virtual DbSet<TmtblWmworkDoneDetail> TmtblWmworkDoneDetails { get; set; }

    public virtual DbSet<TmtblWmworkTypeMaster> TmtblWmworkTypeMasters { get; set; }

    public virtual DbSet<TmtblWmworkUploadFile> TmtblWmworkUploadFiles { get; set; }

    public virtual DbSet<TmtblWorkSwitchOver> TmtblWorkSwitchOvers { get; set; }

    public virtual DbSet<Tmtblstopcont> Tmtblstopconts { get; set; }

    public virtual DbSet<TrainingMst> TrainingMsts { get; set; }

    public virtual DbSet<TransactionHistoryArchive4> TransactionHistoryArchive4s { get; set; }

    public virtual DbSet<TransactionTable> TransactionTables { get; set; }

    public virtual DbSet<Tree> Trees { get; set; }

    public virtual DbSet<Trimtrailer> Trimtrailers { get; set; }

    public virtual DbSet<Tt1> Tt1s { get; set; }

    public virtual DbSet<TttHistory> TttHistories { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserError> UserErrors { get; set; }

    public virtual DbSet<VenkatTable> VenkatTables { get; set; }

    public virtual DbSet<ViewDemo> ViewDemos { get; set; }

    public virtual DbSet<VinDeadlock> VinDeadlocks { get; set; }

    public virtual DbSet<VwEmpMast> VwEmpMasts { get; set; }

    public virtual DbSet<VwMasterItem> VwMasterItems { get; set; }

    public virtual DbSet<Xmlorg> Xmlorgs { get; set; }

    public virtual DbSet<_0IsActive> _0IsActives { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Server=malay;Database=training;uid=training;pwd=training123;Pooling=false;TrustServerCertificate=True;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AMgmtAbc>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("aMgmt.abc");

            entity.Property(e => e.A)
                .HasMaxLength(50)
                .HasColumnName("a");
            entity.Property(e => e.A1).HasColumnName("a1");
            entity.Property(e => e.B).HasColumnName("b");
        });

        modelBuilder.Entity<Abc2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("abc2");

            entity.Property(e => e.A)
                .HasMaxLength(50)
                .HasColumnName("a");
            entity.Property(e => e.A1).HasColumnName("a1");
            entity.Property(e => e.B).HasColumnName("b");
            entity.Property(e => e.Cc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cc");
            entity.Property(e => e.GalCredentials)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Gatials)
                .HasDefaultValueSql("('')")
                .HasColumnType("text");
            entity.Property(e => e.Intapicountrywise)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("INTAPICountrywise");
            entity.Property(e => e.Iwise)
                .HasDefaultValueSql("('')")
                .HasColumnType("text");
            entity.Property(e => e.Sss1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("sss1");
            entity.Property(e => e.Tname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TName");
            entity.Property(e => e.Tt).HasColumnName("tt");
        });

        modelBuilder.Entity<AddDepartment>(entity =>
        {
            entity.HasKey(e => e.DeptId);

            entity.ToTable("add_department");

            entity.Property(e => e.DeptId)
                .ValueGeneratedNever()
                .HasColumnName("DeptID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DeptName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<AirApilogTest>(entity =>
        {
            entity.HasKey(e => e.AirApilogId).HasName("PK__AirAPILo__994CC965C6A24018");

            entity.ToTable("AirAPILogTest");

            entity.Property(e => e.AirApilogId).HasColumnName("AirAPILogID");
            entity.Property(e => e.LastUpdateOn)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.LogName)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.RequestLog).IsUnicode(false);
            entity.Property(e => e.RequestTimestamp)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ResponseLog).IsUnicode(false);
            entity.Property(e => e.ResponseTimestamp)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AirlineMaster>(entity =>
        {
            entity.HasKey(e => e.Airlineid).HasName("PK__AirlineM__DC468E3B929F8CEF");

            entity.ToTable("AirlineMaster");

            entity.Property(e => e.Airlineid).ValueGeneratedNever();
            entity.Property(e => e.AirlineCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AirlineName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AirlineTypeMaster>(entity =>
        {
            entity.HasKey(e => e.AirlineTypeId).HasName("PK__AirlineT__C7B7FA11255F6664");

            entity.ToTable("AirlineTypeMaster");

            entity.Property(e => e.AirlineTypeId)
                .ValueGeneratedNever()
                .HasColumnName("AirlineTypeID");
            entity.Property(e => e.AirlineTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<AnnualLeaveInfoMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("AnnualLeaveInfo_Master");

            entity.Property(e => e.AlimId)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ALIM_ID");
            entity.Property(e => e.AlimTotallEave)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ALIM_TOTALlEAVE");
        });

        modelBuilder.Entity<AsdfBackUo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("asdfBackUo");

            entity.Property(e => e.Aaaaa).HasColumnName("aaaaa");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<AspnetApplication>(entity =>
        {
            entity.HasKey(e => e.ApplicationId)
                .HasName("PK__aspnet_Applicati__07020F21")
                .IsClustered(false);

            entity.ToTable("aspnet_Applications");

            entity.HasIndex(e => e.LoweredApplicationName, "UQ__aspnet_Applicati__07F6335A").IsUnique();

            entity.HasIndex(e => e.ApplicationName, "UQ__aspnet_Applicati__08EA5793").IsUnique();

            entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ApplicationName).HasMaxLength(256);
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredApplicationName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspnetMembership>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_Membershi__1BFD2C07")
                .IsClustered(false);

            entity.ToTable("aspnet_Membership");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Comment).HasColumnType("ntext");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredEmail).HasMaxLength(256);
            entity.Property(e => e.MobilePin)
                .HasMaxLength(16)
                .HasColumnName("MobilePIN");
            entity.Property(e => e.Password).HasMaxLength(128);
            entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
            entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
            entity.Property(e => e.PasswordSalt).HasMaxLength(128);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetMemberships)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__Appli__1CF15040");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetMembership)
                .HasForeignKey<AspnetMembership>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__UserI__1DE57479");
        });

        modelBuilder.Entity<AspnetPath>(entity =>
        {
            entity.HasKey(e => e.PathId)
                .HasName("PK__aspnet_Paths__4D94879B")
                .IsClustered(false);

            entity.ToTable("aspnet_Paths");

            entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LoweredPath).HasMaxLength(256);
            entity.Property(e => e.Path).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetPaths)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pa__Appli__4E88ABD4");
        });

        modelBuilder.Entity<AspnetPersonalizationAllUser>(entity =>
        {
            entity.HasKey(e => e.PathId).HasName("PK__aspnet_Personali__534D60F1");

            entity.ToTable("aspnet_PersonalizationAllUsers");

            entity.Property(e => e.PathId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings).HasColumnType("image");

            entity.HasOne(d => d.Path).WithOne(p => p.AspnetPersonalizationAllUser)
                .HasForeignKey<AspnetPersonalizationAllUser>(d => d.PathId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pe__PathI__5441852A");
        });

        modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK__aspnet_Personali__5629CD9C")
                .IsClustered(false);

            entity.ToTable("aspnet_PersonalizationPerUser");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings).HasColumnType("image");

            entity.HasOne(d => d.Path).WithMany(p => p.AspnetPersonalizationPerUsers)
                .HasForeignKey(d => d.PathId)
                .HasConstraintName("FK__aspnet_Pe__PathI__5812160E");

            entity.HasOne(d => d.User).WithMany(p => p.AspnetPersonalizationPerUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__aspnet_Pe__UserI__59063A47");
        });

        modelBuilder.Entity<AspnetProfile>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__aspnet_Profile__30F848ED");

            entity.ToTable("aspnet_Profile");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyNames).HasColumnType("ntext");
            entity.Property(e => e.PropertyValuesBinary).HasColumnType("image");
            entity.Property(e => e.PropertyValuesString).HasColumnType("ntext");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetProfile)
                .HasForeignKey<AspnetProfile>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pr__UserI__31EC6D26");
        });

        modelBuilder.Entity<AspnetRole>(entity =>
        {
            entity.HasKey(e => e.RoleId)
                .HasName("PK__aspnet_Roles__3A81B327")
                .IsClustered(false);

            entity.ToTable("aspnet_Roles");

            entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredRoleName).HasMaxLength(256);
            entity.Property(e => e.RoleName).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetRoles)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Ro__Appli__3B75D760");
        });

        modelBuilder.Entity<AspnetSchemaVersion>(entity =>
        {
            entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion }).HasName("PK__aspnet_SchemaVer__117F9D94");

            entity.ToTable("aspnet_SchemaVersions");

            entity.Property(e => e.Feature).HasMaxLength(128);
            entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
        });

        modelBuilder.Entity<AspnetUser>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_Users__0BC6C43E")
                .IsClustered(false);

            entity.ToTable("aspnet_Users");

            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredUserName).HasMaxLength(256);
            entity.Property(e => e.MobileAlias).HasMaxLength(16);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetUsers)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Us__Appli__0CBAE877");

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspnetUsersInRole",
                    r => r.HasOne<AspnetRole>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__RoleI__403A8C7D"),
                    l => l.HasOne<AspnetUser>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__UserI__3F466844"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK__aspnet_UsersInRo__3E52440B");
                        j.ToTable("aspnet_UsersInRoles");
                    });
        });

        modelBuilder.Entity<AspnetWebEventEvent>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__aspnet_WebEvent___68487DD7");

            entity.ToTable("aspnet_WebEvent_Events");

            entity.Property(e => e.EventId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApplicationPath).HasMaxLength(256);
            entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);
            entity.Property(e => e.Details).HasColumnType("ntext");
            entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.EventType).HasMaxLength(256);
            entity.Property(e => e.ExceptionType).HasMaxLength(256);
            entity.Property(e => e.MachineName).HasMaxLength(256);
            entity.Property(e => e.Message).HasMaxLength(1024);
            entity.Property(e => e.RequestUrl).HasMaxLength(1024);
        });

        modelBuilder.Entity<BankXml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__BankXml__3214EC277C5041DB");

            entity.ToTable("BankXml");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Bxml)
                .HasColumnType("xml")
                .HasColumnName("BXml");
        });

        modelBuilder.Entity<BookDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Author)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookId).ValueGeneratedOnAdd();
            entity.Property(e => e.BookName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Publisher)
                .HasMaxLength(200)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CharVsVarChar>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CharVsVarChar");

            entity.Property(e => e.Charname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("CHARName");
            entity.Property(e => e.Varname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("VARName");
        });

        modelBuilder.Entity<Chintan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__chintan__3213E83F7682B940");

            entity.ToTable("chintan");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CityExport>(entity =>
        {
            entity.HasKey(e => new { e.ExportId, e.ExportTime });

            entity.Property(e => e.ExportId)
                .ValueGeneratedOnAdd()
                .HasColumnName("ExportID");
            entity.Property(e => e.ExportTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.ContactId).HasName("PK__Contact__5C6625BB214CBC60");

            entity.ToTable("Contact");

            entity.Property(e => e.ContactId)
                .ValueGeneratedNever()
                .HasColumnName("ContactID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<CreateTaBle>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__createTa__AF2DBB998CBEBE5B");

            entity.ToTable("createTaBLE");

            entity.Property(e => e.EmpId).ValueGeneratedNever();
            entity.Property(e => e.CommandId).HasColumnName("commandId");
            entity.Property(e => e.CreateBy).HasColumnName("createBy");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("createIP");
            entity.Property(e => e.DepId).HasColumnName("depId");
            entity.Property(e => e.EmpCode).HasColumnName("empCode");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("employeeName");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.UpdateBy).HasColumnName("updateBy");
            entity.Property(e => e.UpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("updateDate");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("updateIP");
        });

        modelBuilder.Entity<CurrentWorkItemView>(entity =>
        {
            entity.ToTable("CurrentWorkItemView");

            entity.Property(e => e.Id)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AssignedTo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Assigned To");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Reason)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('New')");
            entity.Property(e => e.State)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('New')");
            entity.Property(e => e.StoryPoints).HasColumnName("Story Points");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkItemType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("WorkItem Type");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("customer");

            entity.Property(e => e.CusMobile)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CusName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<Customerxml>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Customerxml");

            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactTitle)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Region)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DailyIncome>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DailyIncome");

            entity.Property(e => e.IncomeDay).HasMaxLength(10);
            entity.Property(e => e.VendorId)
                .HasMaxLength(10)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<DboTemptable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("dbo.temptable", "db_owner");

            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("title");
        });

        modelBuilder.Entity<Ddlaudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DDLAudit");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.Event)
                .HasMaxLength(100)
                .HasColumnName("EVENT");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("IPAddress");
            entity.Property(e => e.Login)
                .HasMaxLength(256)
                .IsUnicode(false)
                .HasColumnName("LOGIN");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(256)
                .IsUnicode(false);
            entity.Property(e => e.PostTime).HasColumnType("datetime");
            entity.Property(e => e.Tsql)
                .HasMaxLength(4000)
                .HasColumnName("TSQL");
        });

        modelBuilder.Entity<Demo3>(entity =>
        {
            entity.HasKey(e => e.DepartId);

            entity.ToTable("demo_3");

            entity.Property(e => e.DepartId).HasColumnName("depart_id");
            entity.Property(e => e.DepartName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("depart_name");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("description");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__departme__3214EC07B4E770C4");

            entity.ToTable("department");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Departmentname)
                .HasMaxLength(50)
                .HasColumnName("departmentname");
        });

        modelBuilder.Entity<Digit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DIGITS");

            entity.Property(e => e.EmpNo).HasColumnName("EMP_NO");
        });

        modelBuilder.Entity<DscCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("DSC_Category");

            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.Description)
                .HasMaxLength(500)
                .HasColumnName("description");
            entity.Property(e => e.ImageId).HasColumnName("imageId");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.ParentId).HasColumnName("parentId");
            entity.Property(e => e.ShowLevels)
                .HasDefaultValueSql("((2))")
                .HasColumnName("showLevels");
            entity.Property(e => e.ShowUsefulLinks)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("showUsefulLinks");
            entity.Property(e => e.SortOrder)
                .HasDefaultValueSql("((200))")
                .HasColumnName("sortOrder");

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .HasConstraintName("FK_DSC_Category_DSC_Category");
        });

        modelBuilder.Entity<DscCategoryManufacturerCount>(entity =>
        {
            entity.HasKey(e => new { e.CategoryId, e.ManufacturerId });

            entity.ToTable("DSC_Category_Manufacturer_Count");

            entity.Property(e => e.CategoryId).HasColumnName("categoryId");
            entity.Property(e => e.ManufacturerId).HasColumnName("manufacturerId");
            entity.Property(e => e.Count).HasColumnName("count");

            entity.HasOne(d => d.Category).WithMany(p => p.DscCategoryManufacturerCounts)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSC_Category_Manufacturer_Count_DSC_Category");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.DscCategoryManufacturerCounts)
                .HasForeignKey(d => d.ManufacturerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DSC_Category_Manufacturer_Count_DSC_Manufacturer");
        });

        modelBuilder.Entity<DscImage>(entity =>
        {
            entity.HasKey(e => e.ImageId);

            entity.ToTable("DSC_Image");

            entity.Property(e => e.ImageId).HasColumnName("imageId");
            entity.Property(e => e.Bits)
                .HasColumnType("image")
                .HasColumnName("bits");
            entity.Property(e => e.Mime)
                .HasMaxLength(60)
                .HasColumnName("mime");
            entity.Property(e => e.TimeUpdated)
                .HasColumnType("datetime")
                .HasColumnName("timeUpdated");
        });

        modelBuilder.Entity<DscManufacturer>(entity =>
        {
            entity.HasKey(e => e.ManufacturerId).HasName("PK_DSC_Manufacture");

            entity.ToTable("DSC_Manufacturer");

            entity.Property(e => e.ManufacturerId).HasColumnName("manufacturerId");
            entity.Property(e => e.ImageId).HasColumnName("imageId");
            entity.Property(e => e.Name)
                .HasMaxLength(150)
                .HasColumnName("name");
            entity.Property(e => e.Url)
                .HasMaxLength(256)
                .HasColumnName("url");

            entity.HasOne(d => d.Image).WithMany(p => p.DscManufacturers)
                .HasForeignKey(d => d.ImageId)
                .HasConstraintName("FK_DSC_Manufacturer_DSC_Image");
        });

        modelBuilder.Entity<E>(entity =>
        {
            entity.HasKey(e => e.Eid).HasName("PK__E__C190170B4F2A9D70");

            entity.ToTable("E");

            entity.Property(e => e.Eid)
                .ValueGeneratedNever()
                .HasColumnName("EID");
            entity.Property(e => e.Ecity)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ECITY");
            entity.Property(e => e.Edesignation)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("EDESIGNATION");
            entity.Property(e => e.Ename)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("ENAME");
            entity.Property(e => e.Esalary)
                .HasColumnType("money")
                .HasColumnName("ESALARY");
        });

        modelBuilder.Entity<EmaiL>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EMAiL");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<Emp>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK_Employee_EmployeeID");

            entity.ToTable("Emp");

            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsFixedLength()
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.HireDate).HasColumnType("datetime");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsFixedLength()
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.Ssnnumber)
                .HasMaxLength(15)
                .UseCollation("Latin1_General_CS_AS")
                .HasColumnName("SSNNumber");
            entity.Property(e => e.UserId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<Emp2>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK_Employee_EmployeeID1");

            entity.ToTable("Emp2");

            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsFixedLength()
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(1)
                .IsFixedLength()
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.Password)
                .HasMaxLength(256)
                .UseCollation("Latin1_General_CS_AS");
            entity.Property(e => e.UserId)
                .HasMaxLength(256)
                .UseCollation("Latin1_General_CS_AS")
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<EmpHi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmpHi");

            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.Ename)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EName");
            entity.Property(e => e.Title)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmpLeaveApproveDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmpLeaveApprove_Det");

            entity.Property(e => e.EladApproveid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELAD_APPROVEID");
            entity.Property(e => e.EladLeaveid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELAD_LEAVEID");
        });

        modelBuilder.Entity<EmpLeaveTakenDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmpLeaveTaken_Det");

            entity.Property(e => e.EltkEmpid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELTK_EMPID");
            entity.Property(e => e.EltkLeaveid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELTK_LEAVEID");
        });

        modelBuilder.Entity<EmpLeaveTypeDet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmpLeaveType_Det");

            entity.Property(e => e.EltdLeaveid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELTD_LEAVEID");
            entity.Property(e => e.EltdLeavetypeid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("ELTD_LEAVETYPEID");
        });

        modelBuilder.Entity<EmpLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("empLog");

            entity.Property(e => e.EmpId).HasColumnName("empId");
            entity.Property(e => e.LogId).ValueGeneratedOnAdd();
            entity.Property(e => e.Operation)
                .HasMaxLength(10)
                .HasColumnName("operation");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<EmpLog2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EmpLog2");

            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.LogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("LogID");
            entity.Property(e => e.Operation).HasMaxLength(10);
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Empdepart>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__empdepar__3214EC0797F8430C");

            entity.ToTable("empdepart");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Departid).HasColumnName("departid");
            entity.Property(e => e.Employeename)
                .HasMaxLength(50)
                .HasColumnName("employeename");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee");

            entity.Property(e => e.EmpId)
                .ValueGeneratedOnAdd()
                .HasColumnName("EmpID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Employee1>(entity =>
        {
            entity.HasKey(e => e.EmpNum).HasName("PK__Employee__08AFEA393E52440B");

            entity.ToTable("Employees");

            entity.Property(e => e.EmpNum)
                .ValueGeneratedNever()
                .HasColumnName("emp_num");
            entity.Property(e => e.FirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("last_name");
        });

        modelBuilder.Entity<EmployeeCur>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__Employee__AF2DBA79336B6C9B");

            entity.ToTable("EmployeeCur");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.Address)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<EmployeeDemoAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Demo_Audit");

            entity.Property(e => e.AuditAction)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Audit_Action");
            entity.Property(e => e.AuditTimestamp)
                .HasColumnType("datetime")
                .HasColumnName("Audit_Timestamp");
            entity.Property(e => e.EmpId).HasColumnName("Emp_ID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("Emp_Name");
            entity.Property(e => e.EmpSal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Emp_Sal");
        });

        modelBuilder.Entity<EmployeeDetail>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__employee__1299A861E3BC7E3F");

            entity.ToTable("employee_details");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("emp_id");
            entity.Property(e => e.Designation)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("designation");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
        });

        modelBuilder.Entity<EmployeeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Employee_Master");

            entity.Property(e => e.EmpAddr)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("Emp_Addr");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Emp_code");
            entity.Property(e => e.EmpCreatedDate)
                .HasColumnType("datetime")
                .HasColumnName("Emp_CreatedDate");
            entity.Property(e => e.EmpCreatedId)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Emp_CreatedId");
            entity.Property(e => e.EmpDeptid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Emp_Deptid");
            entity.Property(e => e.EmpId)
                .ValueGeneratedOnAdd()
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Emp_id");
            entity.Property(e => e.EmpMail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("Emp_Mail");
            entity.Property(e => e.EmpModifiedDate)
                .HasColumnType("datetime")
                .HasColumnName("Emp_ModifiedDate");
            entity.Property(e => e.EmpModifiedId)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("Emp_ModifiedId");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Emp_name");
            entity.Property(e => e.EmpPassword)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Emp_Password");
            entity.Property(e => e.EmpPhone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Emp_Phone");
            entity.Property(e => e.EmpType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("Emp_Type");
            entity.Property(e => e.EmpUsername)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Emp_Username");
        });

        modelBuilder.Entity<EmployeeTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Employee__3214EC07D7893ECE");

            entity.ToTable("Employee_Test");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<EmployeeTree>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PK__Employee__7AD04FF12922E852");

            entity.ToTable("EmployeeTree");

            entity.Property(e => e.EmployeeId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EmployeeID");
            entity.Property(e => e.BossId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("BossID");
            entity.Property(e => e.EmployeeName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Error>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ErrorDescr)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Example>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Example");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<FactProductPurchaseHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("FactProductPurchaseHistory");

            entity.Property(e => e.LastPurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<Ffff>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ffff");

            entity.Property(e => e.A)
                .HasMaxLength(50)
                .HasColumnName("a");
            entity.Property(e => e.A1).HasColumnName("a1");
            entity.Property(e => e.B).HasColumnName("b");
        });

        modelBuilder.Entity<Ganpat>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ganpat");

            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Harsh>(entity =>
        {
            entity.HasKey(e => e.Empid).HasName("PK__HARSH__AF2EBFA17801075B");

            entity.ToTable("HARSH", tb =>
                {
                    tb.HasTrigger("trgEmpInsert");
                    tb.HasTrigger("trgEmpUpdate");
                });

            entity.Property(e => e.Empid).ValueGeneratedNever();
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("empName");
            entity.Property(e => e.EmpPosition)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("empPosition");
            entity.Property(e => e.Emplocation)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<HistoryTable>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__historyT__4D7B4ADD5C7280F8");

            entity.ToTable("historyTable");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryBy).HasColumnName("HistoryBY");
            entity.Property(e => e.HistoryDate)
                .HasColumnType("datetime")
                .HasColumnName("HistoryDATE");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HIstoryIP");
        });

        modelBuilder.Entity<J1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J1");

            entity.Property(e => e.Empno).HasColumnName("EMPNO");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENAME");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<J2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J2");

            entity.Property(e => e.Empno).HasColumnName("EMPNO");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENAME");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<J2back>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("J2Back");

            entity.Property(e => e.Empno).HasColumnName("EMPNO");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENAME");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<Jayesh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Jayesh");

            entity.Property(e => e.A).HasColumnName("a");
        });

        modelBuilder.Entity<JobGrade>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("JOB_GRADE");

            entity.Property(e => e.Grade)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("GRADE");
            entity.Property(e => e.Maxsal)
                .HasColumnType("money")
                .HasColumnName("MAXSAL");
            entity.Property(e => e.Minsal)
                .HasColumnType("money")
                .HasColumnName("MINSAL");
        });

        modelBuilder.Entity<KeyoorViewTest>(entity =>
        {
            entity.HasKey(e => e.SrNo).HasName("PK__keyoorVi__C3A4D3AC4AB81AF0");

            entity.ToTable("keyoorViewTest");

            entity.Property(e => e.SrNo).ValueGeneratedNever();
            entity.Property(e => e.DtDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtDateTime");
        });

        modelBuilder.Entity<Lastnumber>(entity =>
        {
            entity.HasKey(e => e.LastNumb).HasName("PK__lastnumb__72CB17824E88ABD4");

            entity.ToTable("lastnumber");

            entity.Property(e => e.LastNumb)
                .ValueGeneratedNever()
                .HasColumnName("last_numb");
        });

        modelBuilder.Entity<LeaveApprovalMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeaveApproval_Master");

            entity.Property(e => e.LamsApprovename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("LAMS_APPROVENAME");
            entity.Property(e => e.LamsEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("LAMS_EMAIL");
            entity.Property(e => e.LamsId)
                .ValueGeneratedOnAdd()
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LAMS_ID");
        });

        modelBuilder.Entity<LeaveMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Leave_Master");

            entity.Property(e => e.LmApprovebyid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_APPROVEBYID");
            entity.Property(e => e.LmCreateddate)
                .HasColumnType("datetime")
                .HasColumnName("LM_CREATEDDATE");
            entity.Property(e => e.LmCreatedid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_CREATEDID");
            entity.Property(e => e.LmDateapplied)
                .HasColumnType("datetime")
                .HasColumnName("LM_DATEAPPLIED");
            entity.Property(e => e.LmEmpid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_EMPID");
            entity.Property(e => e.LmId)
                .ValueGeneratedOnAdd()
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_ID");
            entity.Property(e => e.LmLeavefrom)
                .HasColumnType("smalldatetime")
                .HasColumnName("LM_LEAVEFROM");
            entity.Property(e => e.LmLeaveto)
                .HasColumnType("smalldatetime")
                .HasColumnName("LM_LEAVETO");
            entity.Property(e => e.LmLeavetypeid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_LEAVETYPEID");
            entity.Property(e => e.LmModifieddate)
                .HasColumnType("datetime")
                .HasColumnName("LM_MODIFIEDDATE");
            entity.Property(e => e.LmModifiedid)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LM_MODIFIEDID");
            entity.Property(e => e.LmReason)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("LM_REASON");
            entity.Property(e => e.LmStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("LM_STATUS");
        });

        modelBuilder.Entity<LeaveTypeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LeaveType_Master");

            entity.Property(e => e.LvtmId)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("LVTM_ID");
            entity.Property(e => e.LvtmTypename)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LVTM_TYPENAME");
        });

        modelBuilder.Entity<LogTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("LogTable");

            entity.Property(e => e.Level)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Logger)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Message)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Thread)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Time).HasColumnType("datetime");
        });

        modelBuilder.Entity<Malay>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MALAY");

            entity.Property(e => e.EmpNo).HasColumnName("EMP_NO");
        });

        modelBuilder.Entity<Mobile>(entity =>
        {
            entity.HasKey(e => e.Model);

            entity.ToTable("Mobile");

            entity.Property(e => e.Model).ValueGeneratedNever();
            entity.Property(e => e.CreateDateTime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<Movie>(entity =>
        {
            entity.ToTable("Movies", "db_owner");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Genre).HasMaxLength(50);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.ReleaseDate).HasColumnType("date");
            entity.Property(e => e.Title).HasMaxLength(50);
        });

        modelBuilder.Entity<Mvc>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Mvc__3214EC0731B9C501");

            entity.ToTable("Mvc");

            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyName>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyName");

            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MyServiceLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyServiceLog");

            entity.Property(e => e.DtCreated)
                .HasColumnType("datetime")
                .HasColumnName("dt_Created");
            entity.Property(e => e.InLogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("in_LogId");
            entity.Property(e => e.VcStatus)
                .HasMaxLength(40)
                .HasColumnName("vc_Status");
        });

        modelBuilder.Entity<MyTable12Nov>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("MyTable12Nov");

            entity.Property(e => e.Column1).HasColumnName("column_1");
            entity.Property(e => e.Column2).HasColumnName("column_2");
        });

        modelBuilder.Entity<New>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NEW");

            entity.Property(e => e.Image1).HasColumnType("image");
            entity.Property(e => e.MaxCol).IsUnicode(false);
        });

        modelBuilder.Entity<New1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("New1");

            entity.Property(e => e.Sss)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("sss");
        });

        modelBuilder.Entity<NewCon>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("NewCon");

            entity.Property(e => e.Sss).HasColumnName("sss");
        });

        modelBuilder.Entity<NewTest>(entity =>
        {
            entity.HasKey(e => e.DId).HasName("PK__newTest__76B8FF7D5DCAEF64");

            entity.ToTable("newTest");

            entity.Property(e => e.DId)
                .ValueGeneratedNever()
                .HasColumnName("D_ID");
            entity.Property(e => e.DcrckitSrNo)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("DCRCKitSrNo");
            entity.Property(e => e.FName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("F_Name");
            entity.Property(e => e.FullName)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("Full_Name");
            entity.Property(e => e.LName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("L_Name");
            entity.Property(e => e.MName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("M_Name");
        });

        modelBuilder.Entity<Newdeptmast>(entity =>
        {
            entity.HasKey(e => e.DeptId).HasName("PK__newdeptm__014881AE6EF531F0");

            entity.ToTable("newdeptmast");

            entity.Property(e => e.DeptId).ValueGeneratedNever();
            entity.Property(e => e.DeptName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Newemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("newemps");

            entity.Property(e => e.Deptid).HasColumnName("deptid");
            entity.Property(e => e.Empid).HasColumnName("empid");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ename");
            entity.Property(e => e.Managerid).HasColumnName("managerid");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("phoneno");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
        });

        modelBuilder.Entity<Newempmast>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__newempma__AF2DBB999F9C7302");

            entity.ToTable("newempmast");

            entity.Property(e => e.EmpId).ValueGeneratedNever();
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpSalary).HasColumnType("money");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Newempmaster>(entity =>
        {
            entity.HasKey(e => e.Empid).HasName("PK__newempma__AF2EBFA1B966BB43");

            entity.ToTable("newempmaster");

            entity.Property(e => e.Empid).ValueGeneratedNever();
            entity.Property(e => e.Anagerid).HasColumnName("<anagerid");
            entity.Property(e => e.Empname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Empsalary).HasColumnType("money");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("phoneno");
        });

        modelBuilder.Entity<NopAcl>(entity =>
        {
            entity.HasKey(e => e.Aclid).HasName("Nop_ACL_PK");

            entity.ToTable("Nop_ACL");

            entity.HasIndex(e => new { e.CustomerActionId, e.CustomerRoleId }, "IX_Nop_ACL_Unique").IsUnique();

            entity.Property(e => e.Aclid).HasColumnName("ACLID");
            entity.Property(e => e.CustomerActionId).HasColumnName("CustomerActionID");
            entity.Property(e => e.CustomerRoleId).HasColumnName("CustomerRoleID");

            entity.HasOne(d => d.CustomerAction).WithMany(p => p.NopAcls)
                .HasForeignKey(d => d.CustomerActionId)
                .HasConstraintName("FK_Nop_ACL_Nop_CustomerAction");

            entity.HasOne(d => d.CustomerRole).WithMany(p => p.NopAcls)
                .HasForeignKey(d => d.CustomerRoleId)
                .HasConstraintName("FK_Nop_ACL_Nop_CustomerRole");
        });

        modelBuilder.Entity<NopAclperObject>(entity =>
        {
            entity.HasKey(e => e.AclperObjectId).HasName("PK_ACLPerObject");

            entity.ToTable("Nop_ACLPerObject");

            entity.Property(e => e.AclperObjectId).HasColumnName("ACLPerObjectId");

            entity.HasOne(d => d.CustomerRole).WithMany(p => p.NopAclperObjects)
                .HasForeignKey(d => d.CustomerRoleId)
                .HasConstraintName("FK_Nop_ACLPerObject_Nop_CustomerRole");
        });

        modelBuilder.Entity<NopActivityLog>(entity =>
        {
            entity.HasKey(e => e.ActivityLogId);

            entity.ToTable("Nop_ActivityLog");

            entity.Property(e => e.ActivityLogId).HasColumnName("ActivityLogID");
            entity.Property(e => e.ActivityLogTypeId).HasColumnName("ActivityLogTypeID");
            entity.Property(e => e.Comment).HasMaxLength(4000);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");

            entity.HasOne(d => d.ActivityLogType).WithMany(p => p.NopActivityLogs)
                .HasForeignKey(d => d.ActivityLogTypeId)
                .HasConstraintName("FK_Nop_ActivityLog_Nop_ActivityLogType");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopActivityLogs)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_ActivityLog_Nop_Customer");
        });

        modelBuilder.Entity<NopActivityLogType>(entity =>
        {
            entity.HasKey(e => e.ActivityLogTypeId);

            entity.ToTable("Nop_ActivityLogType");

            entity.Property(e => e.ActivityLogTypeId).HasColumnName("ActivityLogTypeID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SystemKeyword).HasMaxLength(50);
        });

        modelBuilder.Entity<NopAddress>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("Nop_Address_PK");

            entity.ToTable("Nop_Address");

            entity.Property(e => e.Address1).HasMaxLength(100);
            entity.Property(e => e.Address2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Company).HasMaxLength(100);
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            entity.Property(e => e.StateProvinceId).HasColumnName("StateProvinceID");
            entity.Property(e => e.UpdatedOn)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.ZipPostalCode).HasMaxLength(30);

            entity.HasOne(d => d.Customer).WithMany(p => p.NopAddresses)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_Address_Nop_Customer1");
        });

        modelBuilder.Entity<NopAffiliate>(entity =>
        {
            entity.HasKey(e => e.AffiliateId);

            entity.ToTable("Nop_Affiliate");

            entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");
            entity.Property(e => e.Address1).HasMaxLength(100);
            entity.Property(e => e.Address2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Company).HasMaxLength(100);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.FirstName).HasMaxLength(100);
            entity.Property(e => e.LastName).HasMaxLength(100);
            entity.Property(e => e.MiddleName).HasMaxLength(100);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            entity.Property(e => e.StateProvince).HasMaxLength(100);
            entity.Property(e => e.ZipPostalCode).HasMaxLength(30);
        });

        modelBuilder.Entity<NopBannedIpAddress>(entity =>
        {
            entity.HasKey(e => e.BannedIpAddressId);

            entity.ToTable("Nop_BannedIpAddress");

            entity.Property(e => e.BannedIpAddressId).HasColumnName("BannedIpAddressID");
            entity.Property(e => e.Address).HasMaxLength(50);
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopBannedIpNetwork>(entity =>
        {
            entity.HasKey(e => e.BannedIpNetworkId).HasName("PK_Nop_BannedNetworkIP");

            entity.ToTable("Nop_BannedIpNetwork");

            entity.Property(e => e.BannedIpNetworkId).HasColumnName("BannedIpNetworkID");
            entity.Property(e => e.Comment).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.EndAddress).HasMaxLength(50);
            entity.Property(e => e.StartAddress).HasMaxLength(50);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopBlogComment>(entity =>
        {
            entity.HasKey(e => e.BlogCommentId);

            entity.ToTable("Nop_BlogComment");

            entity.Property(e => e.BlogCommentId).HasColumnName("BlogCommentID");
            entity.Property(e => e.BlogPostId).HasColumnName("BlogPostID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("IPAddress");

            entity.HasOne(d => d.BlogPost).WithMany(p => p.NopBlogComments)
                .HasForeignKey(d => d.BlogPostId)
                .HasConstraintName("FK_Nop_BlogComment_Nop_BlogPost");
        });

        modelBuilder.Entity<NopBlogPost>(entity =>
        {
            entity.HasKey(e => e.BlogPostId);

            entity.ToTable("Nop_BlogPost");

            entity.Property(e => e.BlogPostId).HasColumnName("BlogPostID");
            entity.Property(e => e.BlogPostTitle).HasMaxLength(200);
            entity.Property(e => e.CreatedById).HasColumnName("CreatedByID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Tags)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");

            entity.HasOne(d => d.CreatedBy).WithMany(p => p.NopBlogPosts)
                .HasForeignKey(d => d.CreatedById)
                .HasConstraintName("FK_Nop_BlogPost_Nop_Customer");

            entity.HasOne(d => d.Language).WithMany(p => p.NopBlogPosts)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_BlogPost_Nop_Language");
        });

        modelBuilder.Entity<NopCampaign>(entity =>
        {
            entity.HasKey(e => e.CampaignId);

            entity.ToTable("Nop_Campaign");

            entity.Property(e => e.CampaignId).HasColumnName("CampaignID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Subject).HasMaxLength(200);
        });

        modelBuilder.Entity<NopCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId);

            entity.ToTable("Nop_Category");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.PageSize).HasDefaultValueSql("((10))");
            entity.Property(e => e.ParentCategoryId).HasColumnName("ParentCategoryID");
            entity.Property(e => e.PictureId).HasColumnName("PictureID");
            entity.Property(e => e.PriceRanges)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Template).WithMany(p => p.NopCategories)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nop_Category_Nop_CategoryTemplate");

            entity.HasMany(d => d.Discounts).WithMany(p => p.Categories)
                .UsingEntity<Dictionary<string, object>>(
                    "NopCategoryDiscountMapping",
                    r => r.HasOne<NopDiscount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Nop_Category_Discount_Mapping_Nop_Discount"),
                    l => l.HasOne<NopCategory>().WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Nop_Category_Discount_Mapping_Nop_Category"),
                    j =>
                    {
                        j.HasKey("CategoryId", "DiscountId");
                        j.ToTable("Nop_Category_Discount_Mapping");
                        j.IndexerProperty<int>("CategoryId").HasColumnName("CategoryID");
                        j.IndexerProperty<int>("DiscountId").HasColumnName("DiscountID");
                    });
        });

        modelBuilder.Entity<NopCategoryLocalized>(entity =>
        {
            entity.HasKey(e => e.CategoryLocalizedId);

            entity.ToTable("Nop_CategoryLocalized");

            entity.HasIndex(e => new { e.CategoryId, e.LanguageId }, "IX_Nop_CategoryLocalized_Unique1").IsUnique();

            entity.Property(e => e.CategoryLocalizedId).HasColumnName("CategoryLocalizedID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");

            entity.HasOne(d => d.Category).WithMany(p => p.NopCategoryLocalizeds)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Nop_CategoryLocalized_Nop_Category");

            entity.HasOne(d => d.Language).WithMany(p => p.NopCategoryLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_CategoryLocalized_Nop_Language");
        });

        modelBuilder.Entity<NopCategoryTemplate>(entity =>
        {
            entity.HasKey(e => e.CategoryTemplateId).HasName("Nop_CategoryTemplate_PK");

            entity.ToTable("Nop_CategoryTemplate");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.TemplatePath).HasMaxLength(200);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopCheckoutAttribute>(entity =>
        {
            entity.HasKey(e => e.CheckoutAttributeId);

            entity.ToTable("Nop_CheckoutAttribute");

            entity.Property(e => e.CheckoutAttributeId).HasColumnName("CheckoutAttributeID");
            entity.Property(e => e.AttributeControlTypeId).HasColumnName("AttributeControlTypeID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.TaxCategoryId).HasColumnName("TaxCategoryID");
            entity.Property(e => e.TextPrompt).HasMaxLength(300);
        });

        modelBuilder.Entity<NopCheckoutAttributeLocalized>(entity =>
        {
            entity.HasKey(e => e.CheckoutAttributeLocalizedId);

            entity.ToTable("Nop_CheckoutAttributeLocalized");

            entity.HasIndex(e => new { e.CheckoutAttributeId, e.LanguageId }, "IX_Nop_CheckoutAttributeLocalized_Unique1").IsUnique();

            entity.Property(e => e.CheckoutAttributeLocalizedId).HasColumnName("CheckoutAttributeLocalizedID");
            entity.Property(e => e.CheckoutAttributeId).HasColumnName("CheckoutAttributeID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.TextPrompt).HasMaxLength(300);

            entity.HasOne(d => d.CheckoutAttribute).WithMany(p => p.NopCheckoutAttributeLocalizeds)
                .HasForeignKey(d => d.CheckoutAttributeId)
                .HasConstraintName("FK_Nop_CheckoutAttributeLocalized_Nop_CheckoutAttribute");

            entity.HasOne(d => d.Language).WithMany(p => p.NopCheckoutAttributeLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_CheckoutAttributeLocalized_Nop_Language");
        });

        modelBuilder.Entity<NopCheckoutAttributeValue>(entity =>
        {
            entity.HasKey(e => e.CheckoutAttributeValueId);

            entity.ToTable("Nop_CheckoutAttributeValue");

            entity.Property(e => e.CheckoutAttributeValueId).HasColumnName("CheckoutAttributeValueID");
            entity.Property(e => e.CheckoutAttributeId).HasColumnName("CheckoutAttributeID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PriceAdjustment).HasColumnType("money");
            entity.Property(e => e.WeightAdjustment).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.CheckoutAttribute).WithMany(p => p.NopCheckoutAttributeValues)
                .HasForeignKey(d => d.CheckoutAttributeId)
                .HasConstraintName("FK_Nop_CheckoutAttributeValue_Nop_CheckoutAttribute");
        });

        modelBuilder.Entity<NopCheckoutAttributeValueLocalized>(entity =>
        {
            entity.HasKey(e => e.CheckoutAttributeValueLocalizedId);

            entity.ToTable("Nop_CheckoutAttributeValueLocalized");

            entity.HasIndex(e => new { e.CheckoutAttributeValueId, e.LanguageId }, "IX_Nop_CheckoutAttributeValueLocalized_Unique1").IsUnique();

            entity.Property(e => e.CheckoutAttributeValueLocalizedId).HasColumnName("CheckoutAttributeValueLocalizedID");
            entity.Property(e => e.CheckoutAttributeValueId).HasColumnName("CheckoutAttributeValueID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.CheckoutAttributeValue).WithMany(p => p.NopCheckoutAttributeValueLocalizeds)
                .HasForeignKey(d => d.CheckoutAttributeValueId)
                .HasConstraintName("FK_Nop_CheckoutAttributeValueLocalized_Nop_CheckoutAttributeValue");

            entity.HasOne(d => d.Language).WithMany(p => p.NopCheckoutAttributeValueLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_CheckoutAttributeValueLocalized_Nop_Language");
        });

        modelBuilder.Entity<NopCountry>(entity =>
        {
            entity.HasKey(e => e.CountryId);

            entity.ToTable("Nop_Country");

            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.NumericIsocode).HasColumnName("NumericISOCode");
            entity.Property(e => e.SubjectToVat).HasColumnName("SubjectToVAT");
            entity.Property(e => e.ThreeLetterIsocode)
                .HasMaxLength(3)
                .HasColumnName("ThreeLetterISOCode");
            entity.Property(e => e.TwoLetterIsocode)
                .HasMaxLength(2)
                .HasColumnName("TwoLetterISOCode");
        });

        modelBuilder.Entity<NopCreditCardType>(entity =>
        {
            entity.HasKey(e => e.CreditCardTypeId);

            entity.ToTable("Nop_CreditCardType");

            entity.Property(e => e.CreditCardTypeId).HasColumnName("CreditCardTypeID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SystemKeyword).HasMaxLength(100);
        });

        modelBuilder.Entity<NopCrossSellProduct>(entity =>
        {
            entity.HasKey(e => e.CrossSellProductId).HasName("PK_CrossSellProduct");

            entity.ToTable("Nop_CrossSellProduct");

            entity.HasIndex(e => new { e.ProductId1, e.ProductId2 }, "IX_Nop_CrossSellProduct_Unique").IsUnique();

            entity.HasOne(d => d.ProductId1Navigation).WithMany(p => p.NopCrossSellProducts)
                .HasForeignKey(d => d.ProductId1)
                .HasConstraintName("FK_Nop_CrossSellProduct_Nop_Product");
        });

        modelBuilder.Entity<NopCurrency>(entity =>
        {
            entity.HasKey(e => e.CurrencyId).HasName("Nop_Currency_PK");

            entity.ToTable("Nop_Currency");

            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CustomFormatting).HasMaxLength(50);
            entity.Property(e => e.DisplayLocale).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopCustomer>(entity =>
        {
            entity.HasKey(e => e.CustomerId);

            entity.ToTable("Nop_Customer");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Active)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.AdminComment)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");
            entity.Property(e => e.AvatarId).HasColumnName("AvatarID");
            entity.Property(e => e.BillingAddressId).HasColumnName("BillingAddressID");
            entity.Property(e => e.CheckoutAttributes)
                .HasDefaultValueSql("('')")
                .HasColumnType("xml");
            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");
            entity.Property(e => e.CustomerGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("CustomerGUID");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.GiftCardCouponCodes)
                .HasDefaultValueSql("('')")
                .HasColumnType("xml");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.LastAppliedCouponCode).HasMaxLength(100);
            entity.Property(e => e.LastPaymentMethodId).HasColumnName("LastPaymentMethodID");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.RegistrationDate).HasColumnType("datetime");
            entity.Property(e => e.SaltKey)
                .HasMaxLength(255)
                .HasDefaultValueSql("((0))");
            entity.Property(e => e.ShippingAddressId).HasColumnName("ShippingAddressID");
            entity.Property(e => e.Signature)
                .HasMaxLength(300)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TaxDisplayTypeId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("TaxDisplayTypeID");
            entity.Property(e => e.TimeZoneId)
                .HasMaxLength(200)
                .HasDefaultValueSql("('')")
                .HasColumnName("TimeZoneID");
            entity.Property(e => e.Username)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");

            entity.HasMany(d => d.CustomerRoles).WithMany(p => p.Customers)
                .UsingEntity<Dictionary<string, object>>(
                    "NopCustomerCustomerRoleMapping",
                    r => r.HasOne<NopCustomerRole>().WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .HasConstraintName("FK_Nop_Customer_CustomerRole_Mapping_Nop_CustomerRole"),
                    l => l.HasOne<NopCustomer>().WithMany()
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Nop_Customer_CustomerRole_Mapping_Nop_Customer"),
                    j =>
                    {
                        j.HasKey("CustomerId", "CustomerRoleId");
                        j.ToTable("Nop_Customer_CustomerRole_Mapping");
                        j.IndexerProperty<int>("CustomerId").HasColumnName("CustomerID");
                        j.IndexerProperty<int>("CustomerRoleId").HasColumnName("CustomerRoleID");
                    });
        });

        modelBuilder.Entity<NopCustomerAction>(entity =>
        {
            entity.HasKey(e => e.CustomerActionId).HasName("Nop_CustomerAction_PK");

            entity.ToTable("Nop_CustomerAction");

            entity.Property(e => e.CustomerActionId).HasColumnName("CustomerActionID");
            entity.Property(e => e.Comment).HasMaxLength(1000);
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SystemKeyword).HasMaxLength(100);
        });

        modelBuilder.Entity<NopCustomerAttribute>(entity =>
        {
            entity.HasKey(e => e.CustomerAttributeId);

            entity.ToTable("Nop_CustomerAttribute");

            entity.HasIndex(e => new { e.CustomerId, e.Key }, "IX_Nop_CustomerAttribute_Unique").IsUnique();

            entity.Property(e => e.Key).HasMaxLength(100);
            entity.Property(e => e.Value).HasMaxLength(1000);

            entity.HasOne(d => d.Customer).WithMany(p => p.NopCustomerAttributes)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_CustomerAttribute_Nop_Customer");
        });

        modelBuilder.Entity<NopCustomerRole>(entity =>
        {
            entity.HasKey(e => e.CustomerRoleId);

            entity.ToTable("Nop_CustomerRole");

            entity.Property(e => e.CustomerRoleId).HasColumnName("CustomerRoleID");
            entity.Property(e => e.Name).HasMaxLength(255);

            entity.HasMany(d => d.Discounts).WithMany(p => p.CustomerRoles)
                .UsingEntity<Dictionary<string, object>>(
                    "NopCustomerRoleDiscountMapping",
                    r => r.HasOne<NopDiscount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Nop_CustomerRole_Discount_Mapping_Nop_Discount"),
                    l => l.HasOne<NopCustomerRole>().WithMany()
                        .HasForeignKey("CustomerRoleId")
                        .HasConstraintName("FK_Nop_CustomerRole_Discount_Mapping_Nop_CustomerRole"),
                    j =>
                    {
                        j.HasKey("CustomerRoleId", "DiscountId");
                        j.ToTable("Nop_CustomerRole_Discount_Mapping");
                        j.IndexerProperty<int>("CustomerRoleId").HasColumnName("CustomerRoleID");
                        j.IndexerProperty<int>("DiscountId").HasColumnName("DiscountID");
                    });
        });

        modelBuilder.Entity<NopCustomerRoleProductPrice>(entity =>
        {
            entity.HasKey(e => e.CustomerRoleProductPriceId);

            entity.ToTable("Nop_CustomerRole_ProductPrice");

            entity.Property(e => e.CustomerRoleProductPriceId).HasColumnName("CustomerRoleProductPriceID");
            entity.Property(e => e.CustomerRoleId).HasColumnName("CustomerRoleID");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");

            entity.HasOne(d => d.CustomerRole).WithMany(p => p.NopCustomerRoleProductPrices)
                .HasForeignKey(d => d.CustomerRoleId)
                .HasConstraintName("FK_Nop_CustomerRole_ProductPrice_Nop_CustomerRole");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopCustomerRoleProductPrices)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_CustomerRole_ProductPrice_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopCustomerSession>(entity =>
        {
            entity.HasKey(e => e.CustomerSessionGuid);

            entity.ToTable("Nop_CustomerSession");

            entity.Property(e => e.CustomerSessionGuid)
                .ValueGeneratedNever()
                .HasColumnName("CustomerSessionGUID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.LastAccessed).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopDiscount>(entity =>
        {
            entity.HasKey(e => e.DiscountId).HasName("Nop_Discount_PK");

            entity.ToTable("Nop_Discount");

            entity.Property(e => e.DiscountId).HasColumnName("DiscountID");
            entity.Property(e => e.CouponCode).HasMaxLength(100);
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountLimitationId).HasColumnName("DiscountLimitationID");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountRequirementId).HasColumnName("DiscountRequirementID");
            entity.Property(e => e.DiscountTypeId).HasColumnName("DiscountTypeID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LimitationTimes).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.RequirementSpentAmount).HasColumnType("money");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopDiscountUsageHistory>(entity =>
        {
            entity.HasKey(e => e.DiscountUsageHistoryId).HasName("Nop_DiscountUsageHistory_PK");

            entity.ToTable("Nop_DiscountUsageHistory");

            entity.Property(e => e.DiscountUsageHistoryId).HasColumnName("DiscountUsageHistoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.DiscountId).HasColumnName("DiscountID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopDiscountUsageHistories)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_DiscountUsageHistory_Nop_Customer");

            entity.HasOne(d => d.Discount).WithMany(p => p.NopDiscountUsageHistories)
                .HasForeignKey(d => d.DiscountId)
                .HasConstraintName("FK_Nop_DiscountUsageHistory_Nop_Discount");

            entity.HasOne(d => d.Order).WithMany(p => p.NopDiscountUsageHistories)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Nop_DiscountUsageHistory_Nop_Order");
        });

        modelBuilder.Entity<NopDownload>(entity =>
        {
            entity.HasKey(e => e.DownloadId).HasName("Nop_Download_PK");

            entity.ToTable("Nop_Download");

            entity.Property(e => e.DownloadId).HasColumnName("DownloadID");
            entity.Property(e => e.ContentType)
                .HasMaxLength(20)
                .HasDefaultValueSql("(N'')");
            entity.Property(e => e.DownloadUrl)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')")
                .HasColumnName("DownloadURL");
            entity.Property(e => e.Extension).HasMaxLength(20);
            entity.Property(e => e.Filename)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.UseDownloadUrl).HasColumnName("UseDownloadURL");
        });

        modelBuilder.Entity<NopEmailAccount>(entity =>
        {
            entity.HasKey(e => e.EmailAccountId).HasName("PK_EmailAccount");

            entity.ToTable("Nop_EmailAccount");

            entity.Property(e => e.DisplayName).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EnableSsl).HasColumnName("EnableSSL");
            entity.Property(e => e.Host).HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Username).HasMaxLength(255);
        });

        modelBuilder.Entity<NopForumsForum>(entity =>
        {
            entity.HasKey(e => e.ForumId);

            entity.ToTable("Nop_Forums_Forum");

            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ForumGroupId).HasColumnName("ForumGroupID");
            entity.Property(e => e.LastPostId).HasColumnName("LastPostID");
            entity.Property(e => e.LastPostTime).HasColumnType("datetime");
            entity.Property(e => e.LastPostUserId).HasColumnName("LastPostUserID");
            entity.Property(e => e.LastTopicId).HasColumnName("LastTopicID");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.ForumGroup).WithMany(p => p.NopForumsForums)
                .HasForeignKey(d => d.ForumGroupId)
                .HasConstraintName("FK_Nop_Forums_Forum_Nop_Forums_Group");
        });

        modelBuilder.Entity<NopForumsGroup>(entity =>
        {
            entity.HasKey(e => e.ForumGroupId);

            entity.ToTable("Nop_Forums_Group");

            entity.Property(e => e.ForumGroupId).HasColumnName("ForumGroupID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopForumsPost>(entity =>
        {
            entity.HasKey(e => e.PostId);

            entity.ToTable("Nop_Forums_Post");

            entity.Property(e => e.PostId).HasColumnName("PostID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(100)
                .HasColumnName("IPAddress");
            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Topic).WithMany(p => p.NopForumsPosts)
                .HasForeignKey(d => d.TopicId)
                .HasConstraintName("FK_Nop_Forums_Post_Nop_Forums_Topic");
        });

        modelBuilder.Entity<NopForumsPrivateMessage>(entity =>
        {
            entity.HasKey(e => e.PrivateMessageId);

            entity.ToTable("Nop_Forums_PrivateMessage");

            entity.Property(e => e.PrivateMessageId).HasColumnName("PrivateMessageID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.FromUserId).HasColumnName("FromUserID");
            entity.Property(e => e.Subject).HasMaxLength(450);
            entity.Property(e => e.ToUserId).HasColumnName("ToUserID");
        });

        modelBuilder.Entity<NopForumsSubscription>(entity =>
        {
            entity.HasKey(e => e.SubscriptionId);

            entity.ToTable("Nop_Forums_Subscription");

            entity.Property(e => e.SubscriptionId).HasColumnName("SubscriptionID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.SubscriptionGuid).HasColumnName("SubscriptionGUID");
            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<NopForumsTopic>(entity =>
        {
            entity.HasKey(e => e.TopicId);

            entity.ToTable("Nop_Forums_Topic");

            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ForumId).HasColumnName("ForumID");
            entity.Property(e => e.LastPostId).HasColumnName("LastPostID");
            entity.Property(e => e.LastPostTime).HasColumnType("datetime");
            entity.Property(e => e.LastPostUserId).HasColumnName("LastPostUserID");
            entity.Property(e => e.Subject).HasMaxLength(450);
            entity.Property(e => e.TopicTypeId).HasColumnName("TopicTypeID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Forum).WithMany(p => p.NopForumsTopics)
                .HasForeignKey(d => d.ForumId)
                .HasConstraintName("FK_Nop_Forums_Topic_Nop_Forums_Forum");
        });

        modelBuilder.Entity<NopGiftCard>(entity =>
        {
            entity.HasKey(e => e.GiftCardId).HasName("Nop_GiftCard_PK");

            entity.ToTable("Nop_GiftCard");

            entity.Property(e => e.GiftCardId).HasColumnName("GiftCardID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.GiftCardCouponCode).HasMaxLength(100);
            entity.Property(e => e.Message).HasMaxLength(4000);
            entity.Property(e => e.PurchasedOrderProductVariantId).HasColumnName("PurchasedOrderProductVariantID");
            entity.Property(e => e.RecipientEmail).HasMaxLength(100);
            entity.Property(e => e.RecipientName).HasMaxLength(100);
            entity.Property(e => e.SenderEmail).HasMaxLength(100);
            entity.Property(e => e.SenderName).HasMaxLength(100);

            entity.HasOne(d => d.PurchasedOrderProductVariant).WithMany(p => p.NopGiftCards)
                .HasForeignKey(d => d.PurchasedOrderProductVariantId)
                .HasConstraintName("FK_Nop_GiftCard_Nop_OrderProductVariant");
        });

        modelBuilder.Entity<NopGiftCardUsageHistory>(entity =>
        {
            entity.HasKey(e => e.GiftCardUsageHistoryId).HasName("Nop_GiftCardUsageHistory_PK");

            entity.ToTable("Nop_GiftCardUsageHistory");

            entity.Property(e => e.GiftCardUsageHistoryId).HasColumnName("GiftCardUsageHistoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.GiftCardId).HasColumnName("GiftCardID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.UsedValue).HasColumnType("money");
            entity.Property(e => e.UsedValueInCustomerCurrency).HasColumnType("money");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopGiftCardUsageHistories)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_GiftCardUsageHistory_Nop_Customer");

            entity.HasOne(d => d.GiftCard).WithMany(p => p.NopGiftCardUsageHistories)
                .HasForeignKey(d => d.GiftCardId)
                .HasConstraintName("FK_Nop_GiftCardUsageHistory_Nop_GiftCard");
        });

        modelBuilder.Entity<NopLanguage>(entity =>
        {
            entity.HasKey(e => e.LanguageId).HasName("Nop_Language_PK");

            entity.ToTable("Nop_Language");

            entity.Property(e => e.FlagImageFileName)
                .HasMaxLength(50)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.LanguageCulture)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<NopLocaleStringResource>(entity =>
        {
            entity.HasKey(e => e.LocaleStringResourceId);

            entity.ToTable("Nop_LocaleStringResource");

            entity.Property(e => e.LocaleStringResourceId).HasColumnName("LocaleStringResourceID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.ResourceName).HasMaxLength(200);

            entity.HasOne(d => d.Language).WithMany(p => p.NopLocaleStringResources)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_LocaleStringResource_Nop_Language");
        });

        modelBuilder.Entity<NopLog>(entity =>
        {
            entity.HasKey(e => e.LogId);

            entity.ToTable("Nop_Log");

            entity.Property(e => e.LogId).HasColumnName("LogID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Exception).HasMaxLength(4000);
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(100)
                .HasColumnName("IPAddress");
            entity.Property(e => e.LogTypeId).HasColumnName("LogTypeID");
            entity.Property(e => e.Message).HasMaxLength(1000);
            entity.Property(e => e.PageUrl)
                .HasMaxLength(100)
                .HasColumnName("PageURL");
            entity.Property(e => e.ReferrerUrl)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("ReferrerURL");
        });

        modelBuilder.Entity<NopManufacturer>(entity =>
        {
            entity.HasKey(e => e.ManufacturerId);

            entity.ToTable("Nop_Manufacturer");

            entity.Property(e => e.ManufacturerId).HasColumnName("ManufacturerID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.PageSize).HasDefaultValueSql("((10))");
            entity.Property(e => e.PictureId).HasColumnName("PictureID");
            entity.Property(e => e.PriceRanges)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Template).WithMany(p => p.NopManufacturers)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nop_Manufacturer_Nop_ManufacturerTemplate");
        });

        modelBuilder.Entity<NopManufacturerLocalized>(entity =>
        {
            entity.HasKey(e => e.ManufacturerLocalizedId);

            entity.ToTable("Nop_ManufacturerLocalized");

            entity.HasIndex(e => new { e.ManufacturerId, e.LanguageId }, "IX_Nop_ManufacturerLocalized_Unique1").IsUnique();

            entity.Property(e => e.ManufacturerLocalizedId).HasColumnName("ManufacturerLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.ManufacturerId).HasColumnName("ManufacturerID");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");

            entity.HasOne(d => d.Language).WithMany(p => p.NopManufacturerLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_ManufacturerLocalized_Nop_Language");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.NopManufacturerLocalizeds)
                .HasForeignKey(d => d.ManufacturerId)
                .HasConstraintName("FK_Nop_ManufacturerLocalized_Nop_Manufacturer");
        });

        modelBuilder.Entity<NopManufacturerTemplate>(entity =>
        {
            entity.HasKey(e => e.ManufacturerTemplateId).HasName("Nop_ManufacturerTemplate_PK");

            entity.ToTable("Nop_ManufacturerTemplate");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.TemplatePath).HasMaxLength(200);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopMeasureDimension>(entity =>
        {
            entity.HasKey(e => e.MeasureDimensionId).HasName("PK_Nop_MeasureDimention");

            entity.ToTable("Nop_MeasureDimension");

            entity.Property(e => e.MeasureDimensionId).HasColumnName("MeasureDimensionID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Ratio)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SystemKeyword).HasMaxLength(100);
        });

        modelBuilder.Entity<NopMeasureWeight>(entity =>
        {
            entity.HasKey(e => e.MeasureWeightId);

            entity.ToTable("Nop_MeasureWeight");

            entity.Property(e => e.MeasureWeightId).HasColumnName("MeasureWeightID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.Ratio)
                .HasDefaultValueSql("((1))")
                .HasColumnType("decimal(18, 4)");
            entity.Property(e => e.SystemKeyword).HasMaxLength(100);
        });

        modelBuilder.Entity<NopMessageTemplate>(entity =>
        {
            entity.HasKey(e => e.MessageTemplateId);

            entity.ToTable("Nop_MessageTemplate");

            entity.Property(e => e.MessageTemplateId).HasColumnName("MessageTemplateID");
            entity.Property(e => e.Name).HasMaxLength(200);
        });

        modelBuilder.Entity<NopMessageTemplateLocalized>(entity =>
        {
            entity.HasKey(e => e.MessageTemplateLocalizedId);

            entity.ToTable("Nop_MessageTemplateLocalized");

            entity.Property(e => e.MessageTemplateLocalizedId).HasColumnName("MessageTemplateLocalizedID");
            entity.Property(e => e.BccemailAddresses)
                .HasMaxLength(200)
                .HasDefaultValueSql("('')")
                .HasColumnName("BCCEmailAddresses");
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.MessageTemplateId).HasColumnName("MessageTemplateID");
            entity.Property(e => e.Subject).HasMaxLength(200);

            entity.HasOne(d => d.Language).WithMany(p => p.NopMessageTemplateLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_MessageTemplateLocalized_Nop_Language");

            entity.HasOne(d => d.MessageTemplate).WithMany(p => p.NopMessageTemplateLocalizeds)
                .HasForeignKey(d => d.MessageTemplateId)
                .HasConstraintName("FK_Nop_MessageTemplateLocalized_Nop_MessageTemplate");
        });

        modelBuilder.Entity<NopNews>(entity =>
        {
            entity.HasKey(e => e.NewsId);

            entity.ToTable("Nop_News");

            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Short).HasMaxLength(4000);
            entity.Property(e => e.Title).HasMaxLength(1000);

            entity.HasOne(d => d.Language).WithMany(p => p.NopNews)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_News_Nop_Language");
        });

        modelBuilder.Entity<NopNewsComment>(entity =>
        {
            entity.HasKey(e => e.NewsCommentId);

            entity.ToTable("Nop_NewsComment");

            entity.Property(e => e.NewsCommentId).HasColumnName("NewsCommentID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("IPAddress");
            entity.Property(e => e.NewsId).HasColumnName("NewsID");
            entity.Property(e => e.Title).HasMaxLength(1000);

            entity.HasOne(d => d.News).WithMany(p => p.NopNewsComments)
                .HasForeignKey(d => d.NewsId)
                .HasConstraintName("FK_Nop_NewsComment_Nop_News");
        });

        modelBuilder.Entity<NopNewsLetterSubscription>(entity =>
        {
            entity.HasKey(e => e.NewsLetterSubscriptionId);

            entity.ToTable("Nop_NewsLetterSubscription");

            entity.Property(e => e.NewsLetterSubscriptionId).HasColumnName("NewsLetterSubscriptionID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
        });

        modelBuilder.Entity<NopOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Nop_Order__035179CE");

            entity.ToTable("Nop_Order");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");
            entity.Property(e => e.AuthorizationTransactionCode).HasMaxLength(4000);
            entity.Property(e => e.AuthorizationTransactionId)
                .HasMaxLength(4000)
                .HasColumnName("AuthorizationTransactionID");
            entity.Property(e => e.AuthorizationTransactionResult).HasMaxLength(4000);
            entity.Property(e => e.BillingAddress1).HasMaxLength(100);
            entity.Property(e => e.BillingAddress2).HasMaxLength(100);
            entity.Property(e => e.BillingCity).HasMaxLength(100);
            entity.Property(e => e.BillingCompany).HasMaxLength(100);
            entity.Property(e => e.BillingCountry).HasMaxLength(100);
            entity.Property(e => e.BillingCountryId).HasColumnName("BillingCountryID");
            entity.Property(e => e.BillingEmail).HasMaxLength(255);
            entity.Property(e => e.BillingFaxNumber).HasMaxLength(50);
            entity.Property(e => e.BillingFirstName).HasMaxLength(100);
            entity.Property(e => e.BillingLastName).HasMaxLength(100);
            entity.Property(e => e.BillingPhoneNumber).HasMaxLength(50);
            entity.Property(e => e.BillingStateProvince).HasMaxLength(100);
            entity.Property(e => e.BillingStateProvinceId).HasColumnName("BillingStateProvinceID");
            entity.Property(e => e.BillingZipPostalCode).HasMaxLength(30);
            entity.Property(e => e.CaptureTransactionId)
                .HasMaxLength(4000)
                .HasColumnName("CaptureTransactionID");
            entity.Property(e => e.CaptureTransactionResult).HasMaxLength(4000);
            entity.Property(e => e.CardCvv2)
                .HasMaxLength(100)
                .HasColumnName("CardCVV2");
            entity.Property(e => e.CardExpirationMonth).HasMaxLength(100);
            entity.Property(e => e.CardExpirationYear).HasMaxLength(100);
            entity.Property(e => e.CardName).HasMaxLength(1000);
            entity.Property(e => e.CardNumber).HasMaxLength(100);
            entity.Property(e => e.CardType).HasMaxLength(100);
            entity.Property(e => e.CheckoutAttributeDescription)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.CheckoutAttributesXml)
                .HasDefaultValueSql("('')")
                .HasColumnType("xml")
                .HasColumnName("CheckoutAttributesXML");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.CustomerIp)
                .HasMaxLength(50)
                .HasDefaultValueSql("('')")
                .HasColumnName("CustomerIP");
            entity.Property(e => e.CustomerLanguageId).HasColumnName("CustomerLanguageID");
            entity.Property(e => e.CustomerTaxDisplayTypeId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("CustomerTaxDisplayTypeID");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.MaskedCreditCardNumber)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.OrderDiscount).HasColumnType("money");
            entity.Property(e => e.OrderDiscountInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderGuid).HasColumnName("OrderGUID");
            entity.Property(e => e.OrderShippingExclTax).HasColumnType("money");
            entity.Property(e => e.OrderShippingExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderShippingInclTax).HasColumnType("money");
            entity.Property(e => e.OrderShippingInclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderStatusId).HasColumnName("OrderStatusID");
            entity.Property(e => e.OrderSubTotalDiscountExclTax).HasColumnType("money");
            entity.Property(e => e.OrderSubTotalDiscountExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderSubTotalDiscountInclTax).HasColumnType("money");
            entity.Property(e => e.OrderSubTotalDiscountInclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderSubtotalExclTax).HasColumnType("money");
            entity.Property(e => e.OrderSubtotalExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderSubtotalInclTax).HasColumnType("money");
            entity.Property(e => e.OrderSubtotalInclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderTax).HasColumnType("money");
            entity.Property(e => e.OrderTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderTotal).HasColumnType("money");
            entity.Property(e => e.OrderTotalInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.OrderWeight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.PaidDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentMethodAdditionalFeeExclTax).HasColumnType("money");
            entity.Property(e => e.PaymentMethodAdditionalFeeExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.PaymentMethodAdditionalFeeInclTax).HasColumnType("money");
            entity.Property(e => e.PaymentMethodAdditionalFeeInclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.PaymentMethodId).HasColumnName("PaymentMethodID");
            entity.Property(e => e.PaymentMethodName).HasMaxLength(100);
            entity.Property(e => e.PaymentStatusId).HasColumnName("PaymentStatusID");
            entity.Property(e => e.PurchaseOrderNumber).HasMaxLength(100);
            entity.Property(e => e.RefundedAmount).HasColumnType("money");
            entity.Property(e => e.ShippedDate).HasColumnType("datetime");
            entity.Property(e => e.ShippingAddress1).HasMaxLength(100);
            entity.Property(e => e.ShippingAddress2).HasMaxLength(100);
            entity.Property(e => e.ShippingCity).HasMaxLength(100);
            entity.Property(e => e.ShippingCompany).HasMaxLength(100);
            entity.Property(e => e.ShippingCountry).HasMaxLength(100);
            entity.Property(e => e.ShippingCountryId).HasColumnName("ShippingCountryID");
            entity.Property(e => e.ShippingEmail).HasMaxLength(255);
            entity.Property(e => e.ShippingFaxNumber).HasMaxLength(50);
            entity.Property(e => e.ShippingFirstName).HasMaxLength(100);
            entity.Property(e => e.ShippingLastName).HasMaxLength(100);
            entity.Property(e => e.ShippingMethod).HasMaxLength(100);
            entity.Property(e => e.ShippingPhoneNumber).HasMaxLength(50);
            entity.Property(e => e.ShippingRateComputationMethodId).HasColumnName("ShippingRateComputationMethodID");
            entity.Property(e => e.ShippingStateProvince).HasMaxLength(100);
            entity.Property(e => e.ShippingStateProvinceId).HasColumnName("ShippingStateProvinceID");
            entity.Property(e => e.ShippingStatusId).HasColumnName("ShippingStatusID");
            entity.Property(e => e.ShippingZipPostalCode).HasMaxLength(30);
            entity.Property(e => e.SubscriptionTransactionId)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')")
                .HasColumnName("SubscriptionTransactionID");
            entity.Property(e => e.TaxRates)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TaxRatesInCustomerCurrency)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TrackingNumber)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.VatNumber)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<NopOrderNote>(entity =>
        {
            entity.HasKey(e => e.OrderNoteId);

            entity.ToTable("Nop_OrderNote");

            entity.Property(e => e.OrderNoteId).HasColumnName("OrderNoteID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Note).HasMaxLength(4000);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");

            entity.HasOne(d => d.Order).WithMany(p => p.NopOrderNotes)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Nop_OrderNote_Nop_Order");
        });

        modelBuilder.Entity<NopOrderProductVariant>(entity =>
        {
            entity.HasKey(e => e.OrderProductVariantId).HasName("Nop_OrderProductVariant_PK");

            entity.ToTable("Nop_OrderProductVariant");

            entity.Property(e => e.OrderProductVariantId).HasColumnName("OrderProductVariantID");
            entity.Property(e => e.AttributeDescription).HasMaxLength(4000);
            entity.Property(e => e.AttributesXml)
                .HasDefaultValueSql("('')")
                .HasColumnType("xml")
                .HasColumnName("AttributesXML");
            entity.Property(e => e.DiscountAmountExclTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DiscountAmountInclTax).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LicenseDownloadId).HasColumnName("LicenseDownloadID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.OrderProductVariantGuid)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("OrderProductVariantGUID");
            entity.Property(e => e.PriceExclTax).HasColumnType("money");
            entity.Property(e => e.PriceExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.PriceInclTax).HasColumnType("money");
            entity.Property(e => e.PriceInclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");
            entity.Property(e => e.UnitPriceExclTax).HasColumnType("money");
            entity.Property(e => e.UnitPriceExclTaxInCustomerCurrency).HasColumnType("money");
            entity.Property(e => e.UnitPriceInclTax).HasColumnType("money");
            entity.Property(e => e.UnitPriceInclTaxInCustomerCurrency).HasColumnType("money");

            entity.HasOne(d => d.Order).WithMany(p => p.NopOrderProductVariants)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Nop_OrderProductVariant_Nop_Order");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopOrderProductVariants)
                .HasForeignKey(d => d.ProductVariantId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nop_OrderProductVariant_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("PK_PaymentMethod");

            entity.ToTable("Nop_PaymentMethod");

            entity.Property(e => e.PaymentMethodId).HasColumnName("PaymentMethodID");
            entity.Property(e => e.ClassName).HasMaxLength(500);
            entity.Property(e => e.ConfigureTemplatePath).HasMaxLength(500);
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SystemKeyword).HasMaxLength(500);
            entity.Property(e => e.UserTemplatePath).HasMaxLength(500);
            entity.Property(e => e.VisibleName).HasMaxLength(100);

            entity.HasMany(d => d.Countries).WithMany(p => p.PaymentMethods)
                .UsingEntity<Dictionary<string, object>>(
                    "NopPaymentMethodRestrictedCountry",
                    r => r.HasOne<NopCountry>().WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Nop_PaymentMethod_RestrictedCountries_Nop_Country"),
                    l => l.HasOne<NopPaymentMethod>().WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Nop_PaymentMethod_RestrictedCountries_Nop_PaymentMethod"),
                    j =>
                    {
                        j.HasKey("PaymentMethodId", "CountryId");
                        j.ToTable("Nop_PaymentMethod_RestrictedCountries");
                        j.IndexerProperty<int>("PaymentMethodId").HasColumnName("PaymentMethodID");
                        j.IndexerProperty<int>("CountryId").HasColumnName("CountryID");
                    });
        });

        modelBuilder.Entity<NopPicture>(entity =>
        {
            entity.HasKey(e => e.PictureId).HasName("Nop_Picture_PK");

            entity.ToTable("Nop_Picture");

            entity.Property(e => e.PictureId).HasColumnName("PictureID");
            entity.Property(e => e.MimeType)
                .HasMaxLength(20)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<NopPoll>(entity =>
        {
            entity.HasKey(e => e.PollId);

            entity.ToTable("Nop_Poll");

            entity.Property(e => e.PollId).HasColumnName("PollID");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.SystemKeyword)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')");

            entity.HasOne(d => d.Language).WithMany(p => p.NopPolls)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_Poll_Nop_Language");
        });

        modelBuilder.Entity<NopPollAnswer>(entity =>
        {
            entity.HasKey(e => e.PollAnswerId).HasName("PK_Nop_PollAnswers");

            entity.ToTable("Nop_PollAnswer");

            entity.Property(e => e.PollAnswerId).HasColumnName("PollAnswerID");
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.PollId).HasColumnName("PollID");

            entity.HasOne(d => d.Poll).WithMany(p => p.NopPollAnswers)
                .HasForeignKey(d => d.PollId)
                .HasConstraintName("FK_Nop_PollAnswer_Nop_Poll");
        });

        modelBuilder.Entity<NopPollVotingRecord>(entity =>
        {
            entity.HasKey(e => e.PollVotingRecordId);

            entity.ToTable("Nop_PollVotingRecord");

            entity.Property(e => e.PollVotingRecordId).HasColumnName("PollVotingRecordID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.PollAnswerId).HasColumnName("PollAnswerID");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopPollVotingRecords)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_PollVotingRecord_Nop_Customer");

            entity.HasOne(d => d.PollAnswer).WithMany(p => p.NopPollVotingRecords)
                .HasForeignKey(d => d.PollAnswerId)
                .HasConstraintName("FK_Nop_PollVotingRecord_Nop_PollAnswer");
        });

        modelBuilder.Entity<NopPricelist>(entity =>
        {
            entity.HasKey(e => e.PricelistId);

            entity.ToTable("Nop_Pricelist");

            entity.Property(e => e.PricelistId).HasColumnName("PricelistID");
            entity.Property(e => e.AdminNotes).HasMaxLength(500);
            entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");
            entity.Property(e => e.Body).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.DisplayName).HasMaxLength(100);
            entity.Property(e => e.ExportModeId).HasColumnName("ExportModeID");
            entity.Property(e => e.ExportTypeId).HasColumnName("ExportTypeID");
            entity.Property(e => e.Footer).HasMaxLength(500);
            entity.Property(e => e.FormatLocalization).HasMaxLength(5);
            entity.Property(e => e.Header).HasMaxLength(500);
            entity.Property(e => e.PriceAdjustment).HasColumnType("money");
            entity.Property(e => e.PriceAdjustmentTypeId).HasColumnName("PriceAdjustmentTypeID");
            entity.Property(e => e.PricelistGuid).HasMaxLength(40);
            entity.Property(e => e.ShortName).HasMaxLength(20);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("Nop_Product_PK");

            entity.ToTable("Nop_Product");

            entity.Property(e => e.AllowCustomerRatings)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");
            entity.Property(e => e.TemplateId).HasColumnName("TemplateID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Template).WithMany(p => p.NopProducts)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Nop_Product_Nop_ProductTemplate");
        });

        modelBuilder.Entity<NopProductAttribute>(entity =>
        {
            entity.HasKey(e => e.ProductAttributeId);

            entity.ToTable("Nop_ProductAttribute");

            entity.Property(e => e.ProductAttributeId).HasColumnName("ProductAttributeID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<NopProductAttributeLocalized>(entity =>
        {
            entity.HasKey(e => e.ProductAttributeLocalizedId);

            entity.ToTable("Nop_ProductAttributeLocalized");

            entity.HasIndex(e => new { e.ProductAttributeId, e.LanguageId }, "IX_Nop_ProductAttributeLocalized_Unique1").IsUnique();

            entity.Property(e => e.ProductAttributeLocalizedId).HasColumnName("ProductAttributeLocalizedID");
            entity.Property(e => e.Description).HasMaxLength(400);
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.ProductAttributeId).HasColumnName("ProductAttributeID");

            entity.HasOne(d => d.Language).WithMany(p => p.NopProductAttributeLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_ProductAttributeLocalized_Nop_Language");

            entity.HasOne(d => d.ProductAttribute).WithMany(p => p.NopProductAttributeLocalizeds)
                .HasForeignKey(d => d.ProductAttributeId)
                .HasConstraintName("FK_Nop_ProductAttributeLocalized_Nop_ProductAttribute");
        });

        modelBuilder.Entity<NopProductCategoryMapping>(entity =>
        {
            entity.HasKey(e => e.ProductCategoryId).HasName("PK_Nop_Product_Category_Mapping_1");

            entity.ToTable("Nop_Product_Category_Mapping");

            entity.HasIndex(e => new { e.ProductId, e.CategoryId }, "IX_Nop_Product_Category_Mapping_Unique").IsUnique();

            entity.Property(e => e.ProductCategoryId).HasColumnName("ProductCategoryID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Category).WithMany(p => p.NopProductCategoryMappings)
                .HasForeignKey(d => d.CategoryId)
                .HasConstraintName("FK_Nop_Product_Category_Mapping_Nop_Category1");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductCategoryMappings)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_Product_Category_Mapping_Nop_Product1");
        });

        modelBuilder.Entity<NopProductLocalized>(entity =>
        {
            entity.HasKey(e => e.ProductLocalizedId);

            entity.ToTable("Nop_ProductLocalized");

            entity.HasIndex(e => new { e.ProductId, e.LanguageId }, "IX_Nop_ProductLocalized_Unique1").IsUnique();

            entity.Property(e => e.ProductLocalizedId).HasColumnName("ProductLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.MetaDescription).HasMaxLength(4000);
            entity.Property(e => e.MetaKeywords).HasMaxLength(400);
            entity.Property(e => e.MetaTitle).HasMaxLength(400);
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.Sename)
                .HasMaxLength(100)
                .HasColumnName("SEName");

            entity.HasOne(d => d.Language).WithMany(p => p.NopProductLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_ProductLocalized_Nop_Language");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductLocalizeds)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_ProductLocalized_Nop_Product");
        });

        modelBuilder.Entity<NopProductManufacturerMapping>(entity =>
        {
            entity.HasKey(e => e.ProductManufacturerId).HasName("PK_Nop_Product_Manufacturer_Mapping_1");

            entity.ToTable("Nop_Product_Manufacturer_Mapping");

            entity.HasIndex(e => new { e.ProductId, e.ManufacturerId }, "IX_Nop_Product_Manufacturer_Mapping_Unique").IsUnique();

            entity.Property(e => e.ProductManufacturerId).HasColumnName("ProductManufacturerID");
            entity.Property(e => e.ManufacturerId).HasColumnName("ManufacturerID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Manufacturer).WithMany(p => p.NopProductManufacturerMappings)
                .HasForeignKey(d => d.ManufacturerId)
                .HasConstraintName("FK_Nop_Product_Manufacturer_Mapping_Nop_Manufacturer1");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductManufacturerMappings)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_Product_Manufacturer_Mapping_Nop_Product1");
        });

        modelBuilder.Entity<NopProductPicture>(entity =>
        {
            entity.HasKey(e => e.ProductPictureId);

            entity.ToTable("Nop_ProductPicture");

            entity.Property(e => e.ProductPictureId).HasColumnName("ProductPictureID");
            entity.Property(e => e.PictureId).HasColumnName("PictureID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Picture).WithMany(p => p.NopProductPictures)
                .HasForeignKey(d => d.PictureId)
                .HasConstraintName("FK_Nop_ProductPicture_Nop_Picture");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductPictures)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_ProductPicture_Nop_Product");
        });

        modelBuilder.Entity<NopProductRating>(entity =>
        {
            entity.HasKey(e => e.ProductRatingId);

            entity.ToTable("Nop_ProductRating");

            entity.Property(e => e.ProductRatingId).HasColumnName("ProductRatingID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.RatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopProductRatings)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_ProductRating_Nop_Customer");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductRatings)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_ProductRating_Nop_Product");
        });

        modelBuilder.Entity<NopProductReview>(entity =>
        {
            entity.HasKey(e => e.ProductReviewId);

            entity.ToTable("Nop_ProductReview");

            entity.Property(e => e.ProductReviewId).HasColumnName("ProductReviewID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Ipaddress)
                .HasMaxLength(100)
                .HasDefaultValueSql("('')")
                .HasColumnName("IPAddress");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.Title).HasMaxLength(1000);

            entity.HasOne(d => d.Customer).WithMany(p => p.NopProductReviews)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_ProductReview_Nop_Customer");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductReviews)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_ProductReview_Nop_Product1");
        });

        modelBuilder.Entity<NopProductReviewHelpfulness>(entity =>
        {
            entity.HasKey(e => e.ProductReviewHelpfulnessId);

            entity.ToTable("Nop_ProductReviewHelpfulness");

            entity.Property(e => e.ProductReviewHelpfulnessId).HasColumnName("ProductReviewHelpfulnessID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.ProductReviewId).HasColumnName("ProductReviewID");

            entity.HasOne(d => d.ProductReview).WithMany(p => p.NopProductReviewHelpfulnesses)
                .HasForeignKey(d => d.ProductReviewId)
                .HasConstraintName("FK_Nop_ProductReviewHelpfulness_Nop_ProductReview");
        });

        modelBuilder.Entity<NopProductSpecificationAttributeMapping>(entity =>
        {
            entity.HasKey(e => e.ProductSpecificationAttributeId);

            entity.ToTable("Nop_Product_SpecificationAttribute_Mapping");

            entity.Property(e => e.ProductSpecificationAttributeId).HasColumnName("ProductSpecificationAttributeID");
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ShowOnProductPage)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.SpecificationAttributeOptionId).HasColumnName("SpecificationAttributeOptionID");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductSpecificationAttributeMappings)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_Product_SpecificationAttribute_Mapping_Nop_Product");

            entity.HasOne(d => d.SpecificationAttributeOption).WithMany(p => p.NopProductSpecificationAttributeMappings)
                .HasForeignKey(d => d.SpecificationAttributeOptionId)
                .HasConstraintName("FK_Nop_Product_SpecificationAttribute_Mapping_Nop_SpecificationAttributeOption");
        });

        modelBuilder.Entity<NopProductTag>(entity =>
        {
            entity.HasKey(e => e.ProductTagId);

            entity.ToTable("Nop_ProductTag");

            entity.Property(e => e.ProductTagId).HasColumnName("ProductTagID");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasMany(d => d.Products).WithMany(p => p.ProductTags)
                .UsingEntity<Dictionary<string, object>>(
                    "NopProductTagProductMapping",
                    r => r.HasOne<NopProduct>().WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Nop_ProductTag_Product_Mapping_Nop_Product"),
                    l => l.HasOne<NopProductTag>().WithMany()
                        .HasForeignKey("ProductTagId")
                        .HasConstraintName("FK_Nop_ProductTag_Product_Mapping_Nop_ProductTag"),
                    j =>
                    {
                        j.HasKey("ProductTagId", "ProductId").HasName("Nop_ProductTag_Product_Mapping_PK");
                        j.ToTable("Nop_ProductTag_Product_Mapping");
                        j.IndexerProperty<int>("ProductTagId").HasColumnName("ProductTagID");
                        j.IndexerProperty<int>("ProductId").HasColumnName("ProductID");
                    });
        });

        modelBuilder.Entity<NopProductTemplate>(entity =>
        {
            entity.HasKey(e => e.ProductTemplateId).HasName("Nop_ProductTemplate_PK");

            entity.ToTable("Nop_ProductTemplate");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.TemplatePath).HasMaxLength(200);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopProductVariant>(entity =>
        {
            entity.HasKey(e => e.ProductVariantId).HasName("Nop_ProductVariant_PK");

            entity.ToTable("Nop_ProductVariant");

            entity.Property(e => e.AdditionalShippingCharge).HasColumnType("money");
            entity.Property(e => e.AdminComment).HasMaxLength(4000);
            entity.Property(e => e.AvailableEndDateTime).HasColumnType("datetime");
            entity.Property(e => e.AvailableStartDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CycleLength).HasDefaultValueSql("((1))");
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.DisplayStockAvailability)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.DownloadActivationType).HasDefaultValueSql("((1))");
            entity.Property(e => e.DownloadId).HasColumnName("DownloadID");
            entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.LowStockActivityId).HasColumnName("LowStockActivityID");
            entity.Property(e => e.ManufacturerPartNumber).HasMaxLength(100);
            entity.Property(e => e.MaximumCustomerEnteredPrice)
                .HasDefaultValueSql("((1000))")
                .HasColumnType("money");
            entity.Property(e => e.MinimumCustomerEnteredPrice).HasColumnType("money");
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.NotifyAdminForQuantityBelow).HasDefaultValueSql("((1))");
            entity.Property(e => e.OldPrice).HasColumnType("money");
            entity.Property(e => e.OrderMaximumQuantity).HasDefaultValueSql("((10000))");
            entity.Property(e => e.OrderMinimumQuantity).HasDefaultValueSql("((1))");
            entity.Property(e => e.PictureId).HasColumnName("PictureID");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProductCost).HasColumnType("money");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SampleDownloadId).HasColumnName("SampleDownloadID");
            entity.Property(e => e.Sku)
                .HasMaxLength(100)
                .HasColumnName("SKU");
            entity.Property(e => e.TaxCategoryId).HasColumnName("TaxCategoryID");
            entity.Property(e => e.TotalCycles).HasDefaultValueSql("((1))");
            entity.Property(e => e.UnlimitedDownloads)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.UserAgreementText).HasDefaultValueSql("('')");
            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
            entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Product).WithMany(p => p.NopProductVariants)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Nop_ProductVariant_Nop_Product1");

            entity.HasMany(d => d.Discounts).WithMany(p => p.ProductVariants)
                .UsingEntity<Dictionary<string, object>>(
                    "NopDiscountRestriction",
                    r => r.HasOne<NopDiscount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Nop_DiscountRestriction_Nop_Discount"),
                    l => l.HasOne<NopProductVariant>().WithMany()
                        .HasForeignKey("ProductVariantId")
                        .HasConstraintName("FK_Nop_DiscountRestriction_Nop_ProductVariant"),
                    j =>
                    {
                        j.HasKey("ProductVariantId", "DiscountId").HasName("Nop_DiscountRestriction_PK");
                        j.ToTable("Nop_DiscountRestriction");
                        j.IndexerProperty<int>("ProductVariantId").HasColumnName("ProductVariantID");
                        j.IndexerProperty<int>("DiscountId").HasColumnName("DiscountID");
                    });

            entity.HasMany(d => d.DiscountsNavigation).WithMany(p => p.ProductVariantsNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "NopProductVariantDiscountMapping",
                    r => r.HasOne<NopDiscount>().WithMany()
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Nop_ProductVariant_Discount_Mapping_Nop_Discount"),
                    l => l.HasOne<NopProductVariant>().WithMany()
                        .HasForeignKey("ProductVariantId")
                        .HasConstraintName("FK_Nop_ProductVariant_Discount_Mapping_Nop_ProductVariant"),
                    j =>
                    {
                        j.HasKey("ProductVariantId", "DiscountId").HasName("PKNop_ProductVariant_Discount_Mapping");
                        j.ToTable("Nop_ProductVariant_Discount_Mapping");
                        j.IndexerProperty<int>("ProductVariantId").HasColumnName("ProductVariantID");
                        j.IndexerProperty<int>("DiscountId").HasColumnName("DiscountID");
                    });
        });

        modelBuilder.Entity<NopProductVariantAttributeCombination>(entity =>
        {
            entity.HasKey(e => e.ProductVariantAttributeCombinationId).HasName("Nop_ProductVariantAttributeCombination_PK");

            entity.ToTable("Nop_ProductVariantAttributeCombination");

            entity.Property(e => e.ProductVariantAttributeCombinationId).HasColumnName("ProductVariantAttributeCombinationID");
            entity.Property(e => e.AttributesXml)
                .HasColumnType("xml")
                .HasColumnName("AttributesXML");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopProductVariantAttributeCombinations)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_ProductVariantAttributeCombination_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopProductVariantAttributeValue>(entity =>
        {
            entity.HasKey(e => e.ProductVariantAttributeValueId);

            entity.ToTable("Nop_ProductVariantAttributeValue");

            entity.Property(e => e.ProductVariantAttributeValueId).HasColumnName("ProductVariantAttributeValueID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PriceAdjustment).HasColumnType("money");
            entity.Property(e => e.ProductVariantAttributeId).HasColumnName("ProductVariantAttributeID");
            entity.Property(e => e.WeightAdjustment).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.ProductVariantAttribute).WithMany(p => p.NopProductVariantAttributeValues)
                .HasForeignKey(d => d.ProductVariantAttributeId)
                .HasConstraintName("FK_Nop_ProductVariantAttributeValue_Nop_ProductVariant_ProductAttribute_Mapping");
        });

        modelBuilder.Entity<NopProductVariantAttributeValueLocalized>(entity =>
        {
            entity.HasKey(e => e.ProductVariantAttributeValueLocalizedId);

            entity.ToTable("Nop_ProductVariantAttributeValueLocalized");

            entity.HasIndex(e => new { e.ProductVariantAttributeValueId, e.LanguageId }, "IX_Nop_ProductVariantAttributeValueLocalized_Unique1").IsUnique();

            entity.Property(e => e.ProductVariantAttributeValueLocalizedId).HasColumnName("ProductVariantAttributeValueLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.ProductVariantAttributeValueId).HasColumnName("ProductVariantAttributeValueID");

            entity.HasOne(d => d.Language).WithMany(p => p.NopProductVariantAttributeValueLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_ProductVariantAttributeValueLocalized_Nop_Language");

            entity.HasOne(d => d.ProductVariantAttributeValue).WithMany(p => p.NopProductVariantAttributeValueLocalizeds)
                .HasForeignKey(d => d.ProductVariantAttributeValueId)
                .HasConstraintName("FK_Nop_ProductVariantAttributeValueLocalized_Nop_ProductVariantAttributeValue");
        });

        modelBuilder.Entity<NopProductVariantLocalized>(entity =>
        {
            entity.HasKey(e => e.ProductVariantLocalizedId);

            entity.ToTable("Nop_ProductVariantLocalized");

            entity.HasIndex(e => new { e.ProductVariantId, e.LanguageId }, "IX_Nop_ProductVariantLocalized_Unique1").IsUnique();

            entity.Property(e => e.ProductVariantLocalizedId).HasColumnName("ProductVariantLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(400);
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");

            entity.HasOne(d => d.Language).WithMany(p => p.NopProductVariantLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_ProductVariantLocalized_Nop_Language");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopProductVariantLocalizeds)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_ProductVariantLocalized_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopProductVariantPricelistMapping>(entity =>
        {
            entity.HasKey(e => e.ProductVariantPricelistId);

            entity.ToTable("Nop_ProductVariant_Pricelist_Mapping");

            entity.Property(e => e.ProductVariantPricelistId).HasColumnName("ProductVariantPricelistID");
            entity.Property(e => e.PriceAdjustment).HasColumnType("money");
            entity.Property(e => e.PriceAdjustmentTypeId).HasColumnName("PriceAdjustmentTypeID");
            entity.Property(e => e.PricelistId).HasColumnName("PricelistID");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Pricelist).WithMany(p => p.NopProductVariantPricelistMappings)
                .HasForeignKey(d => d.PricelistId)
                .HasConstraintName("FK_Nop_ProductVariant_Pricelist_Mapping_Nop_Pricelist");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopProductVariantPricelistMappings)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_ProductVariant_Pricelist_Mapping_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopProductVariantProductAttributeMapping>(entity =>
        {
            entity.HasKey(e => e.ProductVariantAttributeId);

            entity.ToTable("Nop_ProductVariant_ProductAttribute_Mapping");

            entity.Property(e => e.ProductVariantAttributeId).HasColumnName("ProductVariantAttributeID");
            entity.Property(e => e.AttributeControlTypeId)
                .HasDefaultValueSql("((1))")
                .HasColumnName("AttributeControlTypeID");
            entity.Property(e => e.ProductAttributeId).HasColumnName("ProductAttributeID");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");
            entity.Property(e => e.TextPrompt)
                .HasMaxLength(200)
                .HasDefaultValueSql("('')");

            entity.HasOne(d => d.ProductAttribute).WithMany(p => p.NopProductVariantProductAttributeMappings)
                .HasForeignKey(d => d.ProductAttributeId)
                .HasConstraintName("FK_Nop_ProductVariant_ProductAttribute_Mapping_Nop_ProductAttribute");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopProductVariantProductAttributeMappings)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_ProductVariant_ProductAttribute_Mapping_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopQbentity>(entity =>
        {
            entity.HasKey(e => e.EntityId);

            entity.ToTable("Nop_QBEntity");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.QbentityId)
                .HasMaxLength(50)
                .HasColumnName("QBEntityId");
            entity.Property(e => e.SeqNum).HasMaxLength(20);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopQueuedEmail>(entity =>
        {
            entity.HasKey(e => e.QueuedEmailId);

            entity.ToTable("Nop_QueuedEmail");

            entity.Property(e => e.QueuedEmailId).HasColumnName("QueuedEmailID");
            entity.Property(e => e.Bcc).HasMaxLength(500);
            entity.Property(e => e.Cc).HasMaxLength(500);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.From).HasMaxLength(500);
            entity.Property(e => e.FromName).HasMaxLength(500);
            entity.Property(e => e.SentOn).HasColumnType("datetime");
            entity.Property(e => e.Subject).HasMaxLength(500);
            entity.Property(e => e.To).HasMaxLength(500);
            entity.Property(e => e.ToName).HasMaxLength(500);
        });

        modelBuilder.Entity<NopRecurringPayment>(entity =>
        {
            entity.HasKey(e => e.RecurringPaymentId).HasName("Nop_RecurringPayment_PK");

            entity.ToTable("Nop_RecurringPayment");

            entity.Property(e => e.RecurringPaymentId).HasColumnName("RecurringPaymentID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.InitialOrderId).HasColumnName("InitialOrderID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopRecurringPaymentHistory>(entity =>
        {
            entity.HasKey(e => e.RecurringPaymentHistoryId).HasName("Nop_RecurringPaymentHistory_PK");

            entity.ToTable("Nop_RecurringPaymentHistory");

            entity.Property(e => e.RecurringPaymentHistoryId).HasColumnName("RecurringPaymentHistoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.RecurringPaymentId).HasColumnName("RecurringPaymentID");

            entity.HasOne(d => d.RecurringPayment).WithMany(p => p.NopRecurringPaymentHistories)
                .HasForeignKey(d => d.RecurringPaymentId)
                .HasConstraintName("FK_Nop_RecurringPaymentHistory_Nop_RecurringPayment");
        });

        modelBuilder.Entity<NopRelatedProduct>(entity =>
        {
            entity.HasKey(e => e.RelatedProductId);

            entity.ToTable("Nop_RelatedProduct");

            entity.HasIndex(e => new { e.ProductId1, e.ProductId2 }, "IX_Nop_RelatedProduct_Unique").IsUnique();

            entity.Property(e => e.RelatedProductId).HasColumnName("RelatedProductID");
            entity.Property(e => e.ProductId1).HasColumnName("ProductID1");
            entity.Property(e => e.ProductId2).HasColumnName("ProductID2");

            entity.HasOne(d => d.ProductId1Navigation).WithMany(p => p.NopRelatedProducts)
                .HasForeignKey(d => d.ProductId1)
                .HasConstraintName("FK_Nop_RelatedProduct_Nop_Product");
        });

        modelBuilder.Entity<NopReturnRequest>(entity =>
        {
            entity.HasKey(e => e.ReturnRequestId);

            entity.ToTable("Nop_ReturnRequest");

            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.ReasonForReturn).HasMaxLength(400);
            entity.Property(e => e.RequestedAction).HasMaxLength(400);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopReturnRequests)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_ReturnRequest_Nop_Customer");

            entity.HasOne(d => d.OrderProductVariant).WithMany(p => p.NopReturnRequests)
                .HasForeignKey(d => d.OrderProductVariantId)
                .HasConstraintName("FK_Nop_ReturnRequest_Nop_OrderProductVariant");
        });

        modelBuilder.Entity<NopRewardPointsHistory>(entity =>
        {
            entity.HasKey(e => e.RewardPointsHistoryId).HasName("Nop_RewardPointsHistory_PK");

            entity.ToTable("Nop_RewardPointsHistory");

            entity.Property(e => e.RewardPointsHistoryId).HasColumnName("RewardPointsHistoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerCurrencyCode).HasMaxLength(5);
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Message).HasMaxLength(1000);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.UsedAmount).HasColumnType("money");
            entity.Property(e => e.UsedAmountInCustomerCurrency).HasColumnType("money");

            entity.HasOne(d => d.Customer).WithMany(p => p.NopRewardPointsHistories)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Nop_RewardPointsHistory_Nop_Customer");
        });

        modelBuilder.Entity<NopSearchLog>(entity =>
        {
            entity.HasKey(e => e.SearchLogId);

            entity.ToTable("Nop_SearchLog");

            entity.Property(e => e.SearchLogId).HasColumnName("SearchLogID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.SearchTerm).HasMaxLength(100);
        });

        modelBuilder.Entity<NopSetting>(entity =>
        {
            entity.HasKey(e => e.SettingId);

            entity.ToTable("Nop_Setting");

            entity.HasIndex(e => e.Name, "IX_Nop_Setting").IsUnique();

            entity.Property(e => e.SettingId).HasColumnName("SettingID");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Value).HasMaxLength(2000);
        });

        modelBuilder.Entity<NopShippingByTotal>(entity =>
        {
            entity.HasKey(e => e.ShippingByTotalId);

            entity.ToTable("Nop_ShippingByTotal");

            entity.Property(e => e.ShippingByTotalId).HasColumnName("ShippingByTotalID");
            entity.Property(e => e.From).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.To).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ShippingMethod).WithMany(p => p.NopShippingByTotals)
                .HasForeignKey(d => d.ShippingMethodId)
                .HasConstraintName("FK_Nop_ShippingByTotal_Nop_ShippingMethod");
        });

        modelBuilder.Entity<NopShippingByWeight>(entity =>
        {
            entity.HasKey(e => e.ShippingByWeightId);

            entity.ToTable("Nop_ShippingByWeight");

            entity.Property(e => e.ShippingByWeightId).HasColumnName("ShippingByWeightID");
            entity.Property(e => e.From).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.To).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ShippingMethod).WithMany(p => p.NopShippingByWeights)
                .HasForeignKey(d => d.ShippingMethodId)
                .HasConstraintName("FK_Nop_ShippingByWeight_Nop_ShippingMethod");
        });

        modelBuilder.Entity<NopShippingByWeightAndCountry>(entity =>
        {
            entity.HasKey(e => e.ShippingByWeightAndCountryId);

            entity.ToTable("Nop_ShippingByWeightAndCountry");

            entity.Property(e => e.ShippingByWeightAndCountryId).HasColumnName("ShippingByWeightAndCountryID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.From).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargeAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingChargePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.To).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Country).WithMany(p => p.NopShippingByWeightAndCountries)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Nop_ShippingByWeightAndCountry_Nop_Country");

            entity.HasOne(d => d.ShippingMethod).WithMany(p => p.NopShippingByWeightAndCountries)
                .HasForeignKey(d => d.ShippingMethodId)
                .HasConstraintName("FK_Nop_ShippingByWeightAndCountry_Nop_ShippingMethod");
        });

        modelBuilder.Entity<NopShippingMethod>(entity =>
        {
            entity.HasKey(e => e.ShippingMethodId).HasName("PK_ShippingMethod");

            entity.ToTable("Nop_ShippingMethod");

            entity.Property(e => e.ShippingMethodId).HasColumnName("ShippingMethodID");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasMany(d => d.Countries).WithMany(p => p.ShippingMethods)
                .UsingEntity<Dictionary<string, object>>(
                    "NopShippingMethodRestrictedCountry",
                    r => r.HasOne<NopCountry>().WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Nop_ShippingMethod_RestrictedCountries_Nop_Country"),
                    l => l.HasOne<NopShippingMethod>().WithMany()
                        .HasForeignKey("ShippingMethodId")
                        .HasConstraintName("FK_Nop_ShippingMethod_RestrictedCountries_Nop_ShippingMethod"),
                    j =>
                    {
                        j.HasKey("ShippingMethodId", "CountryId");
                        j.ToTable("Nop_ShippingMethod_RestrictedCountries");
                        j.IndexerProperty<int>("ShippingMethodId").HasColumnName("ShippingMethodID");
                        j.IndexerProperty<int>("CountryId").HasColumnName("CountryID");
                    });
        });

        modelBuilder.Entity<NopShippingRateComputationMethod>(entity =>
        {
            entity.HasKey(e => e.ShippingRateComputationMethodId).HasName("PK_ShippingRateComputationMethod");

            entity.ToTable("Nop_ShippingRateComputationMethod");

            entity.Property(e => e.ShippingRateComputationMethodId).HasColumnName("ShippingRateComputationMethodID");
            entity.Property(e => e.ClassName).HasMaxLength(500);
            entity.Property(e => e.ConfigureTemplatePath).HasMaxLength(500);
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<NopShoppingCartItem>(entity =>
        {
            entity.HasKey(e => e.ShoppingCartItemId).HasName("Nop_ShoppingCart_PK");

            entity.ToTable("Nop_ShoppingCartItem");

            entity.Property(e => e.ShoppingCartItemId).HasColumnName("ShoppingCartItemID");
            entity.Property(e => e.AttributesXml)
                .HasDefaultValueSql("('')")
                .HasColumnType("xml")
                .HasColumnName("AttributesXML");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.CustomerEnteredPrice).HasColumnType("money");
            entity.Property(e => e.CustomerSessionGuid).HasColumnName("CustomerSessionGUID");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");
            entity.Property(e => e.ShoppingCartTypeId).HasColumnName("ShoppingCartTypeID");
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");

            entity.HasOne(d => d.CustomerSession).WithMany(p => p.NopShoppingCartItems)
                .HasForeignKey(d => d.CustomerSessionGuid)
                .HasConstraintName("FK_Nop_ShoppingCart_Nop_CustomerSession");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopShoppingCartItems)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_ShoppingCart_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopSmsprovider>(entity =>
        {
            entity.HasKey(e => e.SmsproviderId).HasName("PK_SMSProvider");

            entity.ToTable("Nop_SMSProvider");

            entity.Property(e => e.SmsproviderId).HasColumnName("SMSProviderId");
            entity.Property(e => e.ClassName).HasMaxLength(500);
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SystemKeyword).HasMaxLength(500);
        });

        modelBuilder.Entity<NopSpecificationAttribute>(entity =>
        {
            entity.HasKey(e => e.SpecificationAttributeId);

            entity.ToTable("Nop_SpecificationAttribute");

            entity.Property(e => e.SpecificationAttributeId).HasColumnName("SpecificationAttributeID");
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<NopSpecificationAttributeLocalized>(entity =>
        {
            entity.HasKey(e => e.SpecificationAttributeLocalizedId);

            entity.ToTable("Nop_SpecificationAttributeLocalized");

            entity.HasIndex(e => new { e.SpecificationAttributeId, e.LanguageId }, "IX_Nop_SpecificationAttributeLocalized_Unique1").IsUnique();

            entity.Property(e => e.SpecificationAttributeLocalizedId).HasColumnName("SpecificationAttributeLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.SpecificationAttributeId).HasColumnName("SpecificationAttributeID");

            entity.HasOne(d => d.Language).WithMany(p => p.NopSpecificationAttributeLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_SpecificationAttributeLocalized_Nop_Language");

            entity.HasOne(d => d.SpecificationAttribute).WithMany(p => p.NopSpecificationAttributeLocalizeds)
                .HasForeignKey(d => d.SpecificationAttributeId)
                .HasConstraintName("FK_Nop_SpecificationAttributeLocalized_Nop_SpecificationAttribute");
        });

        modelBuilder.Entity<NopSpecificationAttributeOption>(entity =>
        {
            entity.HasKey(e => e.SpecificationAttributeOptionId);

            entity.ToTable("Nop_SpecificationAttributeOption");

            entity.Property(e => e.SpecificationAttributeOptionId).HasColumnName("SpecificationAttributeOptionID");
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("((1))");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.SpecificationAttributeId).HasColumnName("SpecificationAttributeID");

            entity.HasOne(d => d.SpecificationAttribute).WithMany(p => p.NopSpecificationAttributeOptions)
                .HasForeignKey(d => d.SpecificationAttributeId)
                .HasConstraintName("FK_Nop_SpecificationAttributeOption_Nop_SpecificationAttribute");
        });

        modelBuilder.Entity<NopSpecificationAttributeOptionLocalized>(entity =>
        {
            entity.HasKey(e => e.SpecificationAttributeOptionLocalizedId);

            entity.ToTable("Nop_SpecificationAttributeOptionLocalized");

            entity.HasIndex(e => new { e.SpecificationAttributeOptionId, e.LanguageId }, "IX_Nop_SpecificationAttributeOptionLocalized_Unique1").IsUnique();

            entity.Property(e => e.SpecificationAttributeOptionLocalizedId).HasColumnName("SpecificationAttributeOptionLocalizedID");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.SpecificationAttributeOptionId).HasColumnName("SpecificationAttributeOptionID");

            entity.HasOne(d => d.Language).WithMany(p => p.NopSpecificationAttributeOptionLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_SpecificationAttributeOptionLocalized_Nop_Language");

            entity.HasOne(d => d.SpecificationAttributeOption).WithMany(p => p.NopSpecificationAttributeOptionLocalizeds)
                .HasForeignKey(d => d.SpecificationAttributeOptionId)
                .HasConstraintName("FK_Nop_SpecificationAttributeOptionLocalized_Nop_SpecificationAttributeOption");
        });

        modelBuilder.Entity<NopStateProvince>(entity =>
        {
            entity.HasKey(e => e.StateProvinceId);

            entity.ToTable("Nop_StateProvince");

            entity.Property(e => e.StateProvinceId).HasColumnName("StateProvinceID");
            entity.Property(e => e.Abbreviation).HasMaxLength(30);
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Name).HasMaxLength(100);

            entity.HasOne(d => d.Country).WithMany(p => p.NopStateProvinces)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Nop_StateProvince_Nop_Country");
        });

        modelBuilder.Entity<NopTaxCategory>(entity =>
        {
            entity.HasKey(e => e.TaxCategoryId);

            entity.ToTable("Nop_TaxCategory");

            entity.Property(e => e.TaxCategoryId).HasColumnName("TaxCategoryID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<NopTaxProvider>(entity =>
        {
            entity.HasKey(e => e.TaxProviderId);

            entity.ToTable("Nop_TaxProvider");

            entity.Property(e => e.TaxProviderId).HasColumnName("TaxProviderID");
            entity.Property(e => e.ClassName).HasMaxLength(500);
            entity.Property(e => e.ConfigureTemplatePath).HasMaxLength(500);
            entity.Property(e => e.Description).HasMaxLength(4000);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<NopTaxRate>(entity =>
        {
            entity.HasKey(e => e.TaxRateId);

            entity.ToTable("Nop_TaxRate");

            entity.Property(e => e.TaxRateId).HasColumnName("TaxRateID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.StateProvinceId).HasColumnName("StateProvinceID");
            entity.Property(e => e.TaxCategoryId).HasColumnName("TaxCategoryID");
            entity.Property(e => e.Zip).HasMaxLength(50);

            entity.HasOne(d => d.Country).WithMany(p => p.NopTaxRates)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_Nop_TaxRate_Nop_Country");

            entity.HasOne(d => d.TaxCategory).WithMany(p => p.NopTaxRates)
                .HasForeignKey(d => d.TaxCategoryId)
                .HasConstraintName("FK_Nop_TaxRate_Nop_TaxCategory");
        });

        modelBuilder.Entity<NopTierPrice>(entity =>
        {
            entity.HasKey(e => e.TierPriceId).HasName("Nop_TierPrice_PK");

            entity.ToTable("Nop_TierPrice");

            entity.Property(e => e.TierPriceId).HasColumnName("TierPriceID");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProductVariantId).HasColumnName("ProductVariantID");

            entity.HasOne(d => d.ProductVariant).WithMany(p => p.NopTierPrices)
                .HasForeignKey(d => d.ProductVariantId)
                .HasConstraintName("FK_Nop_TierPrice_Nop_ProductVariant");
        });

        modelBuilder.Entity<NopTopic>(entity =>
        {
            entity.HasKey(e => e.TopicId);

            entity.ToTable("Nop_Topic");

            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Password)
                .HasMaxLength(200)
                .HasDefaultValueSql("('')");
        });

        modelBuilder.Entity<NopTopicLocalized>(entity =>
        {
            entity.HasKey(e => e.TopicLocalizedId);

            entity.ToTable("Nop_TopicLocalized");

            entity.Property(e => e.TopicLocalizedId).HasColumnName("TopicLocalizedID");
            entity.Property(e => e.CreatedOn)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.LanguageId).HasColumnName("LanguageID");
            entity.Property(e => e.MetaDescription)
                .HasMaxLength(4000)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.MetaKeywords)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.MetaTitle)
                .HasMaxLength(400)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Title).HasMaxLength(200);
            entity.Property(e => e.TopicId).HasColumnName("TopicID");
            entity.Property(e => e.UpdatedOn)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Language).WithMany(p => p.NopTopicLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_Nop_TopicLocalized_Nop_Language");

            entity.HasOne(d => d.Topic).WithMany(p => p.NopTopicLocalizeds)
                .HasForeignKey(d => d.TopicId)
                .HasConstraintName("FK_Nop_TopicLocalized_Nop_Topic");
        });

        modelBuilder.Entity<NopWarehouse>(entity =>
        {
            entity.HasKey(e => e.WarehouseId).HasName("PK__Nop_Warehouse__0B5CAFEA");

            entity.ToTable("Nop_Warehouse");

            entity.Property(e => e.WarehouseId).HasColumnName("WarehouseID");
            entity.Property(e => e.Address1).HasMaxLength(100);
            entity.Property(e => e.Address2).HasMaxLength(100);
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNumber).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
            entity.Property(e => e.StateProvince).HasMaxLength(100);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
            entity.Property(e => e.ZipPostalCode).HasMaxLength(30);
        });

        modelBuilder.Entity<Number>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("numbers");

            entity.Property(e => e.Number1).HasColumnName("number");
        });

        modelBuilder.Entity<Orderxml>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Orderxml");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CustomerID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Freight)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.RequiredDate).HasColumnType("datetime");
            entity.Property(e => e.ShipAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShipCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShipCountry)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShipName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ShipRegion)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ShippedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Oss>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSS");

            entity.Property(e => e.Col1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("col1");
            entity.Property(e => e.Col10)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col10");
            entity.Property(e => e.Col11)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col11");
            entity.Property(e => e.Col13)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col13");
            entity.Property(e => e.Col14)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col14");
            entity.Property(e => e.Col15)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col15");
            entity.Property(e => e.Col16)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("col16");
            entity.Property(e => e.Col17)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("col17");
            entity.Property(e => e.Col18)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col18");
            entity.Property(e => e.Col19)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col19");
            entity.Property(e => e.Col2)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col2");
            entity.Property(e => e.Col4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("col4");
            entity.Property(e => e.Col5)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col5");
            entity.Property(e => e.Col6)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col6");
            entity.Property(e => e.Col7)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col7");
            entity.Property(e => e.Col8)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("col8");
        });

        modelBuilder.Entity<Ossa>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSSA");

            entity.Property(e => e.Corporatename)
                .HasMaxLength(255)
                .HasColumnName("CORPORATENAME");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Middlename)
                .HasMaxLength(255)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Officeaddressline1)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE1");
            entity.Property(e => e.Officeaddressline2)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE2");
            entity.Property(e => e.Officecity)
                .HasMaxLength(255)
                .HasColumnName("OFFICECITY");
            entity.Property(e => e.Officecountry)
                .HasMaxLength(255)
                .HasColumnName("OFFICECOUNTRY");
            entity.Property(e => e.Officefax).HasColumnName("OFFICEFAX");
            entity.Property(e => e.Officephone).HasColumnName("OFFICEPHONE");
            entity.Property(e => e.Officephoneext).HasColumnName("OFFICEPHONEEXT");
            entity.Property(e => e.Officepin).HasColumnName("OFFICEPIN");
            entity.Property(e => e.Officestate)
                .HasMaxLength(255)
                .HasColumnName("OFFICESTATE");
            entity.Property(e => e.Passwrd)
                .HasMaxLength(255)
                .HasColumnName("PASSWRD");
            entity.Property(e => e.Residaddressline1)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE1");
            entity.Property(e => e.Residaddressline2)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE2");
            entity.Property(e => e.Residcity)
                .HasMaxLength(255)
                .HasColumnName("RESIDCITY");
            entity.Property(e => e.Residcountry)
                .HasMaxLength(255)
                .HasColumnName("RESIDCOUNTRY");
            entity.Property(e => e.Residphone).HasColumnName("RESIDPHONE");
            entity.Property(e => e.Residpin).HasColumnName("RESIDPIN");
            entity.Property(e => e.Residstate)
                .HasMaxLength(255)
                .HasColumnName("RESIDSTATE");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Ossa1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSSA1");

            entity.Property(e => e.Corporatename)
                .HasMaxLength(255)
                .HasColumnName("CORPORATENAME");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Middlename)
                .HasMaxLength(255)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Officeaddressline1)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE1");
            entity.Property(e => e.Officeaddressline2)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE2");
            entity.Property(e => e.Officecity)
                .HasMaxLength(255)
                .HasColumnName("OFFICECITY");
            entity.Property(e => e.Officecountry)
                .HasMaxLength(255)
                .HasColumnName("OFFICECOUNTRY");
            entity.Property(e => e.Officefax).HasColumnName("OFFICEFAX");
            entity.Property(e => e.Officephone).HasColumnName("OFFICEPHONE");
            entity.Property(e => e.Officephoneext).HasColumnName("OFFICEPHONEEXT");
            entity.Property(e => e.Officepin).HasColumnName("OFFICEPIN");
            entity.Property(e => e.Officestate)
                .HasMaxLength(255)
                .HasColumnName("OFFICESTATE");
            entity.Property(e => e.Passwrd)
                .HasMaxLength(255)
                .HasColumnName("PASSWRD");
            entity.Property(e => e.Residaddressline1)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE1");
            entity.Property(e => e.Residaddressline2)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE2");
            entity.Property(e => e.Residcity)
                .HasMaxLength(255)
                .HasColumnName("RESIDCITY");
            entity.Property(e => e.Residcountry)
                .HasMaxLength(255)
                .HasColumnName("RESIDCOUNTRY");
            entity.Property(e => e.Residphone).HasColumnName("RESIDPHONE");
            entity.Property(e => e.Residpin).HasColumnName("RESIDPIN");
            entity.Property(e => e.Residstate)
                .HasMaxLength(255)
                .HasColumnName("RESIDSTATE");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Ossagent1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSSAgent1");

            entity.Property(e => e.Corporatename)
                .HasMaxLength(255)
                .HasColumnName("CORPORATENAME");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Middlename)
                .HasMaxLength(255)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Officeaddressline1)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE1");
            entity.Property(e => e.Officeaddressline2)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE2");
            entity.Property(e => e.Officecity)
                .HasMaxLength(255)
                .HasColumnName("OFFICECITY");
            entity.Property(e => e.Officecountry)
                .HasMaxLength(255)
                .HasColumnName("OFFICECOUNTRY");
            entity.Property(e => e.Officefax).HasColumnName("OFFICEFAX");
            entity.Property(e => e.Officephone).HasColumnName("OFFICEPHONE");
            entity.Property(e => e.Officephoneext).HasColumnName("OFFICEPHONEEXT");
            entity.Property(e => e.Officepin).HasColumnName("OFFICEPIN");
            entity.Property(e => e.Officestate)
                .HasMaxLength(255)
                .HasColumnName("OFFICESTATE");
            entity.Property(e => e.Passwrd)
                .HasMaxLength(255)
                .HasColumnName("PASSWRD");
            entity.Property(e => e.Residaddressline1)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE1");
            entity.Property(e => e.Residaddressline2)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE2");
            entity.Property(e => e.Residcity)
                .HasMaxLength(255)
                .HasColumnName("RESIDCITY");
            entity.Property(e => e.Residcountry)
                .HasMaxLength(255)
                .HasColumnName("RESIDCOUNTRY");
            entity.Property(e => e.Residphone).HasColumnName("RESIDPHONE");
            entity.Property(e => e.Residpin).HasColumnName("RESIDPIN");
            entity.Property(e => e.Residstate)
                .HasMaxLength(255)
                .HasColumnName("RESIDSTATE");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Ossagent2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("OSSAgent2");

            entity.Property(e => e.Corporatename)
                .HasMaxLength(255)
                .HasColumnName("CORPORATENAME");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("EMAIL");
            entity.Property(e => e.Firstname)
                .HasMaxLength(255)
                .HasColumnName("FIRSTNAME");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Lastname)
                .HasMaxLength(255)
                .HasColumnName("LASTNAME");
            entity.Property(e => e.Middlename)
                .HasMaxLength(255)
                .HasColumnName("MIDDLENAME");
            entity.Property(e => e.Officeaddressline1)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE1");
            entity.Property(e => e.Officeaddressline2)
                .HasMaxLength(255)
                .HasColumnName("OFFICEADDRESSLINE2");
            entity.Property(e => e.Officecity)
                .HasMaxLength(255)
                .HasColumnName("OFFICECITY");
            entity.Property(e => e.Officecountry)
                .HasMaxLength(255)
                .HasColumnName("OFFICECOUNTRY");
            entity.Property(e => e.Officefax).HasColumnName("OFFICEFAX");
            entity.Property(e => e.Officephone).HasColumnName("OFFICEPHONE");
            entity.Property(e => e.Officephoneext).HasColumnName("OFFICEPHONEEXT");
            entity.Property(e => e.Officepin).HasColumnName("OFFICEPIN");
            entity.Property(e => e.Officestate)
                .HasMaxLength(255)
                .HasColumnName("OFFICESTATE");
            entity.Property(e => e.Passwrd)
                .HasMaxLength(255)
                .HasColumnName("PASSWRD");
            entity.Property(e => e.Residaddressline1)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE1");
            entity.Property(e => e.Residaddressline2)
                .HasMaxLength(255)
                .HasColumnName("RESIDADDRESSLINE2");
            entity.Property(e => e.Residcity)
                .HasMaxLength(255)
                .HasColumnName("RESIDCITY");
            entity.Property(e => e.Residcountry)
                .HasMaxLength(255)
                .HasColumnName("RESIDCOUNTRY");
            entity.Property(e => e.Residphone).HasColumnName("RESIDPHONE");
            entity.Property(e => e.Residpin).HasColumnName("RESIDPIN");
            entity.Property(e => e.Residstate)
                .HasMaxLength(255)
                .HasColumnName("RESIDSTATE");
            entity.Property(e => e.Sno).HasColumnName("SNo");
            entity.Property(e => e.Userid)
                .HasMaxLength(255)
                .HasColumnName("USERID");
        });

        modelBuilder.Entity<Patel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("patel");

            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Patientdetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("patientdetails");

            entity.Property(e => e.Colour)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("COLOUR");
            entity.Property(e => e.Dhooh)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("DHOOH");
            entity.Property(e => e.Diseasesymptoms)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("DISEASESYMPTOMS");
            entity.Property(e => e.Elephant)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ELEPHANT");
            entity.Property(e => e.Eyes)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("EYES");
            entity.Property(e => e.Frog)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("FROG");
            entity.Property(e => e.Hen)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("HEN");
            entity.Property(e => e.K1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K4)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K5)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K6)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K7)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K8)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.K9)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Leech)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("LEECH");
            entity.Property(e => e.Motion)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("MOTION");
            entity.Property(e => e.Nails)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NAILS");
            entity.Property(e => e.Opdno)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("opdno");
            entity.Property(e => e.P1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P4)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P5)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P6)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P7)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P8)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.P9)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Peacock)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PEACOCK");
            entity.Property(e => e.Possiblities)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("POSSIBLITIES");
            entity.Property(e => e.Remadies)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("REMADIES");
            entity.Property(e => e.Snake)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SNAKE");
            entity.Property(e => e.Speech)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SPEECH");
            entity.Property(e => e.Swan)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("SWAN");
            entity.Property(e => e.Temp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TEMP");
            entity.Property(e => e.Thithar)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("THITHAR");
            entity.Property(e => e.Tongue)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TONGUE");
            entity.Property(e => e.Tortoise)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("TORTOISE");
            entity.Property(e => e.Urine)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("URINE");
            entity.Property(e => e.V1)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V2)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V3)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V4)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V5)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V6)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V7)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V8)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.V9)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.OpdnoNavigation).WithMany()
                .HasForeignKey(d => d.Opdno)
                .HasConstraintName("FK__patientde__opdno__473FBD23");
        });

        modelBuilder.Entity<Patientmaster>(entity =>
        {
            entity.HasKey(e => e.Opdno).HasName("PK__patientm__A2AAA380E37132B5");

            entity.ToTable("patientmaster");

            entity.Property(e => e.Opdno)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("opdno");
            entity.Property(e => e.Age)
                .HasColumnType("decimal(18, 0)")
                .HasColumnName("age");
            entity.Property(e => e.Camp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("camp");
            entity.Property(e => e.Mobileno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("mobileno");
            entity.Property(e => e.Name)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Place)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("place");
            entity.Property(e => e.Registerdate)
                .HasColumnType("date")
                .HasColumnName("registerdate");
            entity.Property(e => e.Registertime).HasColumnName("registertime");
            entity.Property(e => e.Sex)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sex");
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pedido");

            entity.HasIndex(e => e.Id, "ix").IsClustered();

            entity.Property(e => e.Data).HasColumnType("datetime");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.Valor).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Vendedor)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__person__3213E83F5B5D00A8");

            entity.ToTable("person");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Firstname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("firstname");
            entity.Property(e => e.Lastname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("lastname");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Product");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(2000)
                .IsUnicode(false);
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Unit)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UnitPrice).HasColumnType("decimal(18, 0)");
        });

        modelBuilder.Entity<Product1>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("pk_products_pid");

            entity.ToTable("Products");

            entity.Property(e => e.ProductId)
                .ValueGeneratedNever()
                .HasColumnName("ProductID");
            entity.Property(e => e.ProductName)
                .HasMaxLength(25)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductDatum>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Price)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.ProductName)
                .HasMaxLength(255)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ProductInventoryWcf>(entity =>
        {
            entity.HasKey(e => e.ProductInventoryId).HasName("PK_ProductInventoryWCF_1");

            entity.ToTable("ProductInventoryWCF", "db_owner");

            entity.Property(e => e.ProductInventoryId)
                .ValueGeneratedNever()
                .HasColumnName("ProductInventoryID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.Quantity).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductInventoryWcfs)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_ProductInventoryWCF_ProductInventoryWCF");
        });

        modelBuilder.Entity<ProductPurchase>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ProductPurchase");

            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.PurchaseDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<ProductSale>(entity =>
        {
            entity.HasKey(e => e.SalesId).HasName("pk_productSales_sid");

            entity.Property(e => e.SalesId)
                .ValueGeneratedNever()
                .HasColumnName("SalesID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.SalesPerson)
                .HasMaxLength(25)
                .IsUnicode(false);

            entity.HasOne(d => d.Product).WithMany(p => p.ProductSales)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("fk_productSales_pid");
        });

        modelBuilder.Entity<ProductWcf>(entity =>
        {
            entity.HasKey(e => e.ProductId);

            entity.ToTable("ProductWCF", "db_owner");

            entity.Property(e => e.ProductId)
                .ValueGeneratedNever()
                .HasColumnName("ProductID");
            entity.Property(e => e.Color)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProductName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductNumber)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Weight).HasColumnType("decimal(5, 2)");
        });

        modelBuilder.Entity<ResDept>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_dept");

            entity.Property(e => e.CdepartmentName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cdepartment_name");
            entity.Property(e => e.IdeptId).HasColumnName("idept_id");
            entity.Property(e => e.IempId).HasColumnName("iemp_id");
        });

        modelBuilder.Entity<ResDeptRowlock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_dept_rowlock");

            entity.Property(e => e.Ideptid).HasColumnName("ideptid");
        });

        modelBuilder.Entity<ResDesignation>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_designation");

            entity.Property(e => e.CdesignName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cdesign_name");
            entity.Property(e => e.Ideptid).HasColumnName("ideptid");
        });

        modelBuilder.Entity<ResEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_emp");

            entity.Property(e => e.CempName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cemp_name");
            entity.Property(e => e.DbirthDate)
                .HasColumnType("datetime")
                .HasColumnName("dbirth_date");
            entity.Property(e => e.Iempid).HasColumnName("iempid");
            entity.Property(e => e.Isalary).HasColumnName("isalary");
        });

        modelBuilder.Entity<ResEmployee>(entity =>
        {
            entity.HasKey(e => e.IempId).HasName("PK__res_empl__B402EC336DB809C1");

            entity.ToTable("res_employees");

            entity.Property(e => e.IempId)
                .ValueGeneratedNever()
                .HasColumnName("iemp_id");
            entity.Property(e => e.CdeptName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cdept_name");
            entity.Property(e => e.IdeptId).HasColumnName("idept_id");
            entity.Property(e => e.Salary).HasColumnName("salary");
        });

        modelBuilder.Entity<ResJob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_job");

            entity.Property(e => e.CcompanyName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("ccompany_name");
            entity.Property(e => e.CjobName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cjob_name");
            entity.Property(e => e.Datasource)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("datasource");
            entity.Property(e => e.IjobId).HasColumnName("ijob_id");
        });

        modelBuilder.Entity<ResPlacement>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_placement");

            entity.Property(e => e.Cplace)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cplace");
            entity.Property(e => e.IjobId).HasColumnName("ijob_id");
            entity.Property(e => e.IplacementId).HasColumnName("iplacement_id");
        });

        modelBuilder.Entity<ResProduction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("res_production", tb =>
                {
                    tb.HasTrigger("trg2_res_production");
                    tb.HasTrigger("trg_res_production");
                });

            entity.Property(e => e.CproName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cpro_name");
            entity.Property(e => e.IproId).HasColumnName("ipro_id");
            entity.Property(e => e.IproPrice).HasColumnName("ipro_price");
        });

        modelBuilder.Entity<ResSale>(entity =>
        {
            entity.HasKey(e => e.IsaleId).HasName("pk_res_sale");

            entity.ToTable("res_sale", tb => tb.HasTrigger("trg_res_sale"));

            entity.Property(e => e.IsaleId)
                .ValueGeneratedNever()
                .HasColumnName("isale_id");
            entity.Property(e => e.CsaleProduct)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("csale_product");
            entity.Property(e => e.ItotalSale).HasColumnName("itotal_sale");
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Month)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Product)
                .HasMaxLength(255)
                .HasColumnName("product");
        });

        modelBuilder.Entity<SampleImage>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SampleImage");

            entity.Property(e => e.ImageId).HasColumnName("ImageID");
            entity.Property(e => e.ImageName).HasColumnType("image");
        });

        modelBuilder.Entity<Split>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("split");

            entity.Property(e => e.Item)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("item");
        });

        modelBuilder.Entity<SqlServerDestination>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("SQL Server Destination");

            entity.Property(e => e.CityName).HasMaxLength(255);
            entity.Property(e => e.DistrictsName).HasMaxLength(255);
            entity.Property(e => e.PostOfficeName).HasMaxLength(255);
            entity.Property(e => e.StateName).HasMaxLength(255);
        });

        modelBuilder.Entity<Stft1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("STFt1");

            entity.Property(e => e.T1).HasColumnName("t1");
        });

        modelBuilder.Entity<Stft2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("STFt2");

            entity.Property(e => e.T1).HasColumnName("t1");
        });

        modelBuilder.Entity<Stft3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("STFt3");

            entity.Property(e => e.T1).HasColumnName("t1");
        });

        modelBuilder.Entity<Student>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("student");

            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Per).HasColumnName("per");
            entity.Property(e => e.Subj1).HasColumnName("subj1");
            entity.Property(e => e.Subj2).HasColumnName("subj2");
            entity.Property(e => e.Subj3).HasColumnName("subj3");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<StudentMark>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("student_marks");

            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.Percentage).HasColumnName("percentage");
            entity.Property(e => e.StudentId).HasColumnName("student_id");
            entity.Property(e => e.Subject1).HasColumnName("subject_1");
            entity.Property(e => e.Subject2).HasColumnName("subject_2");
            entity.Property(e => e.Subject3).HasColumnName("subject_3");
            entity.Property(e => e.Total).HasColumnName("total");
        });

        modelBuilder.Entity<SyncTest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sync_tes__3213E83F0BBCA29D");

            entity.ToTable("sync_test", tb => tb.HasTrigger("trgSync"));

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<SyncTest1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__sync_tes__3213E83F0F8D3381");

            entity.ToTable("sync_test1");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.Name)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<T>(entity =>
        {
            entity.HasKey(e => e.C1).HasName("PK__t__3213663B76EBA2E9");

            entity.ToTable("t");

            entity.Property(e => e.C1)
                .ValueGeneratedNever()
                .HasColumnName("c1");
            entity.Property(e => e.C2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("c2");
        });

        modelBuilder.Entity<T101>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("T101");

            entity.HasIndex(e => e.C, "I1")
                .IsUnique()
                .IsClustered();

            entity.HasIndex(e => e.C, "I2");

            entity.Property(e => e.C).HasComputedColumnSql("([A]/[B])", false);
        });

        modelBuilder.Entity<T102>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("T102");

            entity.Property(e => e.C).HasComputedColumnSql("([A]/[B])", false);
        });

        modelBuilder.Entity<T11>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("t11");

            entity.Property(e => e.C1)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("c1");
            entity.Property(e => e.C2)
                .HasMaxLength(40)
                .HasColumnName("c2");
        });

        modelBuilder.Entity<T1emp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("t1emp");

            entity.Property(e => e.IntEmpId).HasColumnName("intEmpID");
            entity.Property(e => e.StrEmpCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strEmpCode");
            entity.Property(e => e.StrEmpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strEmpName");
        });

        modelBuilder.Entity<T2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("t2");

            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.IsMsShipped).HasColumnName("is_ms_shipped");
            entity.Property(e => e.IsPublished).HasColumnName("is_published");
            entity.Property(e => e.IsSchemaPublished).HasColumnName("is_schema_published");
            entity.Property(e => e.ModifyDate)
                .HasColumnType("datetime")
                .HasColumnName("modify_date");
            entity.Property(e => e.Name)
                .HasMaxLength(128)
                .HasColumnName("name");
            entity.Property(e => e.ObjectId).HasColumnName("object_id");
            entity.Property(e => e.ParentObjectId).HasColumnName("parent_object_id");
            entity.Property(e => e.PrincipalId).HasColumnName("principal_id");
            entity.Property(e => e.SchemaId).HasColumnName("schema_id");
            entity.Property(e => e.Type)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .UseCollation("Latin1_General_CI_AS_KS_WS")
                .HasColumnName("type");
            entity.Property(e => e.TypeDesc)
                .HasMaxLength(60)
                .UseCollation("Latin1_General_CI_AS_KS_WS")
                .HasColumnName("type_desc");
        });

        modelBuilder.Entity<T3>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("t3");

            entity.Property(e => e.No).HasColumnName("no");
        });

        modelBuilder.Entity<Table1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("table1");

            entity.Property(e => e.Age).HasColumnName("age");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Table2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("table2");

            entity.Property(e => e.Age)
                .HasDefaultValueSql("((20))")
                .HasColumnName("age");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<TableA>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tableA");

            entity.Property(e => e.ColA)
                .HasColumnType("sql_variant")
                .HasColumnName("colA");
            entity.Property(e => e.ColB).HasColumnName("colB");
        });

        modelBuilder.Entity<TableauthorMaster>(entity =>
        {
            entity.HasKey(e => e.AuthorId).HasName("PK__tableaut__86516BCF14530EE4");

            entity.ToTable("tableauthor_master");

            entity.Property(e => e.AuthorId)
                .ValueGeneratedNever()
                .HasColumnName("author_id");
            entity.Property(e => e.AuthorName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("author_name");
            entity.Property(e => e.BookName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("book_name");
            entity.Property(e => e.CommandId).HasColumnName("Command_id");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("country");
            entity.Property(e => e.CreateBy).HasColumnName("create_by");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("create_date");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Create_IP");
            entity.Property(e => e.IsActive).HasColumnName("Is_active");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<Tbl1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl1");

            entity.Property(e => e.Check)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Check1)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Check2)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Check5)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Fname)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("FName");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Id11).HasColumnName("ID11");
            entity.Property(e => e.Name).HasColumnType("money");
            entity.Property(e => e.Name1)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tbl2>(entity =>
        {
            entity.ToTable("tbl2");

            entity.HasIndex(e => new { e.Id, e.Name1 }, "IX_tbl2").IsUnique();

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Name1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name12)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NAME12");
        });

        modelBuilder.Entity<TblAircommCriteriaMaster>(entity =>
        {
            entity.HasKey(e => e.CommCriteriaId).HasName("PK__tblAIRCo__12C9EE167F186B44");

            entity.ToTable("tblAIRCommCriteriaMaster");

            entity.Property(e => e.CommCriteriaId)
                .ValueGeneratedNever()
                .HasColumnName("CommCriteriaID");
            entity.Property(e => e.AirlineId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("AirlineID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.BaggageAllowance)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookingClass)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.ClassIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("ClassIDs");
            entity.Property(e => e.CommCriteriaCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CommCriteriaDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Commission).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CommissionAmt).HasColumnType("money");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DestinationContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DestinationContinentIDs");
            entity.Property(e => e.Endorsement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FareBasisCode)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.FlightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IataisPaxTotalFlightAmount).HasColumnName("IATAIsPaxTotalFlightAmount");
            entity.Property(e => e.InboundChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.IsApiwise).HasColumnName("IsAPIWise");
            entity.Property(e => e.IsPlbonMileage).HasColumnName("IsPLBOnMileage");
            entity.Property(e => e.NotValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NotValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OutboundChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.PlbisPaxTotalFlightAmount).HasColumnName("PLBIsPaxTotalFlightAmount");
            entity.Property(e => e.Pnrosifield)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("PNROSIField");
            entity.Property(e => e.SourceContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SourceContinentIDs");
            entity.Property(e => e.TourCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.ValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblAircommCriteriaMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblAIRCo__6B4108E67B47DA60");

            entity.ToTable("tblAIRCommCriteriaMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblAircommCriteriaMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAIRCo__4D7B4ADD7777497C");

            entity.ToTable("tblAIRCommCriteriaMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewadvanceReservationNoOfDays).HasColumnName("NEWAdvanceReservationNoOfDays");
            entity.Property(e => e.NewairlineId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWAirlineID");
            entity.Property(e => e.Newapiid).HasColumnName("NEWAPIID");
            entity.Property(e => e.NewbaggageAllowance)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBaggageAllowance");
            entity.Property(e => e.NewbookingClass)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWBookingClass");
            entity.Property(e => e.NewchargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("NEWChargePerStopOver");
            entity.Property(e => e.NewclassIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWClassIDs");
            entity.Property(e => e.NewcommCriteriaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NEWCommCriteriaCode");
            entity.Property(e => e.NewcommCriteriaDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWCommCriteriaDesc");
            entity.Property(e => e.Newcommission)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWCommission");
            entity.Property(e => e.NewcommissionAmt)
                .HasColumnType("money")
                .HasColumnName("NEWCommissionAmt");
            entity.Property(e => e.NewdestinationContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWDestinationContinentIDs");
            entity.Property(e => e.Newendorsement)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWEndorsement");
            entity.Property(e => e.NewfareBasisCode)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("NEWFareBasisCode");
            entity.Property(e => e.NewflightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWFlightAllowed");
            entity.Property(e => e.NewflightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWFlightNotAllowed");
            entity.Property(e => e.NewiataisPaxTotalFlightAmount).HasColumnName("NEWIATAIsPaxTotalFlightAmount");
            entity.Property(e => e.NewinboundChargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("NEWInboundChargePerStopOver");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewisAdvanceReservationWise).HasColumnName("NEWIsAdvanceReservationWise");
            entity.Property(e => e.NewisAllowedDestinationContinent).HasColumnName("NEWIsAllowedDestinationContinent");
            entity.Property(e => e.NewisAllowedSourceContinent).HasColumnName("NEWIsAllowedSourceContinent");
            entity.Property(e => e.NewisApiwise).HasColumnName("NEWIsAPIWise");
            entity.Property(e => e.NewisBookingClassAllowed).HasColumnName("NEWIsBookingClassAllowed");
            entity.Property(e => e.NewisBookingClassWise).HasColumnName("NEWIsBookingClassWise");
            entity.Property(e => e.NewisBookingDateWise).HasColumnName("NEWIsBookingDateWise");
            entity.Property(e => e.NewisCabinClassWise).HasColumnName("NEWIsCabinClassWise");
            entity.Property(e => e.NewisCircularTrip).HasColumnName("NEWIsCircularTrip");
            entity.Property(e => e.NewisCommTypePercentage).HasColumnName("NEWIsCommTypePercentage");
            entity.Property(e => e.NewisContinentWise).HasColumnName("NEWIsContinentWise");
            entity.Property(e => e.NewisCountryWise).HasColumnName("NEWIsCountryWise");
            entity.Property(e => e.NewisDepartureDateWise).HasColumnName("NEWIsDepartureDateWise");
            entity.Property(e => e.NewisDestinationContinent).HasColumnName("NEWIsDestinationContinent");
            entity.Property(e => e.NewisDomestic).HasColumnName("NEWIsDomestic");
            entity.Property(e => e.NewisFareBasisCodeAllowed).HasColumnName("NEWIsFareBasisCodeAllowed");
            entity.Property(e => e.NewisFareBasisCodeWise).HasColumnName("NEWIsFareBasisCodeWise");
            entity.Property(e => e.NewisInboundStopOverWise).HasColumnName("NEWIsInboundStopOverWise");
            entity.Property(e => e.NewisMaximumStayWise).HasColumnName("NEWIsMaximumStayWise");
            entity.Property(e => e.NewisMinimumStayWise).HasColumnName("NEWIsMinimumStayWise");
            entity.Property(e => e.NewisNotValidFromStation).HasColumnName("NEWIsNotValidFromStation");
            entity.Property(e => e.NewisNotValidToStation).HasColumnName("NEWIsNotValidToStation");
            entity.Property(e => e.NewisOpenJawWise).HasColumnName("NEWIsOpenJawWise");
            entity.Property(e => e.NewisOutboundStopOverWise).HasColumnName("NEWIsOutboundStopOverWise");
            entity.Property(e => e.NewisPlbonMileage).HasColumnName("NEWIsPLBOnMileage");
            entity.Property(e => e.NewisRoundTrip).HasColumnName("NEWIsRoundTrip");
            entity.Property(e => e.NewisRoutingWise).HasColumnName("NEWIsRoutingWise");
            entity.Property(e => e.NewisSaleCountryWise).HasColumnName("NEWIsSaleCountryWise");
            entity.Property(e => e.NewisSectorWise).HasColumnName("NEWIsSectorWise");
            entity.Property(e => e.NewisSourceContinent).HasColumnName("NEWIsSourceContinent");
            entity.Property(e => e.NewisStationWise).HasColumnName("NEWIsStationWise");
            entity.Property(e => e.NewisTotalStopOverWise).HasColumnName("NEWIsTotalStopOverWise");
            entity.Property(e => e.NewisTourCodeWise).HasColumnName("NEWIsTourCodeWise");
            entity.Property(e => e.NewisTransferTransitWise).HasColumnName("NEWIsTransferTransitWise");
            entity.Property(e => e.NewisValidFromStation).HasColumnName("NEWIsValidFromStation");
            entity.Property(e => e.NewisValidToStation).HasColumnName("NEWIsValidToStation");
            entity.Property(e => e.NewmaxStayNoOfDays).HasColumnName("NEWMaxStayNoOfDays");
            entity.Property(e => e.NewminStayNoOfDays).HasColumnName("NEWMinStayNoOfDays");
            entity.Property(e => e.NewnoOfTransferTransitAllowed).HasColumnName("NEWNoOfTransferTransitAllowed");
            entity.Property(e => e.NewnotValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWNotValidFromStationCode");
            entity.Property(e => e.NewnotValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWNotValidToStationCode");
            entity.Property(e => e.NewoutboundChargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("NEWOutboundChargePerStopOver");
            entity.Property(e => e.NewplbisPaxTotalFlightAmount).HasColumnName("NEWPLBIsPaxTotalFlightAmount");
            entity.Property(e => e.Newpnrosifield)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("NEWPNROSIField");
            entity.Property(e => e.NewsourceContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWSourceContinentIDs");
            entity.Property(e => e.NewtotNoOfInboundStopOverAllowed).HasColumnName("NEWTotNoOfInboundStopOverAllowed");
            entity.Property(e => e.NewtotNoOfOutboundStopOverAllowed).HasColumnName("NEWTotNoOfOutboundStopOverAllowed");
            entity.Property(e => e.NewtotNoOfStopOverAllowed).HasColumnName("NEWTotNoOfStopOverAllowed");
            entity.Property(e => e.NewtourCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWTourCode");
            entity.Property(e => e.NewvalidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWValidFromStationCode");
            entity.Property(e => e.NewvalidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("NEWValidToStationCode");
            entity.Property(e => e.OldadvanceReservationNoOfDays).HasColumnName("OLDAdvanceReservationNoOfDays");
            entity.Property(e => e.OldairlineId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDAirlineID");
            entity.Property(e => e.Oldapiid).HasColumnName("OLDAPIID");
            entity.Property(e => e.OldbaggageAllowance)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBaggageAllowance");
            entity.Property(e => e.OldbookingClass)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDBookingClass");
            entity.Property(e => e.OldchargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("OLDChargePerStopOver");
            entity.Property(e => e.OldclassIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDClassIDs");
            entity.Property(e => e.OldcommCriteriaCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OLDCommCriteriaCode");
            entity.Property(e => e.OldcommCriteriaDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDCommCriteriaDesc");
            entity.Property(e => e.Oldcommission)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDCommission");
            entity.Property(e => e.OldcommissionAmt)
                .HasColumnType("money")
                .HasColumnName("OLDCommissionAmt");
            entity.Property(e => e.OlddestinationContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDDestinationContinentIDs");
            entity.Property(e => e.Oldendorsement)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDEndorsement");
            entity.Property(e => e.OldfareBasisCode)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("OLDFareBasisCode");
            entity.Property(e => e.OldflightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDFlightAllowed");
            entity.Property(e => e.OldflightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDFlightNotAllowed");
            entity.Property(e => e.OldiataisPaxTotalFlightAmount).HasColumnName("OLDIATAIsPaxTotalFlightAmount");
            entity.Property(e => e.OldinboundChargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("OLDInboundChargePerStopOver");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldisAdvanceReservationWise).HasColumnName("OLDIsAdvanceReservationWise");
            entity.Property(e => e.OldisAllowedDestinationContinent).HasColumnName("OLDIsAllowedDestinationContinent");
            entity.Property(e => e.OldisAllowedSourceContinent).HasColumnName("OLDIsAllowedSourceContinent");
            entity.Property(e => e.OldisApiwise).HasColumnName("OLDIsAPIWise");
            entity.Property(e => e.OldisBookingClassAllowed).HasColumnName("OLDIsBookingClassAllowed");
            entity.Property(e => e.OldisBookingClassWise).HasColumnName("OLDIsBookingClassWise");
            entity.Property(e => e.OldisBookingDateWise).HasColumnName("OLDIsBookingDateWise");
            entity.Property(e => e.OldisCabinClassWise).HasColumnName("OLDIsCabinClassWise");
            entity.Property(e => e.OldisCircularTrip).HasColumnName("OLDIsCircularTrip");
            entity.Property(e => e.OldisCommTypePercentage).HasColumnName("OLDIsCommTypePercentage");
            entity.Property(e => e.OldisContinentWise).HasColumnName("OLDIsContinentWise");
            entity.Property(e => e.OldisCountryWise).HasColumnName("OLDIsCountryWise");
            entity.Property(e => e.OldisDepartureDateWise).HasColumnName("OLDIsDepartureDateWise");
            entity.Property(e => e.OldisDestinationContinent).HasColumnName("OLDIsDestinationContinent");
            entity.Property(e => e.OldisDomestic).HasColumnName("OLDIsDomestic");
            entity.Property(e => e.OldisFareBasisCodeAllowed).HasColumnName("OLDIsFareBasisCodeAllowed");
            entity.Property(e => e.OldisFareBasisCodeWise).HasColumnName("OLDIsFareBasisCodeWise");
            entity.Property(e => e.OldisInboundStopOverWise).HasColumnName("OLDIsInboundStopOverWise");
            entity.Property(e => e.OldisMaximumStayWise).HasColumnName("OLDIsMaximumStayWise");
            entity.Property(e => e.OldisMinimumStayWise).HasColumnName("OLDIsMinimumStayWise");
            entity.Property(e => e.OldisNotValidFromStation).HasColumnName("OLDIsNotValidFromStation");
            entity.Property(e => e.OldisNotValidToStation).HasColumnName("OLDIsNotValidToStation");
            entity.Property(e => e.OldisOpenJawWise).HasColumnName("OLDIsOpenJawWise");
            entity.Property(e => e.OldisOutboundStopOverWise).HasColumnName("OLDIsOutboundStopOverWise");
            entity.Property(e => e.OldisPlbonMileage).HasColumnName("OLDIsPLBOnMileage");
            entity.Property(e => e.OldisRoundTrip).HasColumnName("OLDIsRoundTrip");
            entity.Property(e => e.OldisRoutingWise).HasColumnName("OLDIsRoutingWise");
            entity.Property(e => e.OldisSaleCountryWise).HasColumnName("OLDIsSaleCountryWise");
            entity.Property(e => e.OldisSectorWise).HasColumnName("OLDIsSectorWise");
            entity.Property(e => e.OldisSourceContinent).HasColumnName("OLDIsSourceContinent");
            entity.Property(e => e.OldisStationWise).HasColumnName("OLDIsStationWise");
            entity.Property(e => e.OldisTotalStopOverWise).HasColumnName("OLDIsTotalStopOverWise");
            entity.Property(e => e.OldisTourCodeWise).HasColumnName("OLDIsTourCodeWise");
            entity.Property(e => e.OldisTransferTransitWise).HasColumnName("OLDIsTransferTransitWise");
            entity.Property(e => e.OldisValidFromStation).HasColumnName("OLDIsValidFromStation");
            entity.Property(e => e.OldisValidToStation).HasColumnName("OLDIsValidToStation");
            entity.Property(e => e.OldmaxStayNoOfDays).HasColumnName("OLDMaxStayNoOfDays");
            entity.Property(e => e.OldminStayNoOfDays).HasColumnName("OLDMinStayNoOfDays");
            entity.Property(e => e.OldnoOfTransferTransitAllowed).HasColumnName("OLDNoOfTransferTransitAllowed");
            entity.Property(e => e.OldnotValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDNotValidFromStationCode");
            entity.Property(e => e.OldnotValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDNotValidToStationCode");
            entity.Property(e => e.OldoutboundChargePerStopOver)
                .HasColumnType("money")
                .HasColumnName("OLDOutboundChargePerStopOver");
            entity.Property(e => e.OldplbisPaxTotalFlightAmount).HasColumnName("OLDPLBIsPaxTotalFlightAmount");
            entity.Property(e => e.Oldpnrosifield)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("OLDPNROSIField");
            entity.Property(e => e.OldsourceContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDSourceContinentIDs");
            entity.Property(e => e.OldtotNoOfInboundStopOverAllowed).HasColumnName("OLDTotNoOfInboundStopOverAllowed");
            entity.Property(e => e.OldtotNoOfOutboundStopOverAllowed).HasColumnName("OLDTotNoOfOutboundStopOverAllowed");
            entity.Property(e => e.OldtotNoOfStopOverAllowed).HasColumnName("OLDTotNoOfStopOverAllowed");
            entity.Property(e => e.OldtourCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDTourCode");
            entity.Property(e => e.OldvalidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDValidFromStationCode");
            entity.Property(e => e.OldvalidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("OLDValidToStationCode");
        });

        modelBuilder.Entity<TblAircommissionBookingDateDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionBookingDateDetail");

            entity.Property(e => e.CommBookingDateDetId).HasColumnName("CommBookingDateDetID");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromBookingDate).HasColumnType("datetime");
            entity.Property(e => e.ToBookingDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionBookingDateDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionBookingDateDetailBkp");

            entity.Property(e => e.CommBookingDateDetId).HasColumnName("CommBookingDateDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromBookingDate).HasColumnType("datetime");
            entity.Property(e => e.ToBookingDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionCodeShareDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionCodeShareDetail");

            entity.Property(e => e.CodeShareAirlineId).HasColumnName("CodeShareAirlineID");
            entity.Property(e => e.CodeShareFlightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CodeShareFlightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommCodeShareDetId).HasColumnName("CommCodeShareDetID");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionCodeShareDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionCodeShareDetailBkp");

            entity.Property(e => e.CodeShareAirlineId).HasColumnName("CodeShareAirlineID");
            entity.Property(e => e.CodeShareFlightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CodeShareFlightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommCodeShareDetId).HasColumnName("CommCodeShareDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionCountryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionCountryDetail");

            entity.Property(e => e.CommCountryDetId).HasColumnName("CommCountryDetID");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ExcAllowStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionCountryDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionCountryDetailBkp");

            entity.Property(e => e.CommCountryDetId).HasColumnName("CommCountryDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ExcAllowStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionDepartureDateDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionDepartureDateDetail");

            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommDepartureDateDetId).HasColumnName("CommDepartureDateDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromDepartureDate).HasColumnType("datetime");
            entity.Property(e => e.ToDepartureDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionDepartureDateDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionDepartureDateDetailBkp");

            entity.Property(e => e.CommDepartureDateDetId).HasColumnName("CommDepartureDateDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromDepartureDate).HasColumnType("datetime");
            entity.Property(e => e.ToDepartureDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionMaster");

            entity.Property(e => e.BaseFareMarkupAmt).HasColumnType("money");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DistributorGroupDealIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DistributorGroupDealIDs");
            entity.Property(e => e.IatafuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAFuelFeeAmt");
            entity.Property(e => e.IatafuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAFuelFeePer");
            entity.Property(e => e.IatapassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAPassengerFeeAmt");
            entity.Property(e => e.IatapassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAPassengerFeePer");
            entity.Property(e => e.IatatotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("IATATotalFlightAmountAmt");
            entity.Property(e => e.IatatotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATATotalFlightAmountPer");
            entity.Property(e => e.PlbfuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBFuelFeeAmt");
            entity.Property(e => e.PlbfuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBFuelFeePer");
            entity.Property(e => e.PlbpassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBPassengerFeeAmt");
            entity.Property(e => e.PlbpassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBPassengerFeePer");
            entity.Property(e => e.PlbtotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("PLBTotalFlightAmountAmt");
            entity.Property(e => e.PlbtotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBTotalFlightAmountPer");
            entity.Property(e => e.ServiceChargeAmt).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionMasterBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionMasterBkp");

            entity.Property(e => e.AirlineId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("AirlineID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.BaggageAllowance)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BaseFareMarkupAmt).HasColumnType("money");
            entity.Property(e => e.BookingClass)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.ClassIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("ClassIDs");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Commission).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CommissionAmt).HasColumnType("money");
            entity.Property(e => e.CommissionCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DestinationContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DestinationContinentIDs");
            entity.Property(e => e.DistributorGroupDealIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("DistributorGroupDealIDs");
            entity.Property(e => e.Endorsement)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FareBasisCode)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.FlightAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FlightNotAllowed)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IatafuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAFuelFeeAmt");
            entity.Property(e => e.IatafuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAFuelFeePer");
            entity.Property(e => e.IataisPaxTotalFlightAmount).HasColumnName("IATAIsPaxTotalFlightAmount");
            entity.Property(e => e.IatapassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAPassengerFeeAmt");
            entity.Property(e => e.IatapassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAPassengerFeePer");
            entity.Property(e => e.IatatotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("IATATotalFlightAmountAmt");
            entity.Property(e => e.IatatotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATATotalFlightAmountPer");
            entity.Property(e => e.InboundChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.IsApiwise).HasColumnName("IsAPIWise");
            entity.Property(e => e.IsPlbonMileage).HasColumnName("IsPLBOnMileage");
            entity.Property(e => e.NotValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.NotValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.OutboundChargePerStopOver).HasColumnType("money");
            entity.Property(e => e.PlbfuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBFuelFeeAmt");
            entity.Property(e => e.PlbfuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBFuelFeePer");
            entity.Property(e => e.PlbisPaxTotalFlightAmount).HasColumnName("PLBIsPaxTotalFlightAmount");
            entity.Property(e => e.PlbpassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBPassengerFeeAmt");
            entity.Property(e => e.PlbpassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBPassengerFeePer");
            entity.Property(e => e.PlbtotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("PLBTotalFlightAmountAmt");
            entity.Property(e => e.PlbtotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBTotalFlightAmountPer");
            entity.Property(e => e.Pnrosifield)
                .HasMaxLength(180)
                .IsUnicode(false)
                .HasColumnName("PNROSIField");
            entity.Property(e => e.ServiceChargeAmt).HasColumnType("money");
            entity.Property(e => e.SourceContinentIds)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("SourceContinentIDs");
            entity.Property(e => e.TourCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.ValidFromStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.ValidToStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblAircommissionReturnDateDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionReturnDateDetail");

            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommReturnDateDetId).HasColumnName("CommReturnDateDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ToReturnDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionReturnDateDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionReturnDateDetailBkp");

            entity.Property(e => e.CommReturnDateDetId).HasColumnName("CommReturnDateDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ToReturnDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionRoutingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionRoutingDetail");

            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommRoutingDetId).HasColumnName("CommRoutingDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RouteStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionRoutingDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionRoutingDetailBkp");

            entity.Property(e => e.CommRoutingDetId).HasColumnName("CommRoutingDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RouteStationCode)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionSaleCountryDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionSaleCountryDetail");

            entity.Property(e => e.AllowedCountryId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("AllowedCountryID");
            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommSaleCountryDetId).HasColumnName("CommSaleCountryDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RestricatedCountryId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RestricatedCountryID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionSaleCountryDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionSaleCountryDetailBkp");

            entity.Property(e => e.AllowedCountryId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("AllowedCountryID");
            entity.Property(e => e.CommSaleCountryDetId).HasColumnName("CommSaleCountryDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RestricatedCountryId)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RestricatedCountryID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionSectorDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionSectorDetail");

            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommSectorDetId).HasColumnName("CommSectorDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromStationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToStationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircommissionSectorDetailBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRCommissionSectorDetailBkp");

            entity.Property(e => e.CommSectorDetId).HasColumnName("CommSectorDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FromStationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ToStationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircustomerDetail>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblAIRCu__A4AE64B806AF6B6B");

            entity.ToTable("tblAIRCustomerDetail", tb => tb.HasTrigger("trgAIRCustomerDetailHistory"));

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.AnniversaryDate).HasColumnType("datetime");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.FirstName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PassPortExpDate).HasColumnType("datetime");
            entity.Property(e => e.PassportNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircustomerDetailCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblAIRCu__6B4108E60A7FFC4F");

            entity.ToTable("tblAIRCustomerDetailCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblAircustomerDetailHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAIRCu__4D7B4ADD1BAA8851");

            entity.ToTable("tblAIRCustomerDetailHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewanniversaryDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWAnniversaryDate");
            entity.Property(e => e.NewbirthDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWBirthDate");
            entity.Property(e => e.NewcustomerGroupId).HasColumnName("NEWCustomerGroupID");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWEmailID");
            entity.Property(e => e.NewfirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWFirstName");
            entity.Property(e => e.Newgender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWGender");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewlastName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWLastName");
            entity.Property(e => e.NewmobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWMobileNo");
            entity.Property(e => e.NewnationalityCountry).HasColumnName("NEWNationalityCountry");
            entity.Property(e => e.NewpassPortExpDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWPassPortExpDate");
            entity.Property(e => e.NewpassPortIssuingCountry).HasColumnName("NEWPassPortIssuingCountry");
            entity.Property(e => e.NewpassportNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWPassportNo");
            entity.Property(e => e.OldanniversaryDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDAnniversaryDate");
            entity.Property(e => e.OldbirthDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDBirthDate");
            entity.Property(e => e.OldcustomerGroupId).HasColumnName("OLDCustomerGroupID");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDEmailID");
            entity.Property(e => e.OldfirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDFirstName");
            entity.Property(e => e.Oldgender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDGender");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldlastName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDLastName");
            entity.Property(e => e.OldmobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDMobileNo");
            entity.Property(e => e.OldnationalityCountry).HasColumnName("OLDNationalityCountry");
            entity.Property(e => e.OldpassPortExpDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDPassPortExpDate");
            entity.Property(e => e.OldpassPortIssuingCountry).HasColumnName("OLDPassPortIssuingCountry");
            entity.Property(e => e.OldpassportNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDPassportNo");
        });

        modelBuilder.Entity<TblAircustomerGroupMaster>(entity =>
        {
            entity.HasKey(e => e.CustomerGroupId).HasName("PK__tblAIRCu__9AA3001A0F44B16C");

            entity.ToTable("tblAIRCustomerGroupMaster", tb => tb.HasTrigger("trgAIRCustomerGroupMasterHistory"));

            entity.Property(e => e.CustomerGroupId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerGroupID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerGroupName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustomerGroupTypeId).HasColumnName("CustomerGroupTypeID");
            entity.Property(e => e.PrimaryPersonEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PrimaryPersonEmailID");
            entity.Property(e => e.PrimaryPersonMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircustomerGroupMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblAIRCu__6B4108E613154250");

            entity.ToTable("tblAIRCustomerGroupMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblAircustomerGroupMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAIRCu__4D7B4ADD17D9F76D");

            entity.ToTable("tblAIRCustomerGroupMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustomerGroupId).HasColumnName("CustomerGroupID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcustomerGroupName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWCustomerGroupName");
            entity.Property(e => e.NewcustomerGroupTypeId).HasColumnName("NEWCustomerGroupTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewprimaryPersonEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWPrimaryPersonEmailID");
            entity.Property(e => e.NewprimaryPersonMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWPrimaryPersonMobileNo");
            entity.Property(e => e.OldcustomerGroupName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDCustomerGroupName");
            entity.Property(e => e.OldcustomerGroupTypeId).HasColumnName("OLDCustomerGroupTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldprimaryPersonEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDPrimaryPersonEmailID");
            entity.Property(e => e.OldprimaryPersonMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDPrimaryPersonMobileNo");
        });

        modelBuilder.Entity<TblAircustomerGroupTypeMaster>(entity =>
        {
            entity.HasKey(e => e.CustomerGroupTypeId).HasName("PK__tblAIRCu__EC088C8E1F7B1935");

            entity.ToTable("tblAIRCustomerGroupTypeMaster", tb => tb.HasTrigger("trgAIRCustomerGroupTypeMasterHistory"));

            entity.Property(e => e.CustomerGroupTypeId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerGroupTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerGroupTypeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.IsSendGreetingBySms).HasColumnName("IsSendGreetingBySMS");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAircustomerGroupTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblAIRCu__6B4108E6234BAA19");

            entity.ToTable("tblAIRCustomerGroupTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblAircustomerGroupTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAIRCu__4D7B4ADD271C3AFD");

            entity.ToTable("tblAIRCustomerGroupTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustomerGroupTypeId).HasColumnName("CustomerGroupTypeID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcustomerGroupTypeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWCustomerGroupTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewisSendGreetingByEmail).HasColumnName("NEWIsSendGreetingByEmail");
            entity.Property(e => e.NewisSendGreetingBySms).HasColumnName("NEWIsSendGreetingBySMS");
            entity.Property(e => e.OldcustomerGroupTypeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDCustomerGroupTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldisSendGreetingByEmail).HasColumnName("OLDIsSendGreetingByEmail");
            entity.Property(e => e.OldisSendGreetingBySms).HasColumnName("OLDIsSendGreetingBySMS");
        });

        modelBuilder.Entity<TblAirdownlineCommissionMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRDownlineCommissionMaster");

            entity.Property(e => e.CommCriteriaId).HasColumnName("CommCriteriaID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DownlineCommissionId).HasColumnName("DownlineCommissionID");
            entity.Property(e => e.FromDistId).HasColumnName("FromDistID");
            entity.Property(e => e.IatafuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAFuelFeeAmt");
            entity.Property(e => e.IatafuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAFuelFeePer");
            entity.Property(e => e.IatapassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAPassengerFeeAmt");
            entity.Property(e => e.IatapassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAPassengerFeePer");
            entity.Property(e => e.IatatotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("IATATotalFlightAmountAmt");
            entity.Property(e => e.IatatotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATATotalFlightAmountPer");
            entity.Property(e => e.PlbfuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBFuelFeeAmt");
            entity.Property(e => e.PlbfuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBFuelFeePer");
            entity.Property(e => e.PlbpassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBPassengerFeeAmt");
            entity.Property(e => e.PlbpassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBPassengerFeePer");
            entity.Property(e => e.PlbtotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("PLBTotalFlightAmountAmt");
            entity.Property(e => e.PlbtotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBTotalFlightAmountPer");
            entity.Property(e => e.ToDistId).HasColumnName("ToDistID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAirdownlineCommissionMasterBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAIRDownlineCommissionMasterBkp");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommissionId).HasColumnName("CommissionID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DownlineCommissionId).HasColumnName("DownlineCommissionID");
            entity.Property(e => e.FromDistId).HasColumnName("FromDistID");
            entity.Property(e => e.IatafuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAFuelFeeAmt");
            entity.Property(e => e.IatafuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAFuelFeePer");
            entity.Property(e => e.IatapassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("IATAPassengerFeeAmt");
            entity.Property(e => e.IatapassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATAPassengerFeePer");
            entity.Property(e => e.IatatotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("IATATotalFlightAmountAmt");
            entity.Property(e => e.IatatotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("IATATotalFlightAmountPer");
            entity.Property(e => e.PlbfuelFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBFuelFeeAmt");
            entity.Property(e => e.PlbfuelFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBFuelFeePer");
            entity.Property(e => e.PlbpassengerFeeAmt)
                .HasColumnType("money")
                .HasColumnName("PLBPassengerFeeAmt");
            entity.Property(e => e.PlbpassengerFeePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBPassengerFeePer");
            entity.Property(e => e.PlbtotalFlightAmountAmt)
                .HasColumnType("money")
                .HasColumnName("PLBTotalFlightAmountAmt");
            entity.Property(e => e.PlbtotalFlightAmountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("PLBTotalFlightAmountPer");
            entity.Property(e => e.ToDistId).HasColumnName("ToDistID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAirinterfaceMaster>(entity =>
        {
            entity.HasKey(e => e.InterfaceId).IsClustered(false);

            entity.ToTable("tblAIRInterfaceMaster");

            entity.Property(e => e.InterfaceId)
                .ValueGeneratedNever()
                .HasColumnName("InterfaceID");
            entity.Property(e => e.ApplyOnServiceTax)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AuthKey)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DomesticSerTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.EffDomesticSerTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.EffInternationalSerTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.EffectiveApplyOnServiceTax)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EffectiveServiceTaxDate).HasColumnType("datetime");
            entity.Property(e => e.InterfaceVersionNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.InternationalSerTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.IpaddressEnabled)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("IPAddressEnabled");
            entity.Property(e => e.LoginUidexpiredSec).HasColumnName("LoginUIDExpiredSec");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblAirlineMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAirlineMaster");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.AirlineCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.AirlineId).HasColumnName("AirlineID");
            entity.Property(e => e.AirlineName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.AirlineTypeId).HasColumnName("AirlineTypeID");
            entity.Property(e => e.AirlineUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("AirlineURL");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.ImageName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ThumbImageName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblAirlineMasterD1>(entity =>
        {
            entity.HasKey(e => e.AirlineId).HasName("PK__tblAirli__DC45827350F2E6B0");

            entity.ToTable("tblAirlineMasterD1");

            entity.Property(e => e.AirlineId)
                .ValueGeneratedNever()
                .HasColumnName("AirlineID");
            entity.Property(e => e.AirlineCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AirlineName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CrateIp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("CrateIP");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAirlineTypeMaster>(entity =>
        {
            entity.HasKey(e => e.AirlineTypeId).HasName("PK__tblAirli__C7B7FA11C68E2DD9");

            entity.ToTable("tblAirlineTypeMaster");

            entity.Property(e => e.AirlineTypeId)
                .ValueGeneratedNever()
                .HasColumnName("AirlineTypeID");
            entity.Property(e => e.AirlineTypeCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.AirlineTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAirlineTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblAirli__6B4108E614C9EE5D");

            entity.ToTable("tblAirlineTypeMasterCommand");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblAirlineTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAirli__4D7B4ADD095A18CD");

            entity.ToTable("tblAirlineTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.AirlineTypeId).HasColumnName("AirlineTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewairlineTypeCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWAirlineTypeCode");
            entity.Property(e => e.NewairlineTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAirlineTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldairlineTypeCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDAirlineTypeCode");
            entity.Property(e => e.OldairlineTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAirlineTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblApimaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAPIMaster");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Apidesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIDesc");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.Apiurl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIURL");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.PinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
        });

        modelBuilder.Entity<TblApistationLinkMasterBu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAPIStationLinkMasterBus");

            entity.Property(e => e.ApicityId).HasColumnName("APICityID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.ApistationLinkId).HasColumnName("APIStationLinkID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StationAlias)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.StationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAttendanceMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAttendanceMaster");

            entity.Property(e => e.AttDate).HasColumnType("datetime");
            entity.Property(e => e.AttendanceId).HasColumnName("AttendanceID");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Empid).HasColumnName("EMPID");
            entity.Property(e => e.IsFullAt).HasColumnName("IsFullAT");
            entity.Property(e => e.IsFullLeaveAt).HasColumnName("IsFullLeaveAT");
            entity.Property(e => e.IshalfLeaveAt).HasColumnName("IshalfLeaveAT");
            entity.Property(e => e.IstowTimeLateAt).HasColumnName("ISTowTimeLateAT");
            entity.Property(e => e.UpdateBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAudit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAudit");

            entity.Property(e => e.AuditDate).HasColumnType("datetime");
            entity.Property(e => e.AuditId)
                .ValueGeneratedOnAdd()
                .HasColumnName("AuditID");
            entity.Property(e => e.RefId).HasColumnName("RefID");
        });

        modelBuilder.Entity<TblAuthorMaster>(entity =>
        {
            entity.HasKey(e => e.AuthorId).HasName("PK__tblAutho__70DAFC144A566E4D");

            entity.ToTable("tblAuthorMaster", tb => tb.HasTrigger("trgAuthorMasterHistory"));

            entity.Property(e => e.AuthorId)
                .ValueGeneratedNever()
                .HasColumnName("AuthorID");
            entity.Property(e => e.AuthorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblAuthorMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblAutho__4D7B4ADDECFDFCDF");

            entity.ToTable("tblAuthorMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.AuthorId).HasColumnName("AuthorID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewauthorName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWAuthorName");
            entity.Property(e => e.NewbookName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBookName");
            entity.Property(e => e.Newcountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWCountry");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldauthorName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDAuthorName");
            entity.Property(e => e.OldbookName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBookName");
            entity.Property(e => e.Oldcountry)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDCountry");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblAvl16feb2011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblAVL16Feb2011");

            entity.Property(e => e.Column0)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Column1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Column2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Column3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Column4)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblBankBranchMaster>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("PK__tblBankB__A1682FA55A303401");

            entity.ToTable("tblBankBranchMaster");

            entity.Property(e => e.BranchId)
                .ValueGeneratedNever()
                .HasColumnName("BranchID");
            entity.Property(e => e.Address)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BranchCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BranchName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBankBranchMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBankB__6B4108E6182D667A");

            entity.ToTable("tblBankBranchMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBankBranchMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBankB__4D7B4ADD3F47339B");

            entity.ToTable("tblBankBranchMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewbankId).HasColumnName("NEWBankID");
            entity.Property(e => e.NewbranchCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWBranchCode");
            entity.Property(e => e.NewbranchName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWBranchName");
            entity.Property(e => e.Newcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.Newemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmail");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldbankId).HasColumnName("OLDBankID");
            entity.Property(e => e.OldbranchCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDBranchCode");
            entity.Property(e => e.OldbranchName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDBranchName");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.Oldemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmail");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBankCustomerMaster>(entity =>
        {
            entity.HasKey(e => e.CustId).HasName("PK__tblBankC__049E3A893004F00B");

            entity.ToTable("tblBankCustomerMaster");

            entity.Property(e => e.CustId)
                .ValueGeneratedNever()
                .HasColumnName("CustID");
            entity.Property(e => e.AccNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Address)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBankCustomerMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBankC__6B4108E625876198");

            entity.ToTable("tblBankCustomerMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBankCustomerMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBankC__4D7B4ADD0A9E6132");

            entity.ToTable("tblBankCustomerMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustId).HasColumnName("CustID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewaccNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWAccNo");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewbankId).HasColumnName("NEWBankID");
            entity.Property(e => e.NewbranchId).HasColumnName("NEWBranchID");
            entity.Property(e => e.Newcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.NewcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NEWContactNo");
            entity.Property(e => e.NewcustName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWCustName");
            entity.Property(e => e.Newemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmail");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldaccNo)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDAccNo");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldbankId).HasColumnName("OLDBankID");
            entity.Property(e => e.OldbranchId).HasColumnName("OLDBranchID");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.OldcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("OLDContactNo");
            entity.Property(e => e.OldcustName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDCustName");
            entity.Property(e => e.Oldemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmail");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBankMaster>(entity =>
        {
            entity.HasKey(e => e.BankId).HasName("pk_tblBankMaster_BankID");

            entity.ToTable("tblBankMaster");

            entity.Property(e => e.BankId)
                .ValueGeneratedNever()
                .HasColumnName("BankID");
            entity.Property(e => e.BankCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankWebsiteUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("BankWebsiteURL");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBankMaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblBankMaster1");

            entity.Property(e => e.Bankid).HasColumnName("bankid");
        });

        modelBuilder.Entity<TblBankMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("pk_tblBankHCommands_CommandID");

            entity.ToTable("tblBankMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBankMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("pk_tblBankHHistory_HistoryID");

            entity.ToTable("tblBankMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbankCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWBankCode");
            entity.Property(e => e.NewbankName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWBankName");
            entity.Property(e => e.NewbankWebsiteUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWBankWebsiteURL");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldbankCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDBankCode");
            entity.Property(e => e.OldbankName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDBankName");
            entity.Property(e => e.OldbankWebsiteUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDBankWebsiteURL");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBankStmtDetail>(entity =>
        {
            entity.HasKey(e => e.BankStmtDetId).HasName("PK_tblBankStmtDetail_BankStmtDetID");

            entity.ToTable("tblBankStmtDetail");

            entity.Property(e => e.BankStmtDetId)
                .ValueGeneratedNever()
                .HasColumnName("BankStmtDetID");
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BankStmtId).HasColumnName("BankStmtID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.Txnid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TXNID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBankStmtMaster>(entity =>
        {
            entity.HasKey(e => new { e.BankStmtId, e.BankId });

            entity.ToTable("tblBankStmtMaster");

            entity.Property(e => e.BankStmtId).HasColumnName("BankStmtID");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankStmtDate).HasColumnType("datetime");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FileName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProcessDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBanksMaster>(entity =>
        {
            entity.HasKey(e => e.BankId).HasName("PK__tblBanks__AA08CB333039FA35");

            entity.ToTable("tblBanksMaster");

            entity.Property(e => e.BankId)
                .ValueGeneratedNever()
                .HasColumnName("BankID");
            entity.Property(e => e.Address)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.BankCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BankWebSite)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBanksMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBanks__6B4108E62898D86D");

            entity.ToTable("tblBanksMAsterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBanksMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBanks__19BDBDB3340A8B19");

            entity.ToTable("tblBanksMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("historyID");
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewbankCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBankCode");
            entity.Property(e => e.NewbankName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBankName");
            entity.Property(e => e.NewbankWebSite)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWBankWebSite");
            entity.Property(e => e.Newcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.Newemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmail");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldbankCode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBankCode");
            entity.Property(e => e.OldbankName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBankName");
            entity.Property(e => e.OldbankWebSite)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDBankWebSite");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.Oldemail)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmail");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBookCategoryMaster>(entity =>
        {
            entity.HasKey(e => e.BookCategoryId).HasName("PK__tblBookC__6347EC64190325D0");

            entity.ToTable("tblBookCategoryMaster", tb => tb.HasTrigger("trgBookCategoryMasterHistory"));

            entity.Property(e => e.BookCategoryId)
                .ValueGeneratedNever()
                .HasColumnName("BookCategoryID");
            entity.Property(e => e.BookCategoryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookPrice).HasColumnType("money");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBookCategoryMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBookC__6B4108E61CD3B6B4");

            entity.ToTable("tblBookCategoryMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBookCategoryMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBookC__4D7B4ADD20A44798");

            entity.ToTable("tblBookCategoryMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BookCategoryId).HasColumnName("BookCategoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbookAmount).HasColumnName("NEWBookAmount");
            entity.Property(e => e.NewbookCategoryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWBookCategoryCode");
            entity.Property(e => e.NewbookCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWBookCategoryName");
            entity.Property(e => e.NewbookPrice)
                .HasColumnType("money")
                .HasColumnName("NEWBookPrice");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldbookAmount).HasColumnName("OLDBookAmount");
            entity.Property(e => e.OldbookCategoryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDBookCategoryCode");
            entity.Property(e => e.OldbookCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDBookCategoryName");
            entity.Property(e => e.OldbookPrice)
                .HasColumnType("money")
                .HasColumnName("OLDBookPrice");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBookMaster>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__tblBookM__3DE0C2271DBCEDF5");

            entity.ToTable("tblBookMaster", tb => tb.HasTrigger("trgBookMasterHistory"));

            entity.Property(e => e.BookId)
                .ValueGeneratedNever()
                .HasColumnName("BookID");
            entity.Property(e => e.BookCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.BookTypeId).HasColumnName("BookTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBookMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBookM__6B4108E655E14B87");

            entity.ToTable("tblBookMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBookMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBookM__4D7B4ADD31C3E6A2");

            entity.ToTable("tblBookMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbookCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWBookCode");
            entity.Property(e => e.NewbookName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWBookName");
            entity.Property(e => e.NewbookTypeId).HasColumnName("NEWBookTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldbookCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDBookCode");
            entity.Property(e => e.OldbookName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDBookName");
            entity.Property(e => e.OldbookTypeId).HasColumnName("OLDBookTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBookTypeMaster>(entity =>
        {
            entity.HasKey(e => e.BookTypeId).HasName("PK__tblBookT__259BDED3170FF066");

            entity.ToTable("tblBookTypeMaster", tb => tb.HasTrigger("trgBookTypeMasterHistory"));

            entity.Property(e => e.BookTypeId)
                .ValueGeneratedNever()
                .HasColumnName("BookTypeID");
            entity.Property(e => e.BookTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookTypeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBookTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBookT__6B4108E641062A32");

            entity.ToTable("tblBookTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBookTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBookT__4D7B4ADD44D6BB16");

            entity.ToTable("tblBookTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BookTypeId).HasColumnName("BookTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbookTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWBookTypeCode");
            entity.Property(e => e.NewbookTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWBookTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldbookTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDBookTypeCode");
            entity.Property(e => e.OldbookTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDBookTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBooksMaster>(entity =>
        {
            entity.HasKey(e => e.BookId).HasName("PK__tblBooks__3DE0C2270160A669");

            entity.ToTable("tblBooksMaster", tb => tb.HasTrigger("trgBooksMasterHistory"));

            entity.Property(e => e.BookId)
                .ValueGeneratedNever()
                .HasColumnName("BookID");
            entity.Property(e => e.BookAuthor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.BookDescription)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookLanguage)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BookName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBooksMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblBooks__6B4108E61ACB72B1");

            entity.ToTable("tblBooksMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblBooksMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblBooks__4D7B4ADD1018DA14");

            entity.ToTable("tblBooksMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbookAuthor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWBookAuthor");
            entity.Property(e => e.NewbookCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWBookCode");
            entity.Property(e => e.NewbookDescription)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBookDescription");
            entity.Property(e => e.NewbookEdition).HasColumnName("NEWBookEdition");
            entity.Property(e => e.NewbookLanguage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWBookLanguage");
            entity.Property(e => e.NewbookName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWBookName");
            entity.Property(e => e.NewbookPrice)
                .HasColumnType("money")
                .HasColumnName("NEWBookPrice");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldbookAuthor)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDBookAuthor");
            entity.Property(e => e.OldbookCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDBookCode");
            entity.Property(e => e.OldbookDescription)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBookDescription");
            entity.Property(e => e.OldbookEdition).HasColumnName("OLDBookEdition");
            entity.Property(e => e.OldbookLanguage)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDBookLanguage");
            entity.Property(e => e.OldbookName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDBookName");
            entity.Property(e => e.OldbookPrice)
                .HasColumnType("money")
                .HasColumnName("OLDBookPrice");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblBooksType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblBooksType");

            entity.Property(e => e.BookId).HasColumnName("BookID");
            entity.Property(e => e.BookName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookTypeId).HasColumnName("BookTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp).HasColumnName("CreateIP");
            entity.Property(e => e.Isactive).HasColumnName("ISActive");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp).HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblBulkInsertDemo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblBulkInsertDemo");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblCardLedger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCardLedger");

            entity.Property(e => e.CardId).HasColumnName("CardID");
            entity.Property(e => e.CardLedgerId).HasColumnName("CardLedgerID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Remark1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RewardPoints).HasColumnType("money");
            entity.Property(e => e.RewardPointsRateAmount).HasColumnType("money");
            entity.Property(e => e.RewardPointsRatePer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.RewardPointsRateQty).HasColumnType("money");
            entity.Property(e => e.RpgenerationId).HasColumnName("RPGenerationID");
            entity.Property(e => e.TranDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCategoryMaster>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__tblCateg__19093A2B62B20217");

            entity.ToTable("tblCategoryMaster", tb => tb.HasTrigger("trgCategoryMasterHistory"));

            entity.HasIndex(e => e.CategoryCode, "IX_tblcategorymaster_CategoryCode");

            entity.Property(e => e.CategoryId)
                .ValueGeneratedNever()
                .HasColumnName("CategoryID");
            entity.Property(e => e.CategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryName)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.CategoryTypeId).HasColumnName("CategoryTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCategoryMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCateg__6B4108E65B10E04F");

            entity.ToTable("tblCategoryMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCategoryMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCateg__4D7B4ADD6A5323DF");

            entity.ToTable("tblCategoryMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCategoryCode");
            entity.Property(e => e.NewcategoryName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NEWCategoryName");
            entity.Property(e => e.NewcategoryTypeId).HasColumnName("NEWCategoryTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCategoryCode");
            entity.Property(e => e.OldcategoryName)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OLDCategoryName");
            entity.Property(e => e.OldcategoryTypeId).HasColumnName("OLDCategoryTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCategoryTypeMaster>(entity =>
        {
            entity.HasKey(e => e.CategoryTypeId).HasName("PK__tblCateg__7B30E78367ABC15E");

            entity.ToTable("tblCategoryTypeMaster", tb => tb.HasTrigger("trgCategoryTypeMasterHistory"));

            entity.HasIndex(e => e.CategoryTypeCode, "IX_tblcategorytypemaster_CategoryTypeCode");

            entity.Property(e => e.CategoryTypeId)
                .ValueGeneratedNever()
                .HasColumnName("CategoryTypeID");
            entity.Property(e => e.CategoryTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CategoryTypeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCategoryTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCateg__6B4108E61666B047");

            entity.ToTable("tblCategoryTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCategoryTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCateg__4D7B4ADD1A37412B");

            entity.ToTable("tblCategoryTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CategoryTypeId).HasColumnName("CategoryTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcategoryTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCategoryTypeCode");
            entity.Property(e => e.NewcategoryTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWCategoryTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcategoryTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCategoryTypeCode");
            entity.Property(e => e.OldcategoryTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDCategoryTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCitiesAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCitiesATO");

            entity.Property(e => e.CityCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommnadId).HasColumnName("CommnadID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpdateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdatedBy).HasColumnName("UpdatedBY");
        });

        modelBuilder.Entity<TblCity>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_city");

            entity.Property(e => e.CityId).HasColumnName("city_id");
            entity.Property(e => e.CityName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("city_name");
            entity.Property(e => e.CityType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("city_type");
        });

        modelBuilder.Entity<TblCity1>(entity =>
        {
            entity.HasKey(e => e.CityId);

            entity.ToTable("tbl_citys");

            entity.Property(e => e.CityId).HasColumnName("city_id");
            entity.Property(e => e.Cid).HasColumnName("cid");
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city_name");
            entity.Property(e => e.Sid).HasColumnName("sid");
        });

        modelBuilder.Entity<TblCity2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCities");

            entity.Property(e => e.CityCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCityMaster>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__tblCityM__F2D21A964A83DC1D");

            entity.ToTable("tblCityMaster");

            entity.Property(e => e.CityId)
                .ValueGeneratedNever()
                .HasColumnName("CityID");
            entity.Property(e => e.CityCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCityMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblCityMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCityMasterSunilSingh>(entity =>
        {
            entity.HasKey(e => e.CityId);

            entity.ToTable("tblCityMaster_SunilSingh");

            entity.Property(e => e.CityId)
                .ValueGeneratedNever()
                .HasColumnName("CityID");
            entity.Property(e => e.CityName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCityMst>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__tblCityM__F2D21A967BF04F28");

            entity.ToTable("tblCityMst", tb => tb.HasTrigger("trgCityMstHistory"));

            entity.Property(e => e.CityId)
                .ValueGeneratedNever()
                .HasColumnName("CityID");
            entity.Property(e => e.CityCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Isac).HasColumnName("isac");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCityMstCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCityM__6B4108E6781FBE44");

            entity.ToTable("tblCityMstCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCityMstHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCityM__4D7B4ADD7FC0E00C");

            entity.ToTable("tblCityMstHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcityCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NEWCityCode");
            entity.Property(e => e.NewcityName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCityName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newremark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWRemark");
            entity.Property(e => e.OldcityCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OLDCityCode");
            entity.Property(e => e.OldcityName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCityName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldremark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDRemark");
        });

        modelBuilder.Entity<TblClassMaster>(entity =>
        {
            entity.HasKey(e => e.ClassId).HasName("PK_tblClassMaster_1");

            entity.ToTable("tblClassMaster");

            entity.Property(e => e.ClassId)
                .ValueGeneratedNever()
                .HasColumnName("ClassID");
            entity.Property(e => e.ClassCode)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.ClassDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Remark)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblComma__6B410B0654575F1A");

            entity.ToTable("tblCommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCommand1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCommands", "guest");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCommand2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCommand2");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCommandsEntriesProductTypeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCommandsEntries_ProductTypeMaster");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCommissionOrder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCommissionOrders");

            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.CommAmountRate).HasColumnType("money");
            entity.Property(e => e.CommGenerationId).HasColumnName("CommGenerationID");
            entity.Property(e => e.CommOrderId).HasColumnName("CommOrderID");
            entity.Property(e => e.CommPerRate).HasColumnType("money");
            entity.Property(e => e.CommQtyRate).HasColumnType("money");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EducessAmt)
                .HasColumnType("money")
                .HasColumnName("EDUCessAmt");
            entity.Property(e => e.FromDistId).HasColumnName("FromDistID");
            entity.Property(e => e.NetCommAmount).HasColumnType("money");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.Scamt)
                .HasColumnType("money")
                .HasColumnName("SCAmt");
            entity.Property(e => e.Tdsamt)
                .HasColumnType("money")
                .HasColumnName("TDSAmt");
            entity.Property(e => e.ToDistId).HasColumnName("ToDistID");
        });

        modelBuilder.Entity<TblCompany>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCompany");

            entity.Property(e => e.DtmAccClosingDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmAccClosingDate");
            entity.Property(e => e.DtmFromDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmFromDate");
            entity.Property(e => e.DtmTodate)
                .HasColumnType("datetime")
                .HasColumnName("dtmTodate");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("Id_Key");
            entity.Property(e => e.StrCompanyCode1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strCompanyCode1");
            entity.Property(e => e.StrCompanyName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCompanyName1");
            entity.Property(e => e.StrControl)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strControl");
            entity.Property(e => e.StrCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("strCreateDateTime");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrUpdDateTime)
                .HasColumnType("datetime")
                .HasColumnName("strUpdDateTime");
            entity.Property(e => e.StrUpdId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblCompanyMaster>(entity =>
        {
            entity.HasKey(e => e.CompanyId).HasName("PK__tblCompa__2D971C4C0B693390");

            entity.ToTable("tblCompanyMaster", tb => tb.HasTrigger("trgCompanyMasterHistory"));

            entity.Property(e => e.CompanyId)
                .ValueGeneratedNever()
                .HasColumnName("CompanyID");
            entity.Property(e => e.Address)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompanyCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCompanyMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCompa__6B4108E64417A107");

            entity.ToTable("tblCompanyMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCompanyMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCompa__4D7B4ADD0F39C474");

            entity.ToTable("tblCompanyMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewcompanyCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCompanyCode");
            entity.Property(e => e.NewcompanyName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWCompanyName");
            entity.Property(e => e.NewcompanyTypeId).HasColumnName("NEWCompanyTypeID");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWEmailID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newphone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWPhone");
            entity.Property(e => e.NewtotalEmployee).HasColumnName("NEWTotalEmployee");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldcompanyCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCompanyCode");
            entity.Property(e => e.OldcompanyName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDCompanyName");
            entity.Property(e => e.OldcompanyTypeId).HasColumnName("OLDCompanyTypeID");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDEmailID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldphone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDPhone");
            entity.Property(e => e.OldtotalEmployee).HasColumnName("OLDTotalEmployee");
        });

        modelBuilder.Entity<TblCompanyTypeMaster>(entity =>
        {
            entity.HasKey(e => e.CompanyTypeId).HasName("PK__tblCompa__0601993813FE7991");

            entity.ToTable("tblCompanyTypeMaster", tb => tb.HasTrigger("trgCompanyTypeMasterHistory"));

            entity.Property(e => e.CompanyTypeId)
                .ValueGeneratedNever()
                .HasColumnName("CompanyTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompanyTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CompanyTypeName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCompanyTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCompa__6B4108E65AC5FC35");

            entity.ToTable("tblCompanyTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCompanyTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCompa__4D7B4ADD06A47E73");

            entity.ToTable("tblCompanyTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompanyTypeId).HasColumnName("CompanyTypeID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcompanytypeName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWCompanytypeName");
            entity.Property(e => e.NewcompayTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCompayTypeCode");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcompanytypeName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDCompanytypeName");
            entity.Property(e => e.OldcompayTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCompayTypeCode");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCouapicourierServiceProviderLinkMaster>(entity =>
        {
            entity.HasKey(e => e.ApicourierServiceProviderLinkId).HasName("PK__tblCOUAP__0579CE3C417B97AB");

            entity.ToTable("tblCOUAPICourierServiceProviderLinkMaster", tb => tb.HasTrigger("trgCOUAPICourierServiceProviderLinkMasterHistory"));

            entity.Property(e => e.ApicourierServiceProviderLinkId)
                .ValueGeneratedNever()
                .HasColumnName("APICourierServiceProviderLinkID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apivalue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIValue");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CourierServiceProviderId).HasColumnName("CourierServiceProviderID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCouapicourierServiceProviderLinkMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCOUAP__6B4108E6E4AA6A2C");

            entity.ToTable("tblCOUAPICourierServiceProviderLinkMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCouapicourierServiceProviderLinkMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCOUAP__4D7B4ADD586CAFE8");

            entity.ToTable("tblCOUAPICourierServiceProviderLinkMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.ApicourierServiceProviderLinkId).HasColumnName("APICourierServiceProviderLinkID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newapiid).HasColumnName("NEWAPIID");
            entity.Property(e => e.Newapivalue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAPIValue");
            entity.Property(e => e.NewcourierServiceProviderId).HasColumnName("NEWCourierServiceProviderID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Oldapiid).HasColumnName("OLDAPIID");
            entity.Property(e => e.Oldapivalue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAPIValue");
            entity.Property(e => e.OldcourierServiceProviderId).HasColumnName("OLDCourierServiceProviderID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCouapimaster>(entity =>
        {
            entity.HasKey(e => e.Apiid).HasName("PK__tblCOUAP__ABCD70F249F9BC37");

            entity.ToTable("tblCOUAPIMaster", tb => tb.HasTrigger("trgCOUAPIMasterHistory"));

            entity.Property(e => e.Apiid)
                .ValueGeneratedNever()
                .HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("APIName");
            entity.Property(e => e.Apipassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIPassword");
            entity.Property(e => e.ApiuserId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIUserID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCouapimasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCOUAP__6B4108E6FF818E3E");

            entity.ToTable("tblCOUAPIMasterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCouapimasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCOUAP__4D7B4ADDF2E67080");

            entity.ToTable("tblCOUAPIMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newapiname)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWAPIName");
            entity.Property(e => e.Newapipassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAPIPassword");
            entity.Property(e => e.NewapiuserId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWAPIUserID");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWEmailID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmobileNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWMobileNo");
            entity.Property(e => e.Oldapiname)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDAPIName");
            entity.Property(e => e.Oldapipassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAPIPassword");
            entity.Property(e => e.OldapiuserId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDAPIUserID");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDEmailID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmobileNo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDMobileNo");
        });

        modelBuilder.Entity<TblCoucourierServiceProviderMaster>(entity =>
        {
            entity.HasKey(e => e.CourierServiceProviderId).HasName("PK__tblCOUCo__6E58A157562005FF");

            entity.ToTable("tblCOUCourierServiceProviderMaster", tb => tb.HasTrigger("trgCOUCourierServiceProviderMasterHistory"));

            entity.Property(e => e.CourierServiceProviderId)
                .ValueGeneratedNever()
                .HasColumnName("CourierServiceProviderID");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CourierServiceProviderCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CourierServiceProviderName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.PinCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCoucourierServiceProviderMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCOUCo__6B4108E68A4DEE97");

            entity.ToTable("tblCOUCourierServiceProviderMasterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCoucourierServiceProviderMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCOUCo__4D7B4ADD14B19554");

            entity.ToTable("tblCOUCourierServiceProviderMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CourierServiceProviderId).HasColumnName("CourierServiceProviderID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAddress1");
            entity.Property(e => e.Newaddress2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAddress2");
            entity.Property(e => e.Newaddress3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAddress3");
            entity.Property(e => e.Newcity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.Newcountry)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWCountry");
            entity.Property(e => e.NewcourierServiceProviderCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCourierServiceProviderCode");
            entity.Property(e => e.NewcourierServiceProviderName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWCourierServiceProviderName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewpinCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWPinCode");
            entity.Property(e => e.Newstate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWState");
            entity.Property(e => e.Oldaddress1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAddress1");
            entity.Property(e => e.Oldaddress2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAddress2");
            entity.Property(e => e.Oldaddress3)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAddress3");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.Oldcountry)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDCountry");
            entity.Property(e => e.OldcourierServiceProviderCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCourierServiceProviderCode");
            entity.Property(e => e.OldcourierServiceProviderName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDCourierServiceProviderName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldpinCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDPinCode");
            entity.Property(e => e.Oldstate)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDState");
        });

        modelBuilder.Entity<TblCountry>(entity =>
        {
            entity.HasKey(e => e.Cid);

            entity.ToTable("tbl_country");

            entity.Property(e => e.Cid).HasColumnName("cid");
            entity.Property(e => e.Cname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cname");
        });

        modelBuilder.Entity<TblCountry1>(entity =>
        {
            entity.HasKey(e => e.CountryId);

            entity.ToTable("tblCountry");

            entity.Property(e => e.CountryId)
                .ValueGeneratedNever()
                .HasColumnName("CountryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryCodeAir)
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("CountryCodeAIR");
            entity.Property(e => e.CountryCodeAir3)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("CountryCodeAIR3");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Countryname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpDateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpDateIP");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblCountryAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCountryATO");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.Countryname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpDateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpDateIP");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblCountryMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCountryMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Countrycode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Countryname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpDateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpDateIP");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblCountryMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblCountryMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newcountrycode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("NEWCountrycode");
            entity.Property(e => e.Newcountryname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCountryname");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Oldcountrycode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("OLDCountrycode");
            entity.Property(e => e.Oldcountryname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCountryname");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCoupon>(entity =>
        {
            entity.HasKey(e => e.CouponId);

            entity.ToTable("tbl_coupon");

            entity.Property(e => e.CouponId).HasColumnName("coupon_id");
            entity.Property(e => e.CommandId).HasColumnName("command_id");
            entity.Property(e => e.CouponCode)
                .HasMaxLength(100)
                .HasColumnName("coupon_code");
            entity.Property(e => e.CouponDiscount).HasColumnName("coupon_discount");
            entity.Property(e => e.CouponPrice).HasColumnName("coupon_price");
            entity.Property(e => e.CouponType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("coupon_type");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("end_date");
            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<TblCoupon1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCoupons");

            entity.Property(e => e.CouponCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.End).HasMaxLength(50);
            entity.Property(e => e.Organizer).HasMaxLength(50);
            entity.Property(e => e.Start).HasMaxLength(50);
        });

        modelBuilder.Entity<TblCouponCustomerMaster>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblCoupo__A4AE64B8947FBE5C");

            entity.ToTable("tblCouponCustomerMaster");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCouponDetail>(entity =>
        {
            entity.HasKey(e => e.CouponDetId).HasName("PK__tblCoupo__9BC20D5C0F5DE512");

            entity.ToTable("tblCouponDetail");

            entity.Property(e => e.CouponDetId)
                .ValueGeneratedNever()
                .HasColumnName("CouponDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CouponAmount).HasColumnType("money");
            entity.Property(e => e.CouponDetail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CouponEndDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CouponName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CouponStartDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCouponEventMaster>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__tblCoupo__7944C8703500E6BF");

            entity.ToTable("tblCouponEventMaster");

            entity.Property(e => e.EventId)
                .ValueGeneratedNever()
                .HasColumnName("EventID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.EventEndDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EventName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.EventPersonEmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EventPersonEmailID");
            entity.Property(e => e.EventPersonMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.EventPersonName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EventStartDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCouponMaster>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK__tblCoupo__384AF1DA97CDBA33");

            entity.ToTable("tblCouponMaster");

            entity.Property(e => e.CouponId)
                .ValueGeneratedNever()
                .HasColumnName("CouponID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CoponDetails)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CoponEndDate).HasColumnType("datetime");
            entity.Property(e => e.CoponName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CoponStartDate).HasColumnType("datetime");
            entity.Property(e => e.CouponCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CouponDetId).HasColumnName("CouponDetID");
            entity.Property(e => e.CouponOrderDetId).HasColumnName("CouponOrderDetID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.Status)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCouponOrderDetail>(entity =>
        {
            entity.HasKey(e => e.CouponOrderDetId).HasName("PK__tblCoupo__C93B777454F8EE6D");

            entity.ToTable("tblCouponOrderDetail");

            entity.Property(e => e.CouponOrderDetId)
                .ValueGeneratedNever()
                .HasColumnName("CouponOrderDetID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CouponDetId).HasColumnName("CouponDetID");
            entity.Property(e => e.CouponOrderPaymentId).HasColumnName("CouponOrderPaymentID");
            entity.Property(e => e.CouponOrderReqId).HasColumnName("CouponOrderReqID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCouponOrderPaymentMaster>(entity =>
        {
            entity.HasKey(e => e.CouponOrderPaymentId).HasName("PK__tblCoupo__26F1C9671A8BAEF8");

            entity.ToTable("tblCouponOrderPaymentMaster");

            entity.Property(e => e.CouponOrderPaymentId)
                .ValueGeneratedNever()
                .HasColumnName("CouponOrderPaymentID");
            entity.Property(e => e.CouponOrderReqId).HasColumnName("CouponOrderReqID");
            entity.Property(e => e.CreatedDate)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
        });

        modelBuilder.Entity<TblCouponOrderRequestMaster>(entity =>
        {
            entity.HasKey(e => e.CouponOrderReqId).HasName("PK__tblCoupo__EFA450A66DA046D3");

            entity.ToTable("tblCouponOrderRequestMaster");

            entity.Property(e => e.CouponOrderReqId)
                .ValueGeneratedNever()
                .HasColumnName("CouponOrderReqID");
            entity.Property(e => e.CouponDetId).HasColumnName("CouponDetID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCouponRedeemHistory>(entity =>
        {
            entity.HasKey(e => e.CouponRedeemId).HasName("PK__tblCoupo__54D91FD5E4C65AF8");

            entity.ToTable("tblCouponRedeemHistory");

            entity.Property(e => e.CouponRedeemId)
                .ValueGeneratedNever()
                .HasColumnName("CouponRedeemID");
            entity.Property(e => e.CouponCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CouponId).HasColumnName("CouponID");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.EventId).HasColumnName("EventID");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCouponVendorMaster>(entity =>
        {
            entity.HasKey(e => e.VendorId).HasName("PK__tblCoupo__FC8618D3545DF760");

            entity.ToTable("tblCouponVendorMaster");

            entity.Property(e => e.VendorId)
                .ValueGeneratedNever()
                .HasColumnName("VendorID");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreatedIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddress1)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddress2)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddress3)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.OfficeEmailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OfficeEmailID");
            entity.Property(e => e.OfficeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhoneNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.VendorName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblCourseMaster>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("PK__tblCours__C92D71872F46A153");

            entity.ToTable("tblCourseMaster", tb => tb.HasTrigger("trgCourseMasterHistory"));

            entity.Property(e => e.CourseId)
                .ValueGeneratedNever()
                .HasColumnName("CourseID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CourseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CourseDescription)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CourseName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCourseMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCours__6B4108E634FF7AA9");

            entity.ToTable("tblCourseMasterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCourseMasterError>(entity =>
        {
            entity.HasKey(e => e.ErrorNo).HasName("PK__tblCours__3585528148124F1D");

            entity.ToTable("tblCourseMasterErrors");

            entity.Property(e => e.ErrorNo).ValueGeneratedNever();
            entity.Property(e => e.ErrorDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Spname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SPName");
            entity.Property(e => e.UserErrorDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblCourseMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCours__4D7B4ADD38D00B8D");

            entity.ToTable("tblCourseMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcourseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWCourseCode");
            entity.Property(e => e.NewcourseDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWCourseDescription");
            entity.Property(e => e.NewcourseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCourseName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcourseCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDCourseCode");
            entity.Property(e => e.OldcourseDescription)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDCourseDescription");
            entity.Property(e => e.OldcourseName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCourseName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCourseMasterspErrMgmt>(entity =>
        {
            entity.HasKey(e => e.Spname).HasName("PK__tblCours__0249C4CD4BE2E001");

            entity.ToTable("tblCourseMasterspErrMgmt");

            entity.Property(e => e.Spname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TblCpDeptmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_cp_deptmaster");

            entity.Property(e => e.Ideptid).HasColumnName("ideptid");
            entity.Property(e => e.Iempid).HasColumnName("iempid");
        });

        modelBuilder.Entity<TblCtm>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblCtm__A4AE64B83591548A");

            entity.ToTable("tblCtm");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblCustCommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblCustCommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCustMaster>(entity =>
        {
            entity.HasKey(e => e.CustId).HasName("PK__tblCustM__049E3A89B1590ACC");

            entity.ToTable("tblCustMaster");

            entity.Property(e => e.CustId)
                .ValueGeneratedNever()
                .HasColumnName("CustID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustCity)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCustMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblCustM__6B4108E648A8D70E");

            entity.ToTable("tblCustMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblCustMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblCustM__4D7B4ABD062B621B");

            entity.ToTable("tblCustMasterHistory");

            entity.Property(e => e.HistoryId).ValueGeneratedNever();
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustId).HasColumnName("CustID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcustCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCustCity");
            entity.Property(e => e.NewcustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCustName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcustCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCustCity");
            entity.Property(e => e.OldcustName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCustName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblCustomer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblCusto__A4AE64B82D1F2D16");

            entity.ToTable("tblCustomer");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblCustomer1>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblCusto__A4AE64B831E3E233");

            entity.ToTable("tblCustomer1");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Dob)
                .HasColumnType("datetime")
                .HasColumnName("DOB");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo).HasColumnName("Phone_no");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblCustomerMast>(entity =>
        {
            entity.HasKey(e => e.CustmerId).HasName("PK__tblCusto__FC78F38C5145E845");

            entity.ToTable("tblCustomerMast", tb =>
                {
                    tb.HasTrigger("trgCustomerHistory2");
                    tb.HasTrigger("trgCustomerMast3");
                });

            entity.Property(e => e.CustmerId).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.CustmerName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.TotalPrice).HasColumnType("money");
        });

        modelBuilder.Entity<TblDatabaseLog>(entity =>
        {
            entity.HasKey(e => e.DatabaseLogId)
                .HasName("PK_DatabaseLog_DatabaseLogID")
                .IsClustered(false);

            entity.ToTable("tblDatabaseLog");

            entity.Property(e => e.DatabaseLogId).HasColumnName("DatabaseLogID");
            entity.Property(e => e.ClientHost)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DatabaseUser).HasMaxLength(128);
            entity.Property(e => e.Event).HasMaxLength(128);
            entity.Property(e => e.Object).HasMaxLength(128);
            entity.Property(e => e.PostTime).HasColumnType("datetime");
            entity.Property(e => e.Schema).HasMaxLength(128);
            entity.Property(e => e.Tsql).HasColumnName("TSQL");
            entity.Property(e => e.XmlEvent).HasColumnType("xml");
        });

        modelBuilder.Entity<TblDbenableErrorLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDBEnableErrorLog");
        });

        modelBuilder.Entity<TblDberrorLog>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK__tblDBErr__5E5499A82A6B46EF");

            entity.ToTable("tblDBErrorLog");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("LogID");
            entity.Property(e => e.ErrorMsg).HasMaxLength(2048);
            entity.Property(e => e.ParamValue)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Spname)
                .HasMaxLength(126)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TblDbuserwiseObjectRightsChangedHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDBUserwiseObjectRightsChangedHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.ChangedByUserName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ClientIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ClientIP");
            entity.Property(e => e.GiveRevert)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.ObjectNames)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.ObjectType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDbuserwiseObjectRightsChangedHistoryDetail>(entity =>
        {
            entity.HasKey(e => e.HistoryDetId);

            entity.ToTable("tblDBUserwiseObjectRightsChangedHistoryDetails");

            entity.Property(e => e.HistoryDetId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryDetID");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDdleventLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDDLEventLog");

            entity.Property(e => e.CommandText)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DatabaseName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventType)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID");
            entity.Property(e => e.ObjectName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ObjectType)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.ServerName)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDdltest>(entity =>
        {
            entity.HasKey(e => e.TestId).HasName("PK__tblDDLTest__42ADB02B");

            entity.ToTable("tblDDLTest");

            entity.Property(e => e.TestId)
                .ValueGeneratedNever()
                .HasColumnName("Test_ID");
            entity.Property(e => e.TestDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Test_Desc");
            entity.Property(e => e.TestLast)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Test_Last");
            entity.Property(e => e.TestName)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("Test_Name");
        });

        modelBuilder.Entity<TblDepartmentMaster>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK__tblDepar__B2079BCDD458DEA0");

            entity.ToTable("tblDepartmentMaster", tb => tb.HasTrigger("trgDepartmentMasterHistory"));

            entity.Property(e => e.DepartmentId)
                .ValueGeneratedNever()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DepartmentTypeId).HasColumnName("DepartmentTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDepartmentMaster1>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PK__tblDepar__B2079BCD55394A7B");

            entity.ToTable("tblDepartmentMaster1");

            entity.HasIndex(e => e.DepartmentCode, "UQ__tblDepar__6EA8896D762B3BF6").IsUnique();

            entity.HasIndex(e => e.DepartmentName, "UQ__tblDepar__D949CC34693F5FF7").IsUnique();

            entity.Property(e => e.DepartmentId)
                .ValueGeneratedNever()
                .HasColumnName("DepartmentID");
            entity.Property(e => e.DepartmentCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDepartmentMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblDepar__6B4108E608EB84EA");

            entity.ToTable("tblDepartmentMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblDepartmentMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDepar__4D7B4ADD1BB88296");

            entity.ToTable("tblDepartmentMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewdepartmentCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWDepartmentCode");
            entity.Property(e => e.NewdepartmentName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWDepartmentName");
            entity.Property(e => e.NewdepartmentTypeId).HasColumnName("NEWDepartmentTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OlddepartmentCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDDepartmentCode");
            entity.Property(e => e.OlddepartmentName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDDepartmentName");
            entity.Property(e => e.OlddepartmentTypeId).HasColumnName("OLDDepartmentTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblDepartmentTypeMaster>(entity =>
        {
            entity.HasKey(e => e.DepartmentTypeId).HasName("PK__tblDepar__FC33D07767E8F6AE");

            entity.ToTable("tblDepartmentTypeMaster");

            entity.Property(e => e.DepartmentTypeId)
                .ValueGeneratedNever()
                .HasColumnName("DepartmentTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartmentTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDepartmentTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblDepar__6B4108E6A418D015");

            entity.ToTable("tblDepartmentTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblDepartmentTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDepar__4D7B4ADDF07ACAA7");

            entity.ToTable("tblDepartmentTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DepartmentTypeId).HasColumnName("DepartmentTypeID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewdepartmentTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWDepartmentTypeCode");
            entity.Property(e => e.NewdepartmentTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDepartmentTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OlddepartmentTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDDepartmentTypeCode");
            entity.Property(e => e.OlddepartmentTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDepartmentTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblDept>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_dept");

            entity.Property(e => e.Cdeptname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cdeptname");
            entity.Property(e => e.Ideptid).HasColumnName("ideptid");
            entity.Property(e => e.Iempid).HasColumnName("iempid");
        });

        modelBuilder.Entity<TblDeptHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDeptHistory");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.HistoryBy)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewDeptDescription).HasMaxLength(250);
            entity.Property(e => e.NewDeptName).HasMaxLength(50);
            entity.Property(e => e.OldDeptDescription).HasMaxLength(250);
            entity.Property(e => e.OldDeptName).HasMaxLength(50);
        });

        modelBuilder.Entity<TblDeptMaster>(entity =>
        {
            entity.HasKey(e => e.DepartmentTypeId).HasName("PK__tblDeptM__FC33D077CB8C9BF8");

            entity.ToTable("tblDeptMaster");

            entity.Property(e => e.DepartmentTypeId)
                .ValueGeneratedNever()
                .HasColumnName("DepartmentTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartmentTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DepartmentTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDeptMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblDeptM__6B4108E6FE0E3947");

            entity.ToTable("tblDeptMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblDeptMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDeptMasterDetail");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.DeptName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblDeptMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDeptM__4D7B4ADD95C80CCF");

            entity.ToTable("tblDeptMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DepartmentTypeId).HasColumnName("DepartmentTypeID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewdepartmentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDepartmentTypeCode");
            entity.Property(e => e.NewdepartmentTypeName).HasColumnName("NEWDepartmentTypeName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OlddepartmentTypeCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDepartmentTypeCode");
            entity.Property(e => e.OlddepartmentTypeName).HasColumnName("OLDDepartmentTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblDesiyaCityList>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaCityList");

            entity.Property(e => e.City).IsUnicode(false);
            entity.Property(e => e.F2).HasMaxLength(255);
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDesiyaFacility>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaFacilities");

            entity.Property(e => e.AmenityId)
                .IsUnicode(false)
                .HasColumnName("Amenity_id");
            entity.Property(e => e.AmenityType).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblDesiyaHotelOverViewAll>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaHotelOverViewAll");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Address1).IsUnicode(false);
            entity.Property(e => e.Address2).IsUnicode(false);
            entity.Property(e => e.Area).IsUnicode(false);
            entity.Property(e => e.AreaSeoId)
                .IsUnicode(false)
                .HasColumnName("Area_Seo_Id");
            entity.Property(e => e.City).IsUnicode(false);
            entity.Property(e => e.CityZone)
                .IsUnicode(false)
                .HasColumnName("City_Zone");
            entity.Property(e => e.Country).IsUnicode(false);
            entity.Property(e => e.DefaultCheckInTime).IsUnicode(false);
            entity.Property(e => e.DefaultCheckOutTime).IsUnicode(false);
            entity.Property(e => e.HotelClass).IsUnicode(false);
            entity.Property(e => e.HotelGroupId)
                .IsUnicode(false)
                .HasColumnName("HotelGroupID");
            entity.Property(e => e.HotelGroupName).IsUnicode(false);
            entity.Property(e => e.HotelOverview).IsUnicode(false);
            entity.Property(e => e.HotelSearchKey).IsUnicode(false);
            entity.Property(e => e.HotelStar)
                .IsUnicode(false)
                .HasColumnName("Hotel_Star");
            entity.Property(e => e.ImagePath).IsUnicode(false);
            entity.Property(e => e.Latitude).IsUnicode(false);
            entity.Property(e => e.Location).IsUnicode(false);
            entity.Property(e => e.Longitude).IsUnicode(false);
            entity.Property(e => e.OriginalVendorId).IsUnicode(false);
            entity.Property(e => e.OriginalVendorName).IsUnicode(false);
            entity.Property(e => e.ReviewCount).IsUnicode(false);
            entity.Property(e => e.ReviewRating).IsUnicode(false);
            entity.Property(e => e.TgroomsType)
                .IsUnicode(false)
                .HasColumnName("TGRoomsType");
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName).IsUnicode(false);
            entity.Property(e => e.WeekdayRank)
                .IsUnicode(false)
                .HasColumnName("WEEKDAY_RANK");
            entity.Property(e => e.WeekendRank)
                .IsUnicode(false)
                .HasColumnName("WEEKEND_RANK");
            entity.Property(e => e.YatraTripleGurantee).IsUnicode(false);
        });

        modelBuilder.Entity<TblDesiyaHotelOverview>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaHotelOverview");

            entity.Property(e => e.Address).IsUnicode(false);
            entity.Property(e => e.Address1).IsUnicode(false);
            entity.Property(e => e.Address2).IsUnicode(false);
            entity.Property(e => e.Area).IsUnicode(false);
            entity.Property(e => e.AreaSeoId)
                .IsUnicode(false)
                .HasColumnName("Area_Seo_Id");
            entity.Property(e => e.City).IsUnicode(false);
            entity.Property(e => e.CityZone)
                .IsUnicode(false)
                .HasColumnName("City_Zone");
            entity.Property(e => e.Country).IsUnicode(false);
            entity.Property(e => e.DefaultCheckInTime).IsUnicode(false);
            entity.Property(e => e.DefaultCheckOutTime).IsUnicode(false);
            entity.Property(e => e.HotelClass).IsUnicode(false);
            entity.Property(e => e.HotelGroupId)
                .IsUnicode(false)
                .HasColumnName("HotelGroupID");
            entity.Property(e => e.HotelGroupName).IsUnicode(false);
            entity.Property(e => e.HotelOverview).IsUnicode(false);
            entity.Property(e => e.HotelSearchKey).IsUnicode(false);
            entity.Property(e => e.HotelStar)
                .IsUnicode(false)
                .HasColumnName("Hotel_Star");
            entity.Property(e => e.ImagePath).IsUnicode(false);
            entity.Property(e => e.Latitude).IsUnicode(false);
            entity.Property(e => e.Location).IsUnicode(false);
            entity.Property(e => e.Longitude).IsUnicode(false);
            entity.Property(e => e.OriginalVendorId).IsUnicode(false);
            entity.Property(e => e.OriginalVendorName).IsUnicode(false);
            entity.Property(e => e.ReviewCount).IsUnicode(false);
            entity.Property(e => e.ReviewRating).IsUnicode(false);
            entity.Property(e => e.TgroomsType)
                .IsUnicode(false)
                .HasColumnName("TGRoomsType");
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName).IsUnicode(false);
            entity.Property(e => e.WeekdayRank)
                .IsUnicode(false)
                .HasColumnName("WEEKDAY_RANK");
            entity.Property(e => e.WeekendRank)
                .IsUnicode(false)
                .HasColumnName("WEEKEND_RANK");
            entity.Property(e => e.YatraTripleGurantee).IsUnicode(false);
        });

        modelBuilder.Entity<TblDesiyaHotelReview>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaHotelReviews");

            entity.Property(e => e.AvgGuestRating).IsUnicode(false);
            entity.Property(e => e.Cleanliness).IsUnicode(false);
            entity.Property(e => e.Comments).IsUnicode(false);
            entity.Property(e => e.ConsumerCity)
                .IsUnicode(false)
                .HasColumnName("Consumer_city");
            entity.Property(e => e.ConsumerCountry)
                .IsUnicode(false)
                .HasColumnName("Consumer_Country");
            entity.Property(e => e.CustomerName)
                .IsUnicode(false)
                .HasColumnName("Customer_name");
            entity.Property(e => e.DiningQuality).IsUnicode(false);
            entity.Property(e => e.OverallRating).IsUnicode(false);
            entity.Property(e => e.PostDate)
                .IsUnicode(false)
                .HasColumnName("Post_Date");
            entity.Property(e => e.RoomQuality).IsUnicode(false);
            entity.Property(e => e.ServiceQuality).IsUnicode(false);
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblDesiyaImageUrl>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaImageUrls");

            entity.Property(e => e.ContentTitle).IsUnicode(false);
            entity.Property(e => e.ImageUrl).IsUnicode(false);
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblDesiyaInAndAround>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaInAndAround");

            entity.Property(e => e.DistanceInKm).IsUnicode(false);
            entity.Property(e => e.NameOfAttraction).IsUnicode(false);
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblDesiyaPoiDatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaPOI_Data");

            entity.Property(e => e.CityId)
                .IsUnicode(false)
                .HasColumnName("City_Id");
            entity.Property(e => e.CityName)
                .IsUnicode(false)
                .HasColumnName("City_Name");
            entity.Property(e => e.Latitude)
                .IsUnicode(false)
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .IsUnicode(false)
                .HasColumnName("longitude");
            entity.Property(e => e.PoiId)
                .IsUnicode(false)
                .HasColumnName("Poi_Id");
            entity.Property(e => e.PoiName)
                .IsUnicode(false)
                .HasColumnName("Poi_Name");
            entity.Property(e => e.PoiSeoId)
                .IsUnicode(false)
                .HasColumnName("Poi_Seo_Id");
            entity.Property(e => e.SeoCityName)
                .IsUnicode(false)
                .HasColumnName("Seo_City_Name");
        });

        modelBuilder.Entity<TblDesiyaRoomDescription>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaRoomDescription");

            entity.Property(e => e.ImagePath).IsUnicode(false);
            entity.Property(e => e.MaxAdultOccupancy)
                .IsUnicode(false)
                .HasColumnName("Max_Adult_Occupancy");
            entity.Property(e => e.MaxChildOccupancy)
                .IsUnicode(false)
                .HasColumnName("Max_Child_Occupancy");
            entity.Property(e => e.MaxGuestOccupancy)
                .IsUnicode(false)
                .HasColumnName("Max_Guest_Occupancy");
            entity.Property(e => e.MaxInfantOccupancy)
                .IsUnicode(false)
                .HasColumnName("Max_Infant_Occupancy");
            entity.Property(e => e.RoomDescription).IsUnicode(false);
            entity.Property(e => e.RoomType).IsUnicode(false);
            entity.Property(e => e.RoomTypeId)
                .IsUnicode(false)
                .HasColumnName("RoomTypeID");
            entity.Property(e => e.VendorId)
                .IsUnicode(false)
                .HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblDesiyaSecondaryArea>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaSecondaryAreas");

            entity.Property(e => e.SecondaryAreaIds).IsUnicode(false);
            entity.Property(e => e.SecondaryAreaName).IsUnicode(false);
            entity.Property(e => e.VendorId).IsUnicode(false);
            entity.Property(e => e.VendorName).IsUnicode(false);
        });

        modelBuilder.Entity<TblDesiyaThemeAndCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDesiyaThemeAndCategory");

            entity.Property(e => e.CategoryList).IsUnicode(false);
            entity.Property(e => e.ThemeList).IsUnicode(false);
            entity.Property(e => e.VendorId).IsUnicode(false);
            entity.Property(e => e.VendorName).IsUnicode(false);
        });

        modelBuilder.Entity<TblDhavanCommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDhavanCommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblDhavanEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tblDhava__3214EC2773809507");

            entity.ToTable("tblDhavanEntry");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CreateCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Ename)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("EName");
            entity.Property(e => e.EntryDate).HasColumnType("datetime");
            entity.Property(e => e.EntryId).HasColumnName("EntryID");
            entity.Property(e => e.EntryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EntryZone)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDhavanHist>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDhava__4D7B4ADD17AA5EA1");

            entity.ToTable("tblDhavanHist");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.EntryType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EntryZone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NewEntryDate).HasColumnType("datetime");
            entity.Property(e => e.NewEntryId).HasColumnName("NewEntryID");
            entity.Property(e => e.OldEntryDate).HasColumnType("datetime");
            entity.Property(e => e.OldEntryId).HasColumnName("OldEntryID");
        });

        modelBuilder.Entity<TblDhavanHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDhava__4D7B4ADDDC6B2665");

            entity.ToTable("tblDhavanHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewEmpCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.NewEmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OldEmpCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OldEmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserTypeId).HasColumnName("UserTypeID");
        });

        modelBuilder.Entity<TblDhavanMaster>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblDhava__AF2DBA7916C29B0D");

            entity.ToTable("tblDhavanMaster");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tblDisco__3214EC072A6030F4");

            entity.ToTable("tblDiscount");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DAmount)
                .HasMaxLength(10)
                .HasColumnName("d_amount");
            entity.Property(e => e.DCouponCode)
                .HasMaxLength(10)
                .HasColumnName("d_coupon_code");
            entity.Property(e => e.DEvent)
                .HasMaxLength(50)
                .HasColumnName("d_event");
            entity.Property(e => e.DName)
                .HasMaxLength(50)
                .HasColumnName("d_name");
            entity.Property(e => e.DStatus)
                .HasMaxLength(50)
                .HasColumnName("d_status");
        });

        modelBuilder.Entity<TblDistAdminMenuInVisibleByDistType>(entity =>
        {
            entity.ToTable("tblDistAdminMenuInVisibleByDistType", tb =>
                {
                    tb.HasTrigger("trgDistAdminMenuInVisibleByDistTypeHistory");
                    tb.HasTrigger("trgSyncDistAdminMenuInVisibleByDistType");
                });

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.TypeDetId).HasColumnName("TypeDetID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDistAdminMenuInVisibleByDistTypeHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDistAdminMenuInVisibleByDistTypeHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewmenuId).HasColumnName("NEWMenuID");
            entity.Property(e => e.NewtypeDetId).HasColumnName("NEWTypeDetID");
            entity.Property(e => e.OldmenuId).HasColumnName("OLDMenuID");
            entity.Property(e => e.OldtypeDetId).HasColumnName("OLDTypeDetID");
        });

        modelBuilder.Entity<TblDistAdminMenuMaster>(entity =>
        {
            entity.HasKey(e => e.MenuId);

            entity.ToTable("tblDistAdminMenuMaster", tb =>
                {
                    tb.HasTrigger("trgDistAdminMenuMasterHistory");
                    tb.HasTrigger("trgSyncDistAdminMenuMaster");
                });

            entity.Property(e => e.MenuId)
                .ValueGeneratedNever()
                .HasColumnName("MenuID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.LogoUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuControlName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuKey)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.MenuToolTip)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentMenuId).HasColumnName("ParentMenuID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDistAdminMenuMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDistAdminMenuMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewisNewWindow).HasColumnName("NEWIsNewWindow");
            entity.Property(e => e.NewlogoUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWLogoUrl");
            entity.Property(e => e.NewmenuCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMenuCaption");
            entity.Property(e => e.NewmenuControlName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMenuControlName");
            entity.Property(e => e.NewmenuKey)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("NEWMenuKey");
            entity.Property(e => e.NewmenuLevel).HasColumnName("NEWMenuLevel");
            entity.Property(e => e.NewmenuToolTip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMenuToolTip");
            entity.Property(e => e.NeworderNo).HasColumnName("NEWOrderNo");
            entity.Property(e => e.NewparentMenuId).HasColumnName("NEWParentMenuID");
            entity.Property(e => e.NewsubMenuNo).HasColumnName("NEWSubMenuNo");
            entity.Property(e => e.NewtotSubMenu).HasColumnName("NEWTotSubMenu");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldisNewWindow).HasColumnName("OLDIsNewWindow");
            entity.Property(e => e.OldlogoUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDLogoUrl");
            entity.Property(e => e.OldmenuCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMenuCaption");
            entity.Property(e => e.OldmenuControlName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMenuControlName");
            entity.Property(e => e.OldmenuKey)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("OLDMenuKey");
            entity.Property(e => e.OldmenuLevel).HasColumnName("OLDMenuLevel");
            entity.Property(e => e.OldmenuToolTip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMenuToolTip");
            entity.Property(e => e.OldorderNo).HasColumnName("OLDOrderNo");
            entity.Property(e => e.OldparentMenuId).HasColumnName("OLDParentMenuID");
            entity.Property(e => e.OldsubMenuNo).HasColumnName("OLDSubMenuNo");
            entity.Property(e => e.OldtotSubMenu).HasColumnName("OLDTotSubMenu");
        });

        modelBuilder.Entity<TblDistAdminMenuRight>(entity =>
        {
            entity.HasKey(e => new { e.MenuId, e.DistributorId });

            entity.ToTable("tblDistAdminMenuRights", tb => tb.HasTrigger("trgDistAdminMenuRightsHistory"));

            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDistAdminMenuRightsHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDistAdminMenuRightsHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.NewisAdd).HasColumnName("NEWIsAdd");
            entity.Property(e => e.NewisAllowed).HasColumnName("NEWIsAllowed");
            entity.Property(e => e.NewisDelete).HasColumnName("NEWIsDelete");
            entity.Property(e => e.NewisEdit).HasColumnName("NEWIsEdit");
            entity.Property(e => e.NewisPrint).HasColumnName("NEWIsPrint");
            entity.Property(e => e.OldisAdd).HasColumnName("OLDIsAdd");
            entity.Property(e => e.OldisAllowed).HasColumnName("OLDIsAllowed");
            entity.Property(e => e.OldisDelete).HasColumnName("OLDIsDelete");
            entity.Property(e => e.OldisEdit).HasColumnName("OLDIsEdit");
            entity.Property(e => e.OldisPrint).HasColumnName("OLDIsPrint");
        });

        modelBuilder.Entity<TblDistAdminPageMaster>(entity =>
        {
            entity.HasKey(e => e.PageId);

            entity.ToTable("tblDistAdminPageMaster", tb =>
                {
                    tb.HasTrigger("trgDistAdminPageMasterHistory");
                    tb.HasTrigger("trgSyncDistAdminPageMaster");
                });

            entity.Property(e => e.PageId)
                .ValueGeneratedNever()
                .HasColumnName("PageID");
            entity.Property(e => e.BitMenuDefaultPage).HasColumnName("bitMenuDefaultPage");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.PageCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PageUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PageURL");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDistAdminPageMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDistAdminPageMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbitMenuDefaultPage).HasColumnName("NEWbitMenuDefaultPage");
            entity.Property(e => e.NewisMaintenance).HasColumnName("NEWIsMaintenance");
            entity.Property(e => e.NewmaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMaintenanceMessage");
            entity.Property(e => e.NewmenuId).HasColumnName("NEWMenuID");
            entity.Property(e => e.NewpageCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWPageCaption");
            entity.Property(e => e.NewpageUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWPageURL");
            entity.Property(e => e.OldbitMenuDefaultPage).HasColumnName("OLDbitMenuDefaultPage");
            entity.Property(e => e.OldisMaintenance).HasColumnName("OLDIsMaintenance");
            entity.Property(e => e.OldmaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMaintenanceMessage");
            entity.Property(e => e.OldmenuId).HasColumnName("OLDMenuID");
            entity.Property(e => e.OldpageCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDPageCaption");
            entity.Property(e => e.OldpageUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDPageURL");
            entity.Property(e => e.PageId).HasColumnName("PageID");
        });

        modelBuilder.Entity<TblDistAdminUser>(entity =>
        {
            entity.HasKey(e => e.UserId);

            entity.ToTable("tblDistAdminUsers");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorLimitApprovalDetail>(entity =>
        {
            entity.HasKey(e => e.LimitApprovalDetId).HasName("PK__tblDistr__4085EADA5C77A3CF");

            entity.ToTable("tblDistributorLimitApprovalDetails");

            entity.Property(e => e.LimitApprovalDetId)
                .ValueGeneratedNever()
                .HasColumnName("LimitApprovalDetID");
            entity.Property(e => e.AppRejById).HasColumnName("AppRejByID");
            entity.Property(e => e.AppRejDate).HasColumnType("datetime");
            entity.Property(e => e.AppRejRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.BankBranch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankId).HasColumnName("BankID");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CashChqDddate)
                .HasColumnType("datetime")
                .HasColumnName("CashChqDDDate");
            entity.Property(e => e.ChqDdno)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ChqDDNo");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.PaymentGatewayPgapiprocessLinkId).HasColumnName("PaymentGatewayPGAPIProcessLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestId).HasColumnName("RequestID");
            entity.Property(e => e.RequestType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TranAmount).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDistributorLimitApprovalDetailsMax>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDistributorLimitApprovalDetailsMax");

            entity.Property(e => e.MaxId).HasColumnName("MaxID");
        });

        modelBuilder.Entity<TblDistributorMaster>(entity =>
        {
            entity.HasKey(e => e.DistributorId).HasName("PK_tblDistributorMaster_DistributorID");

            entity.ToTable("tblDistributorMaster");

            entity.Property(e => e.DistributorId)
                .ValueGeneratedNever()
                .HasColumnName("DistributorID");
            entity.Property(e => e.ActivationDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.ActivationRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Add1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Add2)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Add3)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.AlternateEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ApioperatorLinkId).HasColumnName("APIOperatorLinkID");
            entity.Property(e => e.BankAccountNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankBranch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BenameOfOrg1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BENameOfOrg1");
            entity.Property(e => e.BenameOfOrg2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BENameOfOrg2");
            entity.Property(e => e.BenatureOfBusiness1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BENatureOfBusiness1");
            entity.Property(e => e.BenatureOfBusiness2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BENatureOfBusiness2");
            entity.Property(e => e.BenoOfEmp1)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BENoOfEmp1");
            entity.Property(e => e.BenoOfEmp2)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("BENoOfEmp2");
            entity.Property(e => e.BeproductLine1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BEProductLine1");
            entity.Property(e => e.BeproductLine2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("BEProductLine2");
            entity.Property(e => e.BeturnOverRs1)
                .HasColumnType("money")
                .HasColumnName("BETurnOverRs1");
            entity.Property(e => e.BeturnOverRs2)
                .HasColumnType("money")
                .HasColumnName("BETurnOverRs2");
            entity.Property(e => e.BeyearFrom1).HasColumnName("BEYearFrom1");
            entity.Property(e => e.BeyearFrom2).HasColumnName("BEYearFrom2");
            entity.Property(e => e.BeyearTo1).HasColumnName("BEYearTo1");
            entity.Property(e => e.BeyearTo2).HasColumnName("BEYearTo2");
            entity.Property(e => e.BusinessType)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Cad)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("CAD");
            entity.Property(e => e.CardCityId).HasColumnName("CardCityID");
            entity.Property(e => e.CardId).HasColumnName("CardID");
            entity.Property(e => e.Ccode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("CCODE");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CmpName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DistributorGroupDealId).HasColumnName("DistributorGroupDealID");
            entity.Property(e => e.DistributorGroupDealIdint).HasColumnName("DistributorGroupDealIDINT");
            entity.Property(e => e.DistributorGroupForexId).HasColumnName("DistributorGroupForexID");
            entity.Property(e => e.DistributorGroupGdsid).HasColumnName("DistributorGroupGDSID");
            entity.Property(e => e.DistributorGroupInsuranceId).HasColumnName("DistributorGroupInsuranceID");
            entity.Property(e => e.EduQualification)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.EmpCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.IrctcuserId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("IRCTCUserID");
            entity.Property(e => e.IsAirallowBookingMarkup).HasColumnName("IsAIRAllowBookingMarkup");
            entity.Property(e => e.IsCcdifferentForLcciata).HasColumnName("IsCCDifferentForLCCIATA");
            entity.Property(e => e.IsEmailSmssent).HasColumnName("IsEmailSMSSent");
            entity.Property(e => e.IsIataagent).HasColumnName("IsIATAAgent");
            entity.Property(e => e.IsIrctcagent).HasColumnName("IsIRCTCAgent");
            entity.Property(e => e.IsIrctcagentActive).HasColumnName("IsIRCTCAgentActive");
            entity.Property(e => e.IsPnremailAlerts).HasColumnName("IsPNREmailAlerts");
            entity.Property(e => e.IsPnrsmsalerts).HasColumnName("IsPNRSMSAlerts");
            entity.Property(e => e.IsProfileUpdated)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.IsSendReminderSms).HasColumnName("IsSendReminderSMS");
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.Level1DistributorId).HasColumnName("Level1DistributorID");
            entity.Property(e => e.Level1ReferredByDistributorId).HasColumnName("Level1ReferredByDistributorID");
            entity.Property(e => e.Level2DistributorId).HasColumnName("Level2DistributorID");
            entity.Property(e => e.Level2ReferredByDistributorId).HasColumnName("Level2ReferredByDistributorID");
            entity.Property(e => e.Level3ReferredByDistributorId).HasColumnName("Level3ReferredByDistributorID");
            entity.Property(e => e.Level4ReferredByDistributorId).HasColumnName("Level4ReferredByDistributorID");
            entity.Property(e => e.Level5ReferredByDistributorId).HasColumnName("Level5ReferredByDistributorID");
            entity.Property(e => e.Level6ReferredByDistributorId).HasColumnName("Level6ReferredByDistributorID");
            entity.Property(e => e.Level7ReferredByDistributorId).HasColumnName("Level7ReferredByDistributorID");
            entity.Property(e => e.LoginName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LogoImageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("LogoImageURL");
            entity.Property(e => e.MaintenanceChargeDetId).HasColumnName("MaintenanceChargeDetID");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(9)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.MasterDistributorId).HasColumnName("MasterDistributorID");
            entity.Property(e => e.Mobile)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.NameOfBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.OfficeSpace)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Padd1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PAdd1");
            entity.Property(e => e.Padd2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAdd2");
            entity.Property(e => e.Padd3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAdd3");
            entity.Property(e => e.PaidAmount).HasColumnType("money");
            entity.Property(e => e.PaidDateTime)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.Pan)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PAN");
            entity.Property(e => e.PandocImg)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PANDocImg");
            entity.Property(e => e.PartnerAge1)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PartnerAge2)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.PartnerName1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartnerName2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartnerOtherBusiness1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PartnerOtherBusiness2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PCity");
            entity.Property(e => e.Pcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PCountry");
            entity.Property(e => e.Pfax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFax");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pincode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMobile");
            entity.Property(e => e.Pphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPhone");
            entity.Property(e => e.Ppincode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPincode");
            entity.Property(e => e.Pstate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PState");
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceDet1)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ReferenceDet2)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.RegistrationAmount).HasColumnType("money");
            entity.Property(e => e.ReminderBalance).HasColumnType("money");
            entity.Property(e => e.ReminderInterval).HasColumnType("money");
            entity.Property(e => e.RequestId).HasColumnName("RequestID");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TranAllowedRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.TranPwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TransactionCredit).HasColumnType("money");
            entity.Property(e => e.TrialStartDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.TrialUpgradationDate)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime");
            entity.Property(e => e.TypeDetId).HasColumnName("TypeDetID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpgradationRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.UserRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.YearInBusiness)
                .HasMaxLength(3)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorMaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDistributorMaster1");

            entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.IsEmailSmssent).HasColumnName("IsEmailSMSSent");
            entity.Property(e => e.IsPnremailAlerts).HasColumnName("IsPNREmailAlerts");
            entity.Property(e => e.IsPnrsmsalerts).HasColumnName("IsPNRSMSAlerts");
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeFax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficePinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.OfficeState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Panno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PANNo");
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidPhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResidPinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ResidState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TrialStartDate).HasColumnType("datetime");
            entity.Property(e => e.TrialUpgradationDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradationRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorMasterAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDistributorMasterATO");

            entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CompName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.IsEmailSmssent).HasColumnName("IsEmailSMSSent");
            entity.Property(e => e.IsPnremailAlerts).HasColumnName("IsPNREmailAlerts");
            entity.Property(e => e.IsPnrsmsalerts).HasColumnName("IsPNRSMSAlerts");
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Occupation)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeFax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficePinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.OfficeState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Panno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PANNo");
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidPhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResidPinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ResidState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.TrialStartDate).HasColumnType("datetime");
            entity.Property(e => e.TrialUpgradationDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.UpgradationRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorMasterPrakash>(entity =>
        {
            entity.HasKey(e => e.DistributorId);

            entity.ToTable("tblDistributorMasterPrakash");

            entity.Property(e => e.DistributorId).ValueGeneratedNever();
            entity.Property(e => e.Address1)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.DistributorName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OpeningBalance).HasColumnType("money");
            entity.Property(e => e.OpeningQty).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorMasterPrakashCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_tblDistributorMasterPrakashCommandIds");

            entity.ToTable("tblDistributorMasterPrakashCommands");

            entity.Property(e => e.CommandDes)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblDistributorMasterPrakashHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblDistributorMasterPrakashHistory");

            entity.Property(e => e.HistoryId).ValueGeneratedNever();
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Newaddress1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWAddress1");
            entity.Property(e => e.Newaddress2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWAddress2");
            entity.Property(e => e.Newaddress3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWAddress3");
            entity.Property(e => e.Newcity)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.Newcountry)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NEWCountry");
            entity.Property(e => e.NewdistributorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDistributorName");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWEmailId");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewjoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWJoiningDate");
            entity.Property(e => e.NewmobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWMobileNo");
            entity.Property(e => e.NewopeningBalance)
                .HasColumnType("money")
                .HasColumnName("NEWOpeningBalance");
            entity.Property(e => e.NewopeningQty)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWOpeningQty");
            entity.Property(e => e.Newphone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("NEWPhone");
            entity.Property(e => e.NewpinCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("NEWPinCode");
            entity.Property(e => e.Newstate)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("NEWState");
            entity.Property(e => e.Oldaddress1)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDAddress1");
            entity.Property(e => e.Oldaddress2)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDAddress2");
            entity.Property(e => e.Oldaddress3)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDAddress3");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.Oldcountry)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OLDCountry");
            entity.Property(e => e.OlddistributorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDistributorName");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDEmailId");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldjoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDJoiningDate");
            entity.Property(e => e.OldmobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDMobileNo");
            entity.Property(e => e.OldopeningBalance)
                .HasColumnType("money")
                .HasColumnName("OLDOpeningBalance");
            entity.Property(e => e.OldopeningQty)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDOpeningQty");
            entity.Property(e => e.Oldphone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("OLDPhone");
            entity.Property(e => e.OldpinCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasColumnName("OLDPinCode");
            entity.Property(e => e.Oldstate)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("OLDState");
        });

        modelBuilder.Entity<TblDistributorMasterRto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDistributorMasterRTO");

            entity.Property(e => e.ActivationDate).HasColumnType("datetime");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreatedDateTime).HasColumnType("datetime");
            entity.Property(e => e.CurrentSessionId)
                .HasMaxLength(19)
                .IsUnicode(false)
                .HasColumnName("CurrentSessionID");
            entity.Property(e => e.Designation)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.DistributorShipAmt).HasColumnType("money");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirmName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ForgotPswdAns)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ForgotPswdQueId).HasColumnName("ForgotPswdQueID");
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.IrctcsubPassword)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IRCTCSubPassword");
            entity.Property(e => e.IrctcsubTranPassword)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IRCTCSubTranPassword");
            entity.Property(e => e.IrctcsubTranUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IRCTCSubTranUserID");
            entity.Property(e => e.IrctcsubUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("IRCTCSubUserID");
            entity.Property(e => e.IsEmailSmssent).HasColumnName("IsEmailSMSSent");
            entity.Property(e => e.IsEtokenReceived).HasColumnName("IsETokenReceived");
            entity.Property(e => e.IsPnremailAlerts).HasColumnName("IsPNREmailAlerts");
            entity.Property(e => e.IsPnrsmsalerts).HasColumnName("IsPNRSMSAlerts");
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.LastName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.MaritalStatus)
                .HasMaxLength(9)
                .IsUnicode(false);
            entity.Property(e => e.MiddleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(11)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OfficeFax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhoneExt)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.OfficePhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.OfficePinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.OfficeState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Panno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PANNo");
            entity.Property(e => e.Pwd)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidAddressLine3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ResidCity)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidCountry)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ResidPhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.ResidPinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ResidState)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ShippingAddressPref)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.TrialActivationdate).HasColumnType("datetime");
            entity.Property(e => e.TrialStartDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblDistributorMasterTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDistributorMasterTemp");

            entity.Property(e => e.Add1)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Add2)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Add3)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CmpName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.DistributorCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.Level1DistributorId).HasColumnName("Level1DistributorID");
            entity.Property(e => e.Level2DistributorId).HasColumnName("Level2DistributorID");
            entity.Property(e => e.Mobile)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.Padd1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAdd1");
            entity.Property(e => e.Padd2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAdd2");
            entity.Property(e => e.Padd3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("PAdd3");
            entity.Property(e => e.Pan)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PAN");
            entity.Property(e => e.Pcity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PCity");
            entity.Property(e => e.Pcountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PCountry");
            entity.Property(e => e.Pfax)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PFax");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Pincode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Pmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("PMobile");
            entity.Property(e => e.Pphone)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PPhone");
            entity.Property(e => e.Ppincode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("PPincode");
            entity.Property(e => e.Pstate)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PState");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TranPwd)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TypeId).HasColumnName("TypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDob>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblDOB");

            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<TblDtl>(entity =>
        {
            entity.HasKey(e => e.IntCompId);

            entity.ToTable("tblDtl");

            entity.Property(e => e.IntCompId)
                .ValueGeneratedNever()
                .HasColumnName("intCompId");
            entity.Property(e => e.Empno).HasColumnName("empno");
            entity.Property(e => e.Loc)
                .HasMaxLength(30)
                .HasColumnName("loc");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<TblDummyMaster>(entity =>
        {
            entity.HasKey(e => e.DummyId).HasName("PK__tblDummy__802EA53B5DEAEAF5");

            entity.ToTable("tblDummyMaster");

            entity.Property(e => e.DummyId)
                .ValueGeneratedNever()
                .HasColumnName("DummyID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DummyMasterId).HasColumnName("DummyMasterID");
            entity.Property(e => e.DummyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DummyRole)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DummySurname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblDummyMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblDummy__4D7B4ADD61BB7BD9");

            entity.ToTable("tblDummyMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DummyId).HasColumnName("DummyID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewdummyMasterId).HasColumnName("NEWDummyMasterID");
            entity.Property(e => e.NewdummyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDummyName");
            entity.Property(e => e.NewdummyRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDummyRole");
            entity.Property(e => e.NewdummySurname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDummySurname");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OlddummyMasterId).HasColumnName("OLDDummyMasterID");
            entity.Property(e => e.OlddummyName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDummyName");
            entity.Property(e => e.OlddummyRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDummyRole");
            entity.Property(e => e.OlddummySurname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDummySurname");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblEm>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEM__AF2DBA790F2E0C25");

            entity.ToTable("tblEM");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.EmpJoiningDate).HasColumnType("datetime");
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpSalary).HasColumnType("money");
        });

        modelBuilder.Entity<TblEmp1>(entity =>
        {
            entity.HasKey(e => e.Iempid).HasName("PK__tbl_emp__759E5D5056D4A469");

            entity.ToTable("tbl_emp");

            entity.Property(e => e.Iempid)
                .ValueGeneratedNever()
                .HasColumnName("iempid");
            entity.Property(e => e.Cempdept)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cempdept");
            entity.Property(e => e.Cempname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cempname");
        });

        modelBuilder.Entity<TblEmp2>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmp__263E2DD321C149D8");

            entity.ToTable("tblEmp");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("Emp_id");
            entity.Property(e => e.EmpUserName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Emp_UserName");
            entity.Property(e => e.EmpUserPsw)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Emp_UserPsw");
        });

        modelBuilder.Entity<TblEmpCommandD1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmpCommandD1");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmpDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmpDetails");

            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.DeptName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpDetailsBackup08012010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmpDetailsBackup08012010");

            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.DeptName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpDetailsOld>(entity =>
        {
            entity.HasKey(e => e.IntEmpDetId).HasName("PK_tblEmpDetails");

            entity.ToTable("tblEmpDetails_Old");

            entity.Property(e => e.IntEmpDetId)
                .ValueGeneratedNever()
                .HasColumnName("intEmpDetID");
            entity.Property(e => e.IntEmpId).HasColumnName("intEmpID");
            entity.Property(e => e.IntSrNo).HasColumnName("intSrNo");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
            entity.Property(e => e.StrLoc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("strLoc");
        });

        modelBuilder.Entity<TblEmpDhavan>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpDh__AFB3EC6DF8E50F18");

            entity.ToTable("tblEmpDhavan");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("empID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.EmpCode).HasColumnName("empCode");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblEmpDhavanCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblEmpDh__6B4108E63B614C78");

            entity.ToTable("tblEmpDhavanCommand");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmpH>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("pk_tblEmpMaster_EmpID");

            entity.ToTable("tblEmpH");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JoiningDate).HasColumnType("datetime");
            entity.Property(e => e.Salary).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmpHcommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("pk_tblEmpHCommand_CommandID");

            entity.ToTable("tblEmpHCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmpHhistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("pk_tblEmpHHistory_HistoryID");

            entity.ToTable("tblEmpHHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewbirthDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWBirthDate");
            entity.Property(e => e.NewempCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWEmpCode");
            entity.Property(e => e.NewempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewjoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWJoiningDate");
            entity.Property(e => e.Newsalary)
                .HasColumnType("money")
                .HasColumnName("NEWSalary");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldbirthDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDBirthDate");
            entity.Property(e => e.OldempCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDEmpCode");
            entity.Property(e => e.OldempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldjoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDJoiningDate");
            entity.Property(e => e.Oldsalary)
                .HasColumnType("money")
                .HasColumnName("OLDSalary");
        });

        modelBuilder.Entity<TblEmpHistoryD1>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblEmpHi__4D7B4ADDACAA9E1F");

            entity.ToTable("tblEmpHistoryD1");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewEmpCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NewEmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OldEmpCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OldEmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpHistroyDhavan>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblEmpHi__4D7B4ADDC38E5E42");

            entity.ToTable("tblEmpHistroyDhavan");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewUserTypeName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OldUserTypeName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tblEmpIn__3214EC2778415083");

            entity.ToTable("tblEmpInfo");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.EmpDepartment)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
        });

        modelBuilder.Entity<TblEmpMa>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpMa__AF2DBB9948E5AC6E");

            entity.ToTable("tblEmpMas");

            entity.Property(e => e.EmpId).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.JoiningDate).HasColumnType("date");
        });

        modelBuilder.Entity<TblEmpMast>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpMa__AF2DBB994F92A9FD");

            entity.ToTable("tblEmpMast");

            entity.Property(e => e.EmpId).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("date");
            entity.Property(e => e.CreateDate).HasColumnType("date");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.JoiningDate).HasColumnType("date");
            entity.Property(e => e.UpdateDate).HasColumnType("date");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpMaster>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpMa__AF2DBA79D699299E");

            entity.ToTable("tblEmpMaster");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PhoneNo)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("PhoneNO");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmpMasterD1>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpMa__AF2DBA7985F64699");

            entity.ToTable("tblEmpMasterD1", tb => tb.HasTrigger("trgEmpMasterD1"));

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmpMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmpMasterDetail");

            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.Designation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Salary)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmpMasterDhavan>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmpMa__AFB3EC6D3C146BBD");

            entity.ToTable("tblEmpMasterDhavan");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("empID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpCode).HasColumnName("empCode");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmpMasterOld>(entity =>
        {
            entity.HasKey(e => e.Eno).HasName("PK__tblEmpMa__C190FFA975C27486");

            entity.ToTable("tblEmpMaster_Old");

            entity.Property(e => e.Eno).HasColumnName("ENO");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<TblEmployeHistoryMaster1>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblEmplo__4D7B4ADDC39AC4EA");

            entity.ToTable("tblEmployeHistoryMaster1");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.NewdepartmentId).HasColumnName("NEWDepartmentId");
            entity.Property(e => e.NewempCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWEmpCode");
            entity.Property(e => e.NewempName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.OlddepartmentId).HasColumnName("OLDDepartmentId");
            entity.Property(e => e.OldempCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDEmpCode");
            entity.Property(e => e.OldempName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
        });

        modelBuilder.Entity<TblEmployeMaster1>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmplo__AF2DBA793C1A4D36");

            entity.ToTable("tblEmployeMaster1", tb => tb.HasTrigger("trgEmployeMasterHistory"));

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmployeeDemo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmployee_Demo", tb => tb.HasTrigger("trgAfterInsert"));

            entity.Property(e => e.EmpId)
                .ValueGeneratedOnAdd()
                .HasColumnName("Emp_ID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(55)
                .IsUnicode(false)
                .HasColumnName("Emp_Name");
            entity.Property(e => e.EmpSal)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("Emp_Sal");
        });

        modelBuilder.Entity<TblEmployeeLeaveDetail>(entity =>
        {
            entity.HasKey(e => e.LeaveId).HasName("PK__tblEmplo__796DB979B3BDE3C8");

            entity.ToTable("tblEmployeeLeaveDetail", tb => tb.HasTrigger("trgEmployeeLeaveDetailHistory"));

            entity.Property(e => e.LeaveId)
                .ValueGeneratedNever()
                .HasColumnName("LeaveID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.LeaveDate).HasColumnType("datetime");
            entity.Property(e => e.LeaveType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmployeeLeaveDetailCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblEmplo__6B4108E6F1250BF0");

            entity.ToTable("tblEmployeeLeaveDetailCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmployeeLeaveDetailHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblEmplo__4D7B4ADD4C4C59AF");

            entity.ToTable("tblEmployeeLeaveDetailHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.LeaveId).HasColumnName("LeaveID");
            entity.Property(e => e.NewempId).HasColumnName("NEWEmpID");
            entity.Property(e => e.NewleaveDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWLeaveDate");
            entity.Property(e => e.NewleaveType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWLeaveType");
            entity.Property(e => e.OldempId).HasColumnName("OLDEmpID");
            entity.Property(e => e.OldleaveDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDLeaveDate");
            entity.Property(e => e.OldleaveType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDLeaveType");
        });

        modelBuilder.Entity<TblEmployeeMaster>(entity =>
        {
            entity.HasKey(e => e.Empid).HasName("PK_tblEmployeeMaster_1");

            entity.ToTable("tblEmployeeMaster");

            entity.Property(e => e.Empid)
                .ValueGeneratedNever()
                .HasColumnName("EMPID");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.Empcode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("EMPCode");
            entity.Property(e => e.Empdetails)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("EMPDetails");
            entity.Property(e => e.EmpfatherName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EMPFatherName");
            entity.Property(e => e.Empname)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("EMPName");
            entity.Property(e => e.UpdateBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmployeeMasterForPrakash>(entity =>
        {
            entity.HasKey(e => e.EmpId);

            entity.ToTable("tblEmployeeMasterForPrakash");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.Address)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmployeeMasterTable>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmplo__AF2DBA79B5A1679C");

            entity.ToTable("tblEmployeeMasterTable", tb => tb.HasTrigger("trgEmployeeMasterTableHistory"));

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Department)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmployeeMasterTableCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblEmplo__6B4108E62AE89207");

            entity.ToTable("tblEmployeeMasterTableCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmployeeMasterTableHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblEmplo__4D7B4ADD29BAA6AB");

            entity.ToTable("tblEmployeeMasterTableHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newdepartment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWDepartment");
            entity.Property(e => e.NewempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Olddepartment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDDepartment");
            entity.Property(e => e.OldempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblEmployeeMasterTableHistory2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEmployeeMasterTableHistory2");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newdepartment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWDepartment");
            entity.Property(e => e.NewempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Olddepartment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDDepartment");
            entity.Property(e => e.OldempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblEmployemasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblEmplo__6B4108E63F440A61");

            entity.ToTable("tblEmployemasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmpmasterCommandSunilSingh>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblEMPMasterCommand_SunilSingh");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblEmpmasterHistorySunilSingh>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblEMPMasterHistory_SunilSingh");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.Empid).HasColumnName("EMPID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcityId).HasColumnName("NEWCityID");
            entity.Property(e => e.NewempAddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWEmpAddress");
            entity.Property(e => e.NewempName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldcityId).HasColumnName("OLDCityID");
            entity.Property(e => e.OldempAddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDEmpAddress");
            entity.Property(e => e.OldempName)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblEmpmasterSunilSingh>(entity =>
        {
            entity.HasKey(e => e.EmpId);

            entity.ToTable("tblEMPMaster_SunilSingh", tb =>
                {
                    tb.HasTrigger("trgAfterInsert_tblEMPMaster_SunilSingh");
                    tb.HasTrigger("trgAfterUpdate_tblEMPMaster_SunilSingh");
                });

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblEmppMaster>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmppM__AF2DBA792DA93CFB");

            entity.ToTable("tblEmppMaster");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("EmpID");
            entity.Property(e => e.EmpAdress)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEmppType>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblEmppT__AF2DBB9941B035A8");

            entity.ToTable("tblEmppType");

            entity.Property(e => e.EmpId).ValueGeneratedNever();
            entity.Property(e => e.EmpAdress)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblErr>(entity =>
        {
            entity.HasKey(e => e.ErrorNo).HasName("PK__tblErrs__3585528118977ACE");

            entity.ToTable("tblErrs");

            entity.Property(e => e.ErrorNo).ValueGeneratedNever();
            entity.Property(e => e.ErrorDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Spname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SPName");
            entity.Property(e => e.UserErrorDesc)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblError>(entity =>
        {
            entity.HasKey(e => e.ErrorNo).HasName("PK_tblErrors_1");

            entity.ToTable("tblErrors", tb => tb.HasTrigger("trgSyncErrors"));

            entity.Property(e => e.ErrorNo).ValueGeneratedNever();
            entity.Property(e => e.ErrorDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Spname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SPName");
            entity.Property(e => e.UserErrorDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblEvent>(entity =>
        {
            entity.HasKey(e => e.EventId);

            entity.ToTable("tbl_event", tb =>
                {
                    tb.HasTrigger("trg_event_insert");
                    tb.HasTrigger("trg_event_update");
                });

            entity.Property(e => e.EventId).HasColumnName("event_id");
            entity.Property(e => e.Commandid).HasColumnName("commandid");
            entity.Property(e => e.CreateBy)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("create_by");
            entity.Property(e => e.CreateDate)
                .HasColumnType("date")
                .HasColumnName("create_date");
            entity.Property(e => e.Discount).HasColumnName("discount");
            entity.Property(e => e.EndDate)
                .HasColumnType("date")
                .HasColumnName("end_date");
            entity.Property(e => e.EventName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("event_name");
            entity.Property(e => e.EventPrice).HasColumnName("event_price");
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.OfferName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("offer_name");
            entity.Property(e => e.StartDate)
                .HasColumnType("date")
                .HasColumnName("start_date");
        });

        modelBuilder.Entity<TblEvent1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblEvents");

            entity.Property(e => e.End).HasColumnType("datetime");
            entity.Property(e => e.EventDescription).HasMaxLength(200);
            entity.Property(e => e.EventTital).HasMaxLength(50);
            entity.Property(e => e.Eventid).ValueGeneratedOnAdd();
            entity.Property(e => e.Start).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblExcDatabaseMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblExcDatabaseMaster");

            entity.Property(e => e.Dmid).HasColumnName("DMID");
            entity.Property(e => e.StrExciseDatabaseName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strExciseDatabaseName");
            entity.Property(e => e.StrExciseServerName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strExciseServerName");
        });

        modelBuilder.Entity<TblExcDocMast>(entity =>
        {
            entity.HasKey(e => e.IntDocId).HasName("PK_tblDocMast");

            entity.ToTable("tblExcDocMast");

            entity.Property(e => e.IntDocId)
                .ValueGeneratedNever()
                .HasColumnName("intDocID");
            entity.Property(e => e.BitAllPoallFlag).HasColumnName("bitAllPOAllFlag");
            entity.Property(e => e.BitAutoNo).HasColumnName("bitAutoNo");
            entity.Property(e => e.BitCashPurchase).HasColumnName("bitCashPurchase");
            entity.Property(e => e.BitFlag).HasColumnName("bitFlag");
            entity.Property(e => e.BitLocked).HasColumnName("bitLocked");
            entity.Property(e => e.BitPriceCodeReq).HasColumnName("bitPriceCodeReq");
            entity.Property(e => e.BitSaleIndent).HasColumnName("bitSaleIndent");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdDateTime");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("id_key");
            entity.Property(e => e.IntDivId).HasColumnName("intDivID");
            entity.Property(e => e.IntDocTypeId).HasColumnName("intDocTypeID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrDocDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strDocDesc");
            entity.Property(e => e.StrDocSeries)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strDocSeries");
            entity.Property(e => e.StrUpdId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblExcMasterMast>(entity =>
        {
            entity.HasKey(e => e.IntMasterId);

            entity.ToTable("tblExcMasterMast");

            entity.Property(e => e.IntMasterId).HasColumnName("intMasterID");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdDateTime");
            entity.Property(e => e.IntIdkey).HasColumnName("intIDKey");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrMasterCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strMasterCode");
            entity.Property(e => e.StrMasterDesc)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strMasterDesc");
            entity.Property(e => e.StrUpdId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblExcMenuMaster>(entity =>
        {
            entity.HasKey(e => new { e.IntCompId, e.IntMenuId });

            entity.ToTable("tblExcMenuMaster");

            entity.Property(e => e.IntCompId).HasColumnName("intCompID");
            entity.Property(e => e.IntMenuId).HasColumnName("intMenuID");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Key");
            entity.Property(e => e.IntOperationlevel).HasColumnName("intOperationlevel");
            entity.Property(e => e.IntParentMenuId).HasColumnName("intParentMenuID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPaddress");
            entity.Property(e => e.StrMenuItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strMenuItem");
            entity.Property(e => e.StrMenuName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strMenuName");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblExcUserMaster>(entity =>
        {
            entity.HasKey(e => new { e.IntCompId, e.IntUserId });

            entity.ToTable("tblExcUserMaster");

            entity.Property(e => e.IntCompId).HasColumnName("intCompId");
            entity.Property(e => e.IntUserId).HasColumnName("intUserID");
            entity.Property(e => e.BitIpallowed).HasColumnName("bitIPAllowed");
            entity.Property(e => e.BitIsActive).HasColumnName("bitIsActive");
            entity.Property(e => e.DtmCreateDatetime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDatetime");
            entity.Property(e => e.DtmUpdateDatetime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDatetime");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Key");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrLoginName)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strLoginName");
            entity.Property(e => e.StrPassword)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strPassword");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
            entity.Property(e => e.StrUserName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUserName");
        });

        modelBuilder.Entity<TblExcUsersMenuRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblExcUsersMenuRights");

            entity.Property(e => e.BitIsAdd).HasColumnName("bitIsAdd");
            entity.Property(e => e.BitIsAllowed).HasColumnName("bitIsAllowed");
            entity.Property(e => e.BitIsDelete).HasColumnName("bitIsDelete");
            entity.Property(e => e.BitIsEdit).HasColumnName("bitIsEdit");
            entity.Property(e => e.BitIsPrint).HasColumnName("bitIsPrint");
            entity.Property(e => e.BitIsView).HasColumnName("bitIsView");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IntMenuId).HasColumnName("intMenuID");
            entity.Property(e => e.IntUserId).HasColumnName("intUserID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblFamilyInfoDetail>(entity =>
        {
            entity.HasKey(e => e.FamilyDetailId);

            entity.ToTable("tblFamilyInfoDetail");

            entity.Property(e => e.FamilyDetailId)
                .ValueGeneratedNever()
                .HasColumnName("FamilyDetailID");
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.FamilyId).HasColumnName("FamilyID");
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Relation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFamilyInfoMaster>(entity =>
        {
            entity.HasKey(e => e.FamilyId);

            entity.ToTable("tblFamilyInfoMaster");

            entity.Property(e => e.FamilyId)
                .ValueGeneratedNever()
                .HasColumnName("FamilyID");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("datetime");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Gender)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblFindMobile>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblFindMobile");

            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblForHelping123>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblForHelping123");

            entity.Property(e => e.Id)
                .IsUnicode(false)
                .HasColumnName("ID");
            entity.Property(e => e.Messages).IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);
            entity.Property(e => e.Village).IsUnicode(false);
        });

        modelBuilder.Entity<TblFoxcurrencyMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblFOXCurrencyMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CurrencyCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.CurrencyId).HasColumnName("CurrencyID");
            entity.Property(e => e.CurrencyName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(20);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblFoxorderMaster>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__tblFOXOr__C3905BAF1F247CCC");

            entity.ToTable("tblFOXOrderMaster");

            entity.Property(e => e.OrderId)
                .ValueGeneratedNever()
                .HasColumnName("OrderID");
            entity.Property(e => e.AdminProcessRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.IdproofDetail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("IDProofDetail");
            entity.Property(e => e.IdproofKycdocId).HasColumnName("IDProofKYCDocID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OrderRequestDetId).HasColumnName("OrderRequestDetID");
            entity.Property(e => e.ParentPurposeId).HasColumnName("ParentPurposeID");
            entity.Property(e => e.PaymentGatewayPgapilinkId).HasColumnName("PaymentGatewayPGAPILinkID");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.PurposeId).HasColumnName("PurposeID");
            entity.Property(e => e.RefNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServiceTaxAmount).HasColumnType("money");
            entity.Property(e => e.State)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalOrderAmountInr)
                .HasColumnType("money")
                .HasColumnName("TotalOrderAmountINR");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblFoxorderMasterMax>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblFOXOrderMasterMax");

            entity.Property(e => e.MaxId).HasColumnName("MaxID");
        });

        modelBuilder.Entity<TblFoxorderStatusHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblFOXOrderStatusHistory");

            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblFoxorderStatusMaster>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__tblFOXOr__C8EE204324DD5622");

            entity.ToTable("tblFOXOrderStatusMaster");

            entity.Property(e => e.StatusId)
                .ValueGeneratedNever()
                .HasColumnName("StatusID");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusDescDisp)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StatusDisp)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblFoxpurposeMaster>(entity =>
        {
            entity.HasKey(e => e.PurposeId).HasName("PK__tblFOXPu__79E6A1B428ADE706");

            entity.ToTable("tblFOXPurposeMaster");

            entity.Property(e => e.PurposeId)
                .ValueGeneratedNever()
                .HasColumnName("PurposeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ParentPurposeId).HasColumnName("ParentPurposeID");
            entity.Property(e => e.PurposeCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.PurposeDetailCaption)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurposeDetailInfo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.PurposeDetailName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PurposeInfo)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.PurposeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblGroupBooking>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGroupBooking");

            entity.Property(e => e.ConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartureApxTime)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.DepartureDate).HasColumnType("datetime");
            entity.Property(e => e.DestinationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.FlightClassRequested)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.FromStationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.GroupBookingId).HasColumnName("GroupBookingID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.RejectedDateTime).HasColumnType("datetime");
            entity.Property(e => e.RejectionRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.ReturnApxTime)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.SourceCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
            entity.Property(e => e.ToStationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblGroupBookingDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGroupBookingDetails");

            entity.Property(e => e.AirlineId).HasColumnName("AirlineID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.BookingValidUptoDate).HasColumnType("datetime");
            entity.Property(e => e.CommAmount).HasColumnType("money");
            entity.Property(e => e.CommPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.FareRules)
                .HasMaxLength(4000)
                .IsUnicode(false);
            entity.Property(e => e.FlightNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.GroupBookingDetId).HasColumnName("GroupBookingDetID");
            entity.Property(e => e.GroupBookingId).HasColumnName("GroupBookingID");
            entity.Property(e => e.PxDeailsSendValidUptoDate).HasColumnType("datetime");
            entity.Property(e => e.QuoteRef)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.TicketAmountAmount).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCommAmount).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblGroupBookingEmailSentDetail>(entity =>
        {
            entity.HasKey(e => e.GroupBookingEmailSentDetId);

            entity.ToTable("tblGroupBookingEmailSentDetails");

            entity.Property(e => e.GroupBookingEmailSentDetId)
                .ValueGeneratedNever()
                .HasColumnName("GroupBookingEmailSentDetID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.EmailType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.GroupBookingDetId).HasColumnName("GroupBookingDetID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblGtageoCode>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAGeoCodes");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.Latitude).IsUnicode(false);
            entity.Property(e => e.Longitude).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtahotel>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAHotel");

            entity.Property(e => e.AddressLine1).IsUnicode(false);
            entity.Property(e => e.AddressLine2).IsUnicode(false);
            entity.Property(e => e.AddressLine3).IsUnicode(false);
            entity.Property(e => e.AddressLine4).IsUnicode(false);
            entity.Property(e => e.Category).IsUnicode(false);
            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.CityName).IsUnicode(false);
            entity.Property(e => e.EmailAddress).IsUnicode(false);
            entity.Property(e => e.Fax).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.HotelName).IsUnicode(false);
            entity.Property(e => e.StarRating).IsUnicode(false);
            entity.Property(e => e.Telephone).IsUnicode(false);
            entity.Property(e => e.Website).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtahotelFacility>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAHotelFacilities");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.FacilityCode).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtaimageLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAImageLinks");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.Height).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.Image).IsUnicode(false);
            entity.Property(e => e.Text).IsUnicode(false);
            entity.Property(e => e.Thumbnail).IsUnicode(false);
            entity.Property(e => e.Width).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtamapPageLink>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAMapPageLinks");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.MapPageLink).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtareport>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTAReports");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.Type).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtaroomCategory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTARoomCategories");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.RoomCategoryId)
                .IsUnicode(false)
                .HasColumnName("RoomCategoryID");
            entity.Property(e => e.RoomDescription).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtaroomFacility>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTARoomFacilities");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.Description).IsUnicode(false);
            entity.Property(e => e.FacilityCode).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
        });

        modelBuilder.Entity<TblGtaroomType>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblGTARoomTypes");

            entity.Property(e => e.CityCode).IsUnicode(false);
            entity.Property(e => e.HotelCode).IsUnicode(false);
            entity.Property(e => e.RoomTypeCode).IsUnicode(false);
            entity.Property(e => e.Roomtype).IsUnicode(false);
        });

        modelBuilder.Entity<TblHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblHisto__4D7B4ABD06E2DEE7");

            entity.ToTable("tblHistory");

            entity.Property(e => e.HistoryId).ValueGeneratedNever();
            entity.Property(e => e.HistoryDate).HasColumnType("date");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Newaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewbirthDate)
                .HasColumnType("date")
                .HasColumnName("NEWBirthDate");
            entity.Property(e => e.NewempCode).HasColumnName("NEWEmpCode");
            entity.Property(e => e.NewempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.NewjoiningDate)
                .HasColumnType("date")
                .HasColumnName("NEWJoiningDate");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OldbirthDate)
                .HasColumnType("date")
                .HasColumnName("OLDBirthDate");
            entity.Property(e => e.OldempCode).HasColumnName("OLDEmpCode");
            entity.Property(e => e.OldempName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.OldjoiningDate)
                .HasColumnType("date")
                .HasColumnName("OLDJoiningDate");

            entity.HasOne(d => d.Command).WithMany(p => p.TblHistories)
                .HasForeignKey(d => d.CommandId)
                .HasConstraintName("FK__tblHistor__Comma__08CB2759");

            entity.HasOne(d => d.Emp).WithMany(p => p.TblHistories)
                .HasForeignKey(d => d.EmpId)
                .HasConstraintName("FK__tblHistor__EmpId__09BF4B92");
        });

        modelBuilder.Entity<TblHistoryProductTypeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHistory_ProductTypeMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewFields)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Oldfields)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDFields");
        });

        modelBuilder.Entity<TblHotel>(entity =>
        {
            entity.HasKey(e => e.HotelId).HasName("PK__tblHotel__46023BBFC839C119");

            entity.ToTable("tblHotel");

            entity.Property(e => e.HotelId)
                .ValueGeneratedNever()
                .HasColumnName("HotelID");
            entity.Property(e => e.HotelLocation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HotelName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblHotelDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHotelDetail");

            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HotelDid).HasColumnName("HotelDID");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.HotelName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblHtlapicountryLinkMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLAPICountryLinkMaster");

            entity.Property(e => e.ApicountryLinkId).HasColumnName("APICountryLinkID");
            entity.Property(e => e.ApicountryValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APICountryValue");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlapidataSynchronization>(entity =>
        {
            entity.HasKey(e => e.ApidataSyncId).HasName("PK__tblHTLAP__76EBA9695F00A16D");

            entity.ToTable("tblHTLAPIDataSynchronization", tb => tb.HasTrigger("trgHTLAPIDataSynchronizationHistory"));

            entity.Property(e => e.ApidataSyncId)
                .ValueGeneratedNever()
                .HasColumnName("APIDataSyncID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.LastSyncByUserId).HasColumnName("LastSyncByUserID");
            entity.Property(e => e.LastSyncDate).HasColumnType("datetime");
            entity.Property(e => e.LastSyncIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("LastSyncIP");
        });

        modelBuilder.Entity<TblHtlapidataSynchronizationCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblHTLAP__6B4108E663C5568A");

            entity.ToTable("tblHTLAPIDataSynchronizationCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblHtlapidataSynchronizationHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblHTLAP__4D7B4ADD688A0BA7");

            entity.ToTable("tblHTLAPIDataSynchronizationHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.ApidataSyncId).HasColumnName("APIDataSyncID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newapiid).HasColumnName("NEWAPIID");
            entity.Property(e => e.NewlastSyncByUserId).HasColumnName("NEWLastSyncByUserID");
            entity.Property(e => e.NewlastSyncDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWLastSyncDate");
            entity.Property(e => e.NewlastSyncIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWLastSyncIP");
            entity.Property(e => e.Oldapiid).HasColumnName("OLDAPIID");
            entity.Property(e => e.OldlastSyncByUserId).HasColumnName("OLDLastSyncByUserID");
            entity.Property(e => e.OldlastSyncDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDLastSyncDate");
            entity.Property(e => e.OldlastSyncIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDLastSyncIP");
        });

        modelBuilder.Entity<TblHtlapihotelCityLinkMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLAPIHotelCityLinkMaster");

            entity.Property(e => e.ApicityValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APICityValue");
            entity.Property(e => e.ApihotelCityLinkId).HasColumnName("APIHotelCityLinkID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.HotelCityId).HasColumnName("HotelCityID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlapimaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLAPIMaster");

            entity.Property(e => e.Address1)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ApiclientId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIClientID");
            entity.Property(e => e.Apicode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("APICode");
            entity.Property(e => e.Apidesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIDesc");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.Apipassword)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIPassword");
            entity.Property(e => e.Apiurlbooking)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIURLBooking");
            entity.Property(e => e.Apiurlsearch)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIURLSearch");
            entity.Property(e => e.ApiuserName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("APIUserName");
            entity.Property(e => e.City)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.ContactName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Country)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.MisclientId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MISClientID");
            entity.Property(e => e.Mispassword)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("MISPassword");
            entity.Property(e => e.Misurl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("MISURL");
            entity.Property(e => e.MisuserName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("MISUserName");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.State)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StaticDataPassword)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.StaticDataUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("StaticDataURL");
            entity.Property(e => e.StaticDataUserName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlcategoryMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLCategoryMaster");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlcommonHotelDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLCommonHotelDetail");

            entity.Property(e => e.CommonHotelId).HasColumnName("CommonHotelID");
            entity.Property(e => e.MatchingType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MatchingWord)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblHtlcommonHotelMaster>(entity =>
        {
            entity.HasKey(e => e.CommonHotelId).HasName("PK__tblHTLCo__035D9DA672687B9C");

            entity.ToTable("tblHTLCommonHotelMaster");

            entity.Property(e => e.CommonHotelId)
                .ValueGeneratedNever()
                .HasColumnName("CommonHotelID");
            entity.Property(e => e.Address)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(250)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblHtlhotelCityMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelCityMaster");

            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.HotelCityId).HasColumnName("HotelCityID");
            entity.Property(e => e.HotelStateId).HasColumnName("HotelStateID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlhotelMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelMaster");

            entity.Property(e => e.Address1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address4)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ApihotelDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIHotelDesc");
            entity.Property(e => e.ApihotelValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIHotelValue");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CheckInTime).HasColumnType("datetime");
            entity.Property(e => e.CheckOutTime).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommonHotelId).HasColumnName("CommonHotelID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HotelCityId).HasColumnName("HotelCityID");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Overview)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeachKey)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StarRating).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<TblHtlhotelMasterBkp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelMasterBkp");

            entity.Property(e => e.Address1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address4)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ApihotelDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIHotelDesc");
            entity.Property(e => e.ApihotelValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIHotelValue");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CheckInTime).HasColumnType("datetime");
            entity.Property(e => e.CheckOutTime).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommonHotelId).HasColumnName("CommonHotelID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HotelCityId).HasColumnName("HotelCityID");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Overview)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeachKey)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StarRating).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<TblHtlhotelMasterOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelMasterOLD");

            entity.Property(e => e.Address1)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address2)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address3)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Address4)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ApihotelDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("APIHotelDesc");
            entity.Property(e => e.ApihotelValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIHotelValue");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.CheckInTime).HasColumnType("datetime");
            entity.Property(e => e.CheckOutTime).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Fax)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.HotelCityId).HasColumnName("HotelCityID");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.ImagePath)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Overview)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.SeachKey)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StarRating).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.WebsiteUrl)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("WebsiteURL");
        });

        modelBuilder.Entity<TblHtlhotelReviewMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelReviewMaster");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.AvgGuestRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Comments)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCountry)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.HotelReviewId).HasColumnName("HotelReviewID");
            entity.Property(e => e.PostDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblHtlhotelReviewMasterOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelReviewMasterOLD");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.AvgGuestRating)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Comments)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerCity)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerCountry)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.HotelReviewId).HasColumnName("HotelReviewID");
            entity.Property(e => e.PostDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblHtlhotelStateMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLHotelStateMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.HotelStateId).HasColumnName("HotelStateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlinfoDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLInfoDetail");

            entity.Property(e => e.ApidetDesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDetDesc");
            entity.Property(e => e.ApidetValue)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDetValue");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.InfoDetId).HasColumnName("InfoDetID");
            entity.Property(e => e.InfoId).HasColumnName("InfoID");
            entity.Property(e => e.InfoParameterId).HasColumnName("InfoParameterID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlinfoDetailOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLInfoDetailOLD");

            entity.Property(e => e.ApidetDesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDetDesc");
            entity.Property(e => e.ApidetValue)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDetValue");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.InfoDetId).HasColumnName("InfoDetID");
            entity.Property(e => e.InfoId).HasColumnName("InfoID");
            entity.Property(e => e.InfoParameterId).HasColumnName("InfoParameterID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlinfoMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLInfoMaster");

            entity.Property(e => e.Apidesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDesc");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apivalue)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIValue");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.InfoId).HasColumnName("InfoID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlinfoMasterOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLInfoMasterOLD");

            entity.Property(e => e.Apidesc)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIDesc");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apivalue)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("APIValue");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.HotelId).HasColumnName("HotelID");
            entity.Property(e => e.InfoId).HasColumnName("InfoID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlinfoParameterMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblHTLInfoParameterMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.InfoParameterId).HasColumnName("InfoParameterID");
            entity.Property(e => e.ParameterName)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblHtlsyncDatum>(entity =>
        {
            entity.HasKey(e => e.SyncDataId).HasName("PK__tblHTLSy__4ED88C795B301089");

            entity.ToTable("tblHTLSyncData");

            entity.Property(e => e.SyncDataId)
                .ValueGeneratedNever()
                .HasColumnName("SyncDataID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Column1).IsUnicode(false);
            entity.Property(e => e.Column10).IsUnicode(false);
            entity.Property(e => e.Column11).IsUnicode(false);
            entity.Property(e => e.Column12).IsUnicode(false);
            entity.Property(e => e.Column13).IsUnicode(false);
            entity.Property(e => e.Column14).IsUnicode(false);
            entity.Property(e => e.Column15).IsUnicode(false);
            entity.Property(e => e.Column16).IsUnicode(false);
            entity.Property(e => e.Column17).IsUnicode(false);
            entity.Property(e => e.Column18).IsUnicode(false);
            entity.Property(e => e.Column19).IsUnicode(false);
            entity.Property(e => e.Column2).IsUnicode(false);
            entity.Property(e => e.Column20).IsUnicode(false);
            entity.Property(e => e.Column21).IsUnicode(false);
            entity.Property(e => e.Column22).IsUnicode(false);
            entity.Property(e => e.Column23).IsUnicode(false);
            entity.Property(e => e.Column24).IsUnicode(false);
            entity.Property(e => e.Column25).IsUnicode(false);
            entity.Property(e => e.Column26).IsUnicode(false);
            entity.Property(e => e.Column27).IsUnicode(false);
            entity.Property(e => e.Column28).IsUnicode(false);
            entity.Property(e => e.Column29).IsUnicode(false);
            entity.Property(e => e.Column3).IsUnicode(false);
            entity.Property(e => e.Column30).IsUnicode(false);
            entity.Property(e => e.Column4).IsUnicode(false);
            entity.Property(e => e.Column5).IsUnicode(false);
            entity.Property(e => e.Column6).IsUnicode(false);
            entity.Property(e => e.Column7).IsUnicode(false);
            entity.Property(e => e.Column8).IsUnicode(false);
            entity.Property(e => e.Column9).IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DataInfoType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Pkcolumn)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PKColumn");
        });

        modelBuilder.Entity<TblInformation>(entity =>
        {
            entity.ToTable("tbl_Information", "db_owner");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblIpmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblIPMaster");

            entity.Property(e => e.BitIsActive).HasColumnName("bitIsActive");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Key");
            entity.Property(e => e.IntCompId).HasColumnName("intCompID");
            entity.Property(e => e.IntIpid).HasColumnName("intIPID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strIPAddress");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblIrctcconfiguration>(entity =>
        {
            entity.HasKey(e => e.ConfigurationId).HasName("PK__tblIRCTC__95AA539B0E8E2250");

            entity.ToTable("tblIRCTCConfiguration");

            entity.Property(e => e.ConfigurationId)
                .ValueGeneratedNever()
                .HasColumnName("ConfigurationID");
            entity.Property(e => e.AgentId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AgentID");
            entity.Property(e => e.AgentPassword)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AuthPassword)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.AuthUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("AuthUserID");
            entity.Property(e => e.CorporateIdforBooking)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CorporateIDForBooking");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.PasswordB2c)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("PasswordB2C");
            entity.Property(e => e.TransactionPassword)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.TransactionUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("TransactionUserID");
            entity.Property(e => e.UserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("UserID");
            entity.Property(e => e.UserIdb2c)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("UserIDB2C");
        });

        modelBuilder.Entity<TblItemGroupMasterCommandSp>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblItemGroupMasterCommand_sp");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblItemGroupMasterHistorySp>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblItemGroupMasterHistory_sp");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.ItemGroupId).HasColumnName("ItemGroupID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewitemGroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWItemGroupDesc");
            entity.Property(e => e.NewitemGroupName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWItemGroupName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemGroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDItemGroupDesc");
            entity.Property(e => e.OlditemGroupName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDItemGroupName");
        });

        modelBuilder.Entity<TblItemGroupMasterSp>(entity =>
        {
            entity.HasKey(e => e.ItemGroupId).HasName("PK_tblItemGroupMaster");

            entity.ToTable("tblItemGroupMaster_sp", tb => tb.HasTrigger("trgItemGroupMasterHistory_sp"));

            entity.Property(e => e.ItemGroupId)
                .ValueGeneratedNever()
                .HasColumnName("ItemGroupID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemGroupDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemGroupName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblItemMaster>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__tblItemM__727E83EB4A84A774");

            entity.ToTable("tblItemMaster", tb => tb.HasTrigger("trgItemMasterHistory"));

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ItemPrice).HasColumnType("money");
            entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblItemMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblItemM__6B4108E64E553858");

            entity.ToTable("tblItemMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblItemMasterCommandSp>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblItemMasterCommand_sp");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblItemMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblItemM__4D7B4ADD5225C93C");

            entity.ToTable("tblItemMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.NewItemTypeId).HasColumnName("NewItemTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewitemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWItemCode");
            entity.Property(e => e.NewitemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWItemName");
            entity.Property(e => e.NewitemPrice)
                .HasColumnType("money")
                .HasColumnName("NEWItemPrice");
            entity.Property(e => e.NewitemWeight).HasColumnName("NEWItemWeight");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDItemCode");
            entity.Property(e => e.OlditemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDItemName");
            entity.Property(e => e.OlditemPrice)
                .HasColumnType("money")
                .HasColumnName("OLDItemPrice");
            entity.Property(e => e.OlditemTypeId).HasColumnName("OLDItemTypeID");
            entity.Property(e => e.OlditemWeight).HasColumnName("OLDItemWeight");
        });

        modelBuilder.Entity<TblItemMasterHistorySp>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblItemMasterHistory_sp");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Itemid).HasColumnName("ITEMID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewitemDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWItemDesc");
            entity.Property(e => e.NewitemGroupId).HasColumnName("NEWItemGroupID");
            entity.Property(e => e.NewitemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWItemName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDItemDesc");
            entity.Property(e => e.OlditemGroupId).HasColumnName("OLDItemGroupID");
            entity.Property(e => e.OlditemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDItemName");
        });

        modelBuilder.Entity<TblItemMasterSp>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tblItemMaster_sp", tb => tb.HasTrigger("trgItemMasterHistory_sp"));

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ItemGroupId).HasColumnName("ItemGroupID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblItemOrderMaster>(entity =>
        {
            entity.HasKey(e => e.ItemOrderId).HasName("PK__tblItemO__405A6CC620245954");

            entity.ToTable("tblItemOrderMaster");

            entity.Property(e => e.ItemOrderId)
                .ValueGeneratedNever()
                .HasColumnName("ItemOrderID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemOrderDate).HasColumnType("datetime");
            entity.Property(e => e.ItemOrderTotal).HasColumnType("money");
        });

        modelBuilder.Entity<TblItemTypeMaster>(entity =>
        {
            entity.HasKey(e => e.ItemTypeId).HasName("PK__tblItemT__F51540DB3B0D59BA");

            entity.ToTable("tblItemTypeMaster", tb => tb.HasTrigger("trgItemTypeMasterHistory"));

            entity.Property(e => e.ItemTypeId)
                .ValueGeneratedNever()
                .HasColumnName("ItemTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblItemTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblItemT__6B4108E63EDDEA9E");

            entity.ToTable("tblItemTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommnadType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblItemTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblItemT__4D7B4ADD42AE7B82");

            entity.ToTable("tblItemTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.ItemTypeId).HasColumnName("ItemTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewitemTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWItemTypeCode");
            entity.Property(e => e.NewitemTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWItemTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDItemTypeCode");
            entity.Property(e => e.OlditemTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDItemTypeName");
        });

        modelBuilder.Entity<TblItineraryLogBackup>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblItineraryLogBackup");

            entity.Property(e => e.ItineraryLogId).HasColumnName("ItineraryLogID");
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.RequestXml)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("RequestXML");
            entity.Property(e => e.ResponseDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResponseXml)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("ResponseXML");
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
        });

        modelBuilder.Entity<TblItmHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblItmHistory", tb => tb.HasTrigger("trgItmHistory"));

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewFields)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Oldfields)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDFields");
        });

        modelBuilder.Entity<TblItmMaster>(entity =>
        {
            entity.HasKey(e => e.ItemId);

            entity.ToTable("tblItmMaster");

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rate).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblItmMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_tblItmCommand");

            entity.ToTable("tblItmMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblItmMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK_tblItmMaterHistory");

            entity.ToTable("tblItmMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.NewItemName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewRate).HasColumnType("money");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDItemName");
            entity.Property(e => e.Oldqty).HasColumnName("OLDQty");
            entity.Property(e => e.Oldrate)
                .HasColumnType("money")
                .HasColumnName("OLDRate");
        });

        modelBuilder.Entity<TblKeySql>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblKeySql");

            entity.Property(e => e.IntKeySqlId).HasColumnName("intKeySqlID");
            entity.Property(e => e.StrKeyName0)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName0");
            entity.Property(e => e.StrKeyName1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName1");
            entity.Property(e => e.StrKeyName2)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName2");
            entity.Property(e => e.StrKeyName4)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName4");
            entity.Property(e => e.StrKeyName7)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName7");
            entity.Property(e => e.StrKeyName9)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strKeyName9");
        });

        modelBuilder.Entity<TblKeyoor>(entity =>
        {
            entity.HasKey(e => e.KeyId).HasName("PK__tblKeyoo__6079C1D81BE81D6E");

            entity.ToTable("tblKeyoor");

            entity.Property(e => e.KeyId)
                .ValueGeneratedNever()
                .HasColumnName("keyID");
            entity.Property(e => e.KeyName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("keyName");
            entity.Property(e => e.KeyValue).HasColumnName("keyValue");
        });

        modelBuilder.Entity<TblKeyoorCommission>(entity =>
        {
            entity.HasKey(e => e.KeyCommId).HasName("PK__tblKeyoo__F149D68C1FB8AE52");

            entity.ToTable("tblKeyoorCommission");

            entity.Property(e => e.KeyCommId)
                .ValueGeneratedNever()
                .HasColumnName("keyCommID");
            entity.Property(e => e.KeyCommAmt).HasColumnName("keyCommAmt");
            entity.Property(e => e.KeyCommPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("keyCommPer");
            entity.Property(e => e.KeyId).HasColumnName("keyID");
        });

        modelBuilder.Entity<TblKycdocMaster>(entity =>
        {
            entity.HasKey(e => e.KycdocId).HasName("PK__tblKYCDo__1EAFD6162C7E77EA");

            entity.ToTable("tblKYCDocMaster");

            entity.Property(e => e.KycdocId)
                .ValueGeneratedNever()
                .HasColumnName("KYCDocID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.KycdocCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("KYCDocCode");
            entity.Property(e => e.KycdocName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("KYCDocName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblLevelCheck>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblLevelCheck");

            entity.Property(e => e.DistId).HasColumnName("DistID");
        });

        modelBuilder.Entity<TblLibraryMaster>(entity =>
        {
            entity.HasKey(e => e.LibraryId).HasName("PK__tblLibra__A13647BF30509F7C");

            entity.ToTable("tblLibraryMaster", tb => tb.HasTrigger("trgLibraryMasterHistory"));

            entity.Property(e => e.LibraryId)
                .ValueGeneratedNever()
                .HasColumnName("LibraryID");
            entity.Property(e => e.ClosingTime).HasColumnType("datetime");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.LibraryAddress)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.LibraryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LibraryName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OpeningTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblLibraryMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblLibra__6B4108E6421A49FC");

            entity.ToTable("tblLibraryMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblLibraryMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblLibra__4D7B4ADD13E96AF8");

            entity.ToTable("tblLibraryMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.LibraryId).HasColumnName("LibraryID");
            entity.Property(e => e.NewclosingTime)
                .HasColumnType("datetime")
                .HasColumnName("NEWClosingTime");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewlibraryAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWLibraryAddress");
            entity.Property(e => e.NewlibraryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWLibraryCode");
            entity.Property(e => e.NewlibraryName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWLibraryName");
            entity.Property(e => e.NewmaxNumberOfBooks).HasColumnName("NEWMaxNumberOfBooks");
            entity.Property(e => e.NewopeningTime)
                .HasColumnType("datetime")
                .HasColumnName("NEWOpeningTime");
            entity.Property(e => e.NewstaffMembers).HasColumnName("NEWStaffMembers");
            entity.Property(e => e.NewtotalDepartments).HasColumnName("NEWTotalDepartments");
            entity.Property(e => e.OldclosingTime)
                .HasColumnType("datetime")
                .HasColumnName("OLDClosingTime");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldlibraryAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDLibraryAddress");
            entity.Property(e => e.OldlibraryCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDLibraryCode");
            entity.Property(e => e.OldlibraryName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDLibraryName");
            entity.Property(e => e.OldmaxNumberOfBooks).HasColumnName("OLDMaxNumberOfBooks");
            entity.Property(e => e.OldopeningTime)
                .HasColumnType("datetime")
                .HasColumnName("OLDOpeningTime");
            entity.Property(e => e.OldstaffMembers).HasColumnName("OLDStaffMembers");
            entity.Property(e => e.OldtotalDepartments).HasColumnName("OLDTotalDepartments");
        });

        modelBuilder.Entity<TblMachineMaster>(entity =>
        {
            entity.HasKey(e => e.MachineId).HasName("PK__tblMachi__44EE5B5814BD93A0");

            entity.ToTable("tblMachineMaster", tb => tb.HasTrigger("trgMachineMasterHistory"));

            entity.Property(e => e.MachineId)
                .ValueGeneratedNever()
                .HasColumnName("MachineID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MachineCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MachineDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.MachineName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MachineTypeId).HasColumnName("MachineTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMachineMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMachi__4D7B4ADD24F3FB69");

            entity.ToTable("tblMachineMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MachineId).HasColumnName("MachineID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmachineCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWMachineCode");
            entity.Property(e => e.NewmachineDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWMachineDesc");
            entity.Property(e => e.NewmachineName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWMachineName");
            entity.Property(e => e.NewmachineTypeId).HasColumnName("NEWMachineTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmachineCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDMachineCode");
            entity.Property(e => e.OldmachineDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDMachineDesc");
            entity.Property(e => e.OldmachineName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDMachineName");
            entity.Property(e => e.OldmachineTypeId).HasColumnName("OLDMachineTypeID");
        });

        modelBuilder.Entity<TblMachineTypeCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tbltblMa__6B4108E6198248BD");

            entity.ToTable("tblMachineTypeCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMachineTypeMaster>(entity =>
        {
            entity.HasKey(e => e.MachineTypeId).HasName("PK__tblMachi__52CA84A010ED02BC");

            entity.ToTable("tblMachineTypeMaster", tb => tb.HasTrigger("trgMachineTypeMasterHistory"));

            entity.Property(e => e.MachineTypeId)
                .ValueGeneratedNever()
                .HasColumnName("MachineTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MachineTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MachineTypeName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMachineTypemasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMachi__4D7B4ADD21236A85");

            entity.ToTable("tblMachineTypemasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MachineTypeId).HasColumnName("MachineTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmachineTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWMachineTypeCode");
            entity.Property(e => e.NewmachineTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWMachineTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmachineTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDMachineTypeCode");
            entity.Property(e => e.OldmachineTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDMachineTypeName");
        });

        modelBuilder.Entity<TblMast>(entity =>
        {
            entity.HasKey(e => e.IntCompId).HasName("PK__tblMast__C6E57D68257187A8");

            entity.ToTable("tblMast");

            entity.Property(e => e.IntCompId)
                .ValueGeneratedNever()
                .HasColumnName("intCompId");
            entity.Property(e => e.Empno).HasColumnName("empno");
            entity.Property(e => e.Ename)
                .HasMaxLength(30)
                .HasColumnName("ename");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<TblMaster2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMaster2", tb => tb.HasTrigger("trgmasterAudit"));

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.EmpName).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterAgent>(entity =>
        {
            entity.HasKey(e => e.AgentId).HasName("PK__tblMaste__9AC3BFD1C9A708FB");

            entity.ToTable("tblMasterAgent", tb => tb.HasTrigger("trgMasterAgentHistory"));

            entity.Property(e => e.AgentId)
                .ValueGeneratedNever()
                .HasColumnName("AgentID");
            entity.Property(e => e.AgentAddress)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.AgentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterAgentCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblMaste__6B4108E64C71F557");

            entity.ToTable("tblMasterAgentCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMasterAgentHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMaste__4D7B4ADD7065E9F2");

            entity.ToTable("tblMasterAgentHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewagentAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("NEWAgentAddress");
            entity.Property(e => e.NewagentAge).HasColumnName("NEWAgentAge");
            entity.Property(e => e.NewagentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAgentName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldagentAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("OLDAgentAddress");
            entity.Property(e => e.OldagentAge).HasColumnName("OLDAgentAge");
            entity.Property(e => e.OldagentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAgentName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblMasterCustomer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__tblMaste__A4AE64B87F2A55EE");

            entity.ToTable("tblMasterCustomer", tb => tb.HasTrigger("trgMasterCustomerHistory"));

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("CustomerID");
            entity.Property(e => e.AgentId).HasColumnName("AgentID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustomerAddress)
                .HasMaxLength(150)
                .IsUnicode(false);
            entity.Property(e => e.CustomerDob)
                .HasColumnType("datetime")
                .HasColumnName("CustomerDOB");
            entity.Property(e => e.CustomerName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CustomerPhone)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterCustomerCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblMaste__6B4108E6094EB0C2");

            entity.ToTable("tblMasterCustomerCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMasterCustomerHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMaste__4D7B4ADD17CA03CA");

            entity.ToTable("tblMasterCustomerHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewagentId).HasColumnName("NEWAgentID");
            entity.Property(e => e.NewcustomerAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("NEWCustomerAddress");
            entity.Property(e => e.NewcustomerDob)
                .HasColumnType("datetime")
                .HasColumnName("NEWCustomerDOB");
            entity.Property(e => e.NewcustomerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWCustomerName");
            entity.Property(e => e.NewcustomerPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWCustomerPhone");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OldagentId).HasColumnName("OLDAgentID");
            entity.Property(e => e.OldcustomerAddress)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("OLDCustomerAddress");
            entity.Property(e => e.OldcustomerDob)
                .HasColumnType("datetime")
                .HasColumnName("OLDCustomerDOB");
            entity.Property(e => e.OldcustomerName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDCustomerName");
            entity.Property(e => e.OldcustomerPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDCustomerPhone");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblMasterDept>(entity =>
        {
            entity.HasKey(e => e.DeptId);

            entity.ToTable("tblMasterDept", tb => tb.HasTrigger("TrgMasterDeptHistory"));

            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DeptCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.DeptDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DeptName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterDeptCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblMasterDeptCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMasterDeptHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblMasterDeptHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewdeptCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWDeptCode");
            entity.Property(e => e.NewdeptDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWDeptDesc");
            entity.Property(e => e.NewdeptName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWDeptName");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.OlddeptCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDDeptCode");
            entity.Property(e => e.OlddeptDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDDeptDesc");
            entity.Property(e => e.OlddeptName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDDeptName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
        });

        modelBuilder.Entity<TblMasterEmpCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblMasterEmpCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMasterEmpHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblMasterEmpHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbirthDate)
                .HasColumnType("date")
                .HasColumnName("NEWBirthDate");
            entity.Property(e => e.NewcontactNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWContactNo");
            entity.Property(e => e.NewdeptId).HasColumnName("NEWDeptID");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWEmailID");
            entity.Property(e => e.NewempCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWEmpCode");
            entity.Property(e => e.NewempName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NEWEmpName");
            entity.Property(e => e.Newgender).HasColumnName("NEWGender");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newpassword)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NEWPassword");
            entity.Property(e => e.NewuserName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("NEWUserName");
            entity.Property(e => e.OldbirthDate)
                .HasColumnType("date")
                .HasColumnName("OLDBirthDate");
            entity.Property(e => e.OldcontactNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDContactNo");
            entity.Property(e => e.OlddeptId).HasColumnName("OLDDeptID");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDEmailID");
            entity.Property(e => e.OldempCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDEmpCode");
            entity.Property(e => e.OldempName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("OLDEmpName");
            entity.Property(e => e.Oldgender).HasColumnName("OLDGender");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldpassword)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("OLDPassword");
            entity.Property(e => e.OlduserName)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("OLDUserName");
        });

        modelBuilder.Entity<TblMasterItem>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__tblMaste__727E83EB3A22361D");

            entity.ToTable("tblMasterItem", tb => tb.HasTrigger("trgMasterItemHistory"));

            entity.Property(e => e.ItemId)
                .ValueGeneratedNever()
                .HasColumnName("ItemID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterItemCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblMasterItemCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblMasterItemHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMaste__4D7B4ADD6E95D816");

            entity.ToTable("tblMasterItemHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewitemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWItemCode");
            entity.Property(e => e.NewitemDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWItemDesc");
            entity.Property(e => e.NewitemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWItemName");
            entity.Property(e => e.NewunitId).HasColumnName("NEWUnitID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlditemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDItemCode");
            entity.Property(e => e.OlditemDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDItemDesc");
            entity.Property(e => e.OlditemName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDItemName");
            entity.Property(e => e.OldunitId).HasColumnName("OLDUnitID");
        });

        modelBuilder.Entity<TblMasterProduct>(entity =>
        {
            entity.HasKey(e => e.IProductId).HasName("PK__TblMaste__2A611C8406EEBB32");

            entity.ToTable("TblMasterProduct", tb => tb.HasTrigger("trgTblMasterProductNew"));

            entity.Property(e => e.IProductId)
                .ValueGeneratedNever()
                .HasColumnName("iProductId");
            entity.Property(e => e.CProductCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("cProductCode");
            entity.Property(e => e.CProductDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cProductDesc");
            entity.Property(e => e.CProductName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("cProductName");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DProductPurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("dProductPurchaseDate");
            entity.Property(e => e.NProductRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("nProductRate");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterProductCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__TblMaste__6B4108E63B0D09A8");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMasterProductHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__TblMaste__4D7B4ADD9EF2A884");

            entity.ToTable("TblMasterProductHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewProductCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NewProductDesc)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewProductName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.NewProductPurchaseDate).HasColumnType("datetime");
            entity.Property(e => e.NewProductRate).HasColumnType("numeric(18, 2)");
            entity.Property(e => e.Newactive).HasColumnName("NEWActive");
            entity.Property(e => e.Oldactive).HasColumnName("OLDActive");
            entity.Property(e => e.OldproductCode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDProductCode");
            entity.Property(e => e.OldproductDesc)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDProductDesc");
            entity.Property(e => e.OldproductName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDProductName");
            entity.Property(e => e.OldproductPurchaseDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDProductPurchaseDate");
            entity.Property(e => e.OldproductRate)
                .HasColumnType("numeric(18, 2)")
                .HasColumnName("OLDProductRate");
        });

        modelBuilder.Entity<TblMasterUnit>(entity =>
        {
            entity.HasKey(e => e.UnitId).HasName("PK__tblMaste__44F5EC959781FF26");

            entity.ToTable("tblMasterUnit", tb => tb.HasTrigger("trgMasterUnitHistory"));

            entity.Property(e => e.UnitId)
                .ValueGeneratedNever()
                .HasColumnName("UnitID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UnitName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMasterUnitCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblMaste__6B4108E693C53758");

            entity.ToTable("tblMasterUnitCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblMasterUnitHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMaste__4D7B4ADD88D642BE");

            entity.ToTable("tblMasterUnitHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewUnitCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.NewUnitName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.OldUnitCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OldUnitName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
        });

        modelBuilder.Entity<TblMastx>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMastx");

            entity.Property(e => e.Empno).HasColumnName("empno");
            entity.Property(e => e.Ename)
                .HasMaxLength(30)
                .HasColumnName("ename");
            entity.Property(e => e.IntCompId).HasColumnName("intCompId");
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
        });

        modelBuilder.Entity<TblMaxId>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMaxID");

            entity.Property(e => e.Id).HasColumnName("ID");
        });

        modelBuilder.Entity<TblMedicineMaster>(entity =>
        {
            entity.HasKey(e => e.MedicineId);

            entity.ToTable("tblMedicineMaster", tb => tb.HasTrigger("trgMedicineMasterHistory"));

            entity.Property(e => e.MedicineId)
                .ValueGeneratedNever()
                .HasColumnName("MedicineID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MedicineCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MedicineName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MedicineTypeId).HasColumnName("MedicineTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMedicineMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_MedicineMasterCommands");

            entity.ToTable("tblMedicineMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMedicineMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK_MedicineMasterCommandsHistory");

            entity.ToTable("tblMedicineMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MedicineId).HasColumnName("MedicineID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmedicineCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWMedicineCode");
            entity.Property(e => e.NewmedicineName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMedicineName");
            entity.Property(e => e.NewmedicineTypeId).HasColumnName("NEWMedicineTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmedicineCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDMedicineCode");
            entity.Property(e => e.OldmedicineName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMedicineName");
            entity.Property(e => e.OldmedicineTypeId).HasColumnName("OLDMedicineTypeID");
        });

        modelBuilder.Entity<TblMedicineTypeMaster>(entity =>
        {
            entity.HasKey(e => e.MedicineTypeId).HasName("PK_MedicineTypeMaster");

            entity.ToTable("tblMedicineTypeMaster", tb => tb.HasTrigger("trgMedicineTypeMasterHistory"));

            entity.Property(e => e.MedicineTypeId)
                .ValueGeneratedNever()
                .HasColumnName("MedicineTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MedicineTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MedicineTypeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMedicineTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_MedicineTypeCommands");

            entity.ToTable("tblMedicineTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMedicineTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK_MedicineTypeMasterCommandsHistory");

            entity.ToTable("tblMedicineTypeMasterHistory");

            entity.Property(e => e.HistoryId).ValueGeneratedNever();
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MedicineTypeId).HasColumnName("MedicineTypeID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmedicineTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWMedicineTypeCode");
            entity.Property(e => e.NewmedicineTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMedicineTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmedicineTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDMedicineTypeCode");
            entity.Property(e => e.OldmedicineTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMedicineTypeName");
        });

        modelBuilder.Entity<TblMenuMaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMenuMaster1");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.LogoUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuControlName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.MenuKey)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ParentMenuId).HasColumnName("ParentMenuID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMenuRights1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMenuRights1");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMerchantMaster>(entity =>
        {
            entity.HasKey(e => e.MerchantId).HasName("PK__tblMerch__04416563D161E34B");

            entity.ToTable("tblMerchantMaster", tb => tb.HasTrigger("trgMerchantMasterHistory"));

            entity.Property(e => e.MerchantId)
                .ValueGeneratedNever()
                .HasColumnName("MerchantID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MerchantCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MerchantName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMerchantMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMerch__4D7B4ADD4C94ABB9");

            entity.ToTable("tblMerchantMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MerchantId).HasColumnName("MerchantID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmerchantCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWMerchantCode");
            entity.Property(e => e.NewmerchantName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWMerchantName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmerchantCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDMerchantCode");
            entity.Property(e => e.OldmerchantName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDMerchantName");
        });

        modelBuilder.Entity<TblMessageSendToCategoryMasterAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMessageSendToCategoryMasterATO");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MessageTypeName)
                .HasMaxLength(40)
                .IsUnicode(false);
            entity.Property(e => e.MsgSendToCatId).HasColumnName("MsgSendToCatID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMessageSentMasterAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMessageSentMasterATO");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Message)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MessageSentId).HasColumnName("MessageSentID");
            entity.Property(e => e.MessageTitle)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MsgSendToCatId).HasColumnName("MsgSendToCatID");
        });

        modelBuilder.Entity<TblMessageSentToDetailsAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMessageSentToDetailsATO");

            entity.Property(e => e.DeletedDateTime).HasColumnType("datetime");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.MessageSentId).HasColumnName("MessageSentID");
            entity.Property(e => e.MessageSentToDetId).HasColumnName("MessageSentToDetID");
            entity.Property(e => e.ReadDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblMobMaster>(entity =>
        {
            entity.HasKey(e => e.MobId).HasName("PK__tblMobMa__FB9B04F50E8B5E25");

            entity.ToTable("tblMobMaster");

            entity.Property(e => e.MobId)
                .ValueGeneratedNever()
                .HasColumnName("MobID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.LounchDate).HasColumnType("datetime");
            entity.Property(e => e.MobName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MobRs)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblMobMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblMobMa__6B410B0622A4B74B");

            entity.ToTable("tblMobMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblMobMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblMobMa__4D7B4ADDFA2F210B");

            entity.ToTable("tblMobMasterHistory");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MobId).HasColumnName("MobID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewlounchDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWLounchDate");
            entity.Property(e => e.NewmobName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWMobName");
            entity.Property(e => e.NewmobRs)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWMobRs");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldlounchDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDLounchDate");
            entity.Property(e => e.OldmobName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDMobName");
            entity.Property(e => e.OldmobRs)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDMobRs");
        });

        modelBuilder.Entity<TblMspgdataApr2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataApr2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataAug2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataAug2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataDec2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataDec2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataJan2011>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataJan2011");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataJul2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataJul2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataJun2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataJun2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataMay2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataMay2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataNov2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataNov2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataOct2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataOct2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgdataSep2010>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGDataSep2010");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblMspgrodatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblMSPGROData");

            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.Apiname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIName");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.CircleName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.InterfaceName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.Pgname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGName");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RechargeOperatorCategoryCircleLinkId).HasColumnName("RechargeOperatorCategoryCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestNo)
                .HasMaxLength(22)
                .IsUnicode(false);
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalComplaintRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
        });

        modelBuilder.Entity<TblNewOrderMaster>(entity =>
        {
            entity.HasKey(e => e.OrderId);

            entity.ToTable("tblNewOrderMaster");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.BillAmount).HasColumnType("money");
            entity.Property(e => e.CustAddress)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.CustCellNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CustGstno)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CustGSTNO");
            entity.Property(e => e.CustName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DiscPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("money");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.TaxAmount).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
        });

        modelBuilder.Entity<TblNewStudentBookDetail>(entity =>
        {
            entity.HasKey(e => e.BookDetailId);

            entity.ToTable("tblNewStudentBookDetails", tb => tb.HasTrigger("trgtblNewStudentBookDetailsHistory"));

            entity.HasIndex(e => e.AuthorName, "IX_tblNewStudentBookDetails_AuthorName");

            entity.HasIndex(e => e.BookName, "IX_tblNewStudentBookDetails_BookName");

            entity.HasIndex(e => e.PublisherName, "IX_tblNewStudentBookDetails_PublisherName");

            entity.HasIndex(e => e.StudentId, "IX_tblNewStudentBookDetails_StudentID");

            entity.Property(e => e.BookDetailId)
                .ValueGeneratedNever()
                .HasColumnName("BookDetailID");
            entity.Property(e => e.AuthorName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BookIssueDate).HasColumnType("datetime");
            entity.Property(e => e.BookName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.PublisherName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StudentId).HasColumnName("StudentID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblNewStudentBookDetailsCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_tblNewStudentBookDetailsCommand");

            entity.ToTable("tblNewStudentBookDetailsCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblNewStudentBookDetailsHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblNewStudentBookDetailsHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.BookDetailId).HasColumnName("BookDetailID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewauthorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAuthorName");
            entity.Property(e => e.NewbookIssueDate)
                .HasColumnType("datetime")
                .HasColumnName("NEWBookIssueDate");
            entity.Property(e => e.NewbookName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWBookName");
            entity.Property(e => e.NewpublisherName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWPublisherName");
            entity.Property(e => e.OldauthorName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAuthorName");
            entity.Property(e => e.OldbookIssueDate)
                .HasColumnType("datetime")
                .HasColumnName("OLDBookIssueDate");
            entity.Property(e => e.OldbookName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDBookName");
            entity.Property(e => e.OldpublisherName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDPublisherName");
            entity.Property(e => e.StudentId).HasColumnName("StudentID");
        });

        modelBuilder.Entity<TblNewStudentMaster>(entity =>
        {
            entity.HasKey(e => e.StudentId);

            entity.ToTable("tblNewStudentMaster", tb => tb.HasTrigger("trgNewStudentMasterHistory"));

            entity.HasIndex(e => e.Gender, "IX_tblNewStudentMaste_Gender");

            entity.HasIndex(e => e.EnrollmentNo, "IX_tblNewStudentMaster_EnrollmentNo");

            entity.HasIndex(e => e.Name, "IX_tblNewStudentMaster_Name");

            entity.HasIndex(e => e.Standard, "IX_tblNewStudentMaster_Standard");

            entity.Property(e => e.StudentId)
                .ValueGeneratedNever()
                .HasColumnName("StudentID");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DateOfBirth).HasColumnType("datetime");
            entity.Property(e => e.EnrollmentNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ParentsMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Standard)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StreamCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblNewStudentMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblNewStudentMasterCommand");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblNewStudentMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblNewStudentMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.NewdateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("NEWDateOfBirth");
            entity.Property(e => e.NewenrollmentNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWEnrollmentNo");
            entity.Property(e => e.Newgender)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NEWGender");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWName");
            entity.Property(e => e.NewparentsMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWParentsMobileNo");
            entity.Property(e => e.Newstandard)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWStandard");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.OlddateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("OLDDateOfBirth");
            entity.Property(e => e.OldenrollmentNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDEnrollmentNo");
            entity.Property(e => e.Oldgender)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OLDGender");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDName");
            entity.Property(e => e.OldparentsMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDParentsMobileNo");
            entity.Property(e => e.Oldstandard)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDStandard");
            entity.Property(e => e.StudentId).HasColumnName("StudentID");
        });

        modelBuilder.Entity<TblOdrMaster>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__tblOdrMa__C3905BAF02732F85");

            entity.ToTable("tblOdrMaster");

            entity.Property(e => e.OrderId)
                .ValueGeneratedNever()
                .HasColumnName("OrderID");
            entity.Property(e => e.ConfirmDate).HasColumnType("datetime");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("CreateDATE");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.OrderProductId).HasColumnName("OrderProductID");
            entity.Property(e => e.Remarks)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrder>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK_tblOrders_OrderID");

            entity.ToTable("tblOrders");

            entity.Property(e => e.OrderId)
                .ValueGeneratedNever()
                .HasColumnName("OrderID");
            entity.Property(e => e.BpdirectCommId).HasColumnName("BPDirectCommID");
            entity.Property(e => e.BprefCommId).HasColumnName("BPRefCommID");
            entity.Property(e => e.CardId)
                .HasComment("Order - OR - Order Request, OC - Order Confirmed, OF - Order Failed.         Cancel - CR - Cancel Request, CC - Cancel Confirmed, CF - Cancel Failed.     Redeem - RR - Redeem Request, RC - Redeem Confirmed, RF - Redeem Failed.")
                .HasColumnName("CardID");
            entity.Property(e => e.CpdirectCommId).HasColumnName("CPDirectCommID");
            entity.Property(e => e.CprefCommId).HasColumnName("CPRefCommID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustLevel1DistId).HasColumnName("CustLevel1DistID");
            entity.Property(e => e.CustLevel2DistId).HasColumnName("CustLevel2DistID");
            entity.Property(e => e.DiscAmount).HasColumnType("money");
            entity.Property(e => e.DiscountCouponId).HasColumnName("DiscountCouponID");
            entity.Property(e => e.DistLevel1DistId).HasColumnName("DistLevel1DistID");
            entity.Property(e => e.DistLevel2DistId).HasColumnName("DistLevel2DistID");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.MerchantId).HasColumnName("MerchantID");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderIddebit).HasColumnName("OrderIDDebit");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.RefundAmount).HasColumnType("money");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TmpCustomerId).HasColumnName("tmpCustomerID");
            entity.Property(e => e.TranAmount).HasColumnType("money");
            entity.Property(e => e.TranTypeId).HasColumnName("TranTypeID");
            entity.Property(e => e.TransactionNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderCancelDetail>(entity =>
        {
            entity.HasKey(e => e.CancelDetId);

            entity.ToTable("tblOrderCancelDetail");

            entity.Property(e => e.CancelDetId)
                .ValueGeneratedNever()
                .HasColumnName("CancelDetID");
            entity.Property(e => e.CancelDateTime).HasColumnType("datetime");
            entity.Property(e => e.CancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.CancelRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.OrderAmount).HasColumnType("money");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderDetail>(entity =>
        {
            entity.HasKey(e => e.OrderDetId);

            entity.ToTable("tblOrderDetail");

            entity.Property(e => e.OrderDetId)
                .ValueGeneratedNever()
                .HasColumnName("OrderDetID");
            entity.Property(e => e.CancelDetId).HasColumnName("CancelDetID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Pinno)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PINNo");
            entity.Property(e => e.SrNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderDetail1>(entity =>
        {
            entity.HasKey(e => e.IntOrderDetId);

            entity.ToTable("tblOrderDetails");

            entity.Property(e => e.IntOrderDetId)
                .ValueGeneratedNever()
                .HasColumnName("intOrderDetID");
            entity.Property(e => e.CurItemRate)
                .HasColumnType("money")
                .HasColumnName("curItemRate");
            entity.Property(e => e.FltQty).HasColumnName("fltQty");
            entity.Property(e => e.IntOrderId).HasColumnName("intOrderID");
            entity.Property(e => e.StrItemName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strItemName");
        });

        modelBuilder.Entity<TblOrderMast>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__tblOrder__C3905BCF1AE9D794");

            entity.ToTable("tblOrderMast");

            entity.Property(e => e.OrderId).ValueGeneratedNever();
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.ConfirmDateTime).HasColumnType("date");
            entity.Property(e => e.CreateDate).HasColumnType("date");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RequestDateTime)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("date");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderMaster>(entity =>
        {
            entity.HasKey(e => e.OrderId);

            entity.ToTable("tblOrderMaster");

            entity.Property(e => e.OrderId)
                .ValueGeneratedNever()
                .HasColumnName("OrderID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CircleId).HasColumnName("CircleID");
            entity.Property(e => e.ConsumerNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CustMobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.DiscountAmount).HasColumnType("money");
            entity.Property(e => e.DiscountPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.DistCustId).HasColumnName("DistCustID");
            entity.Property(e => e.Eduper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("EDUPer");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OperatorId).HasColumnName("OperatorID");
            entity.Property(e => e.OperatorRefNo)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.OrderConfirmDateTime).HasColumnType("datetime");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.RechargeId).HasColumnName("RechargeID");
            entity.Property(e => e.RechargeOperatorCircleLinkId).HasColumnName("RechargeOperatorCircleLinkID");
            entity.Property(e => e.Remark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.Scper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SCPer");
            entity.Property(e => e.ServerIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServerIP");
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Tdsper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("TDSPer");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalDiscountAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderMasterTest>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__tblOrder__C3905BAF43F60EC8");

            entity.ToTable("tblOrderMasterTest");

            entity.Property(e => e.OrderId)
                .ValueGeneratedNever()
                .HasColumnName("OrderID");
            entity.Property(e => e.ApirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("APIRefNo");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DiscountPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.MerchantAmount).HasColumnType("money");
            entity.Property(e => e.OrderRequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("STATUS");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderMasterTestCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblOrderMasterTestCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblOrderMasterTestHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblOrder__4D7B4ADD49AEE81E");

            entity.ToTable("tblOrderMasterTestHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewapirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAPIRefNo");
            entity.Property(e => e.NewdiscountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWDiscountPer");
            entity.Property(e => e.NewisCancelled).HasColumnName("NEWIsCancelled");
            entity.Property(e => e.NewmerchantAmount)
                .HasColumnType("money")
                .HasColumnName("NEWMerchantAmount");
            entity.Property(e => e.NeworderRequestDateTime)
                .HasColumnType("datetime")
                .HasColumnName("NEWOrderRequestDateTime");
            entity.Property(e => e.Newstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWSTATUS");
            entity.Property(e => e.OldapirefNo)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAPIRefNo");
            entity.Property(e => e.OlddiscountPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDDiscountPer");
            entity.Property(e => e.OldisCancelled).HasColumnName("OLDIsCancelled");
            entity.Property(e => e.OldmerchantAmount)
                .HasColumnType("money")
                .HasColumnName("OLDMerchantAmount");
            entity.Property(e => e.OldorderRequestDateTime)
                .HasColumnType("datetime")
                .HasColumnName("OLDOrderRequestDateTime");
            entity.Property(e => e.Oldstatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDSTATUS");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
        });

        modelBuilder.Entity<TblOrderRequestDetail>(entity =>
        {
            entity.HasKey(e => e.OrderRequestDetId);

            entity.ToTable("tblOrderRequestDetail");

            entity.Property(e => e.OrderRequestDetId)
                .ValueGeneratedNever()
                .HasColumnName("OrderRequestDetID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DiscountAmount).HasColumnType("money");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OrderRequestId).HasColumnName("OrderRequestID");
            entity.Property(e => e.OrderType)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.PromoAmount).HasColumnType("money");
            entity.Property(e => e.RefId).HasColumnName("RefID");
            entity.Property(e => e.TotalAgencyCharges).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalCommissionAmount).HasColumnType("money");
            entity.Property(e => e.TotalHoldAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalServiceCharges).HasColumnType("money");
            entity.Property(e => e.TotalServiceTax).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblOrderRequestMaster>(entity =>
        {
            entity.HasKey(e => e.OrderRequestId);

            entity.ToTable("tblOrderRequestMaster");

            entity.Property(e => e.OrderRequestId)
                .ValueGeneratedNever()
                .HasColumnName("OrderRequestID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DiscountAmount).HasColumnType("money");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.NetAmount).HasColumnType("money");
            entity.Property(e => e.OrderRefNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.OrderRequestDate).HasColumnType("datetime");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.PromoAmount).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TotalAgencyCharges).HasColumnType("money");
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalCommissionAmount).HasColumnType("money");
            entity.Property(e => e.TotalHoldAmount).HasColumnType("money");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalServiceCharges).HasColumnType("money");
            entity.Property(e => e.TotalServiceTax).HasColumnType("money");
            entity.Property(e => e.TotalTdsamount)
                .HasColumnType("money")
                .HasColumnName("TotalTDSAmount");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPageMaster>(entity =>
        {
            entity.HasKey(e => e.PageId).HasName("PK_tblPageMaster_1");

            entity.ToTable("tblPageMaster", tb =>
                {
                    tb.HasTrigger("trgPageMasterHistory");
                    tb.HasTrigger("trgSyncPageMaster");
                });

            entity.Property(e => e.PageId)
                .ValueGeneratedNever()
                .HasColumnName("PageID");
            entity.Property(e => e.BitMenuDefaultPage).HasColumnName("bitMenuDefaultPage");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.PageCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("PageURL");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPageMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblPageMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewbitMenuDefaultPage).HasColumnName("NEWbitMenuDefaultPage");
            entity.Property(e => e.NewisMaintenance).HasColumnName("NEWIsMaintenance");
            entity.Property(e => e.NewmaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWMaintenanceMessage");
            entity.Property(e => e.NewmenuId).HasColumnName("NEWMenuID");
            entity.Property(e => e.NewpageCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWPageCaption");
            entity.Property(e => e.NewpageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWPageURL");
            entity.Property(e => e.OldbitMenuDefaultPage).HasColumnName("OLDbitMenuDefaultPage");
            entity.Property(e => e.OldisMaintenance).HasColumnName("OLDIsMaintenance");
            entity.Property(e => e.OldmaintenanceMessage)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDMaintenanceMessage");
            entity.Property(e => e.OldmenuId).HasColumnName("OLDMenuID");
            entity.Property(e => e.OldpageCaption)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDPageCaption");
            entity.Property(e => e.OldpageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDPageURL");
            entity.Property(e => e.PageId).HasColumnName("PageID");
        });

        modelBuilder.Entity<TblPaymentGatewayMaster>(entity =>
        {
            entity.HasKey(e => e.Pgid).HasName("PK__tblPaymentGatewa__71FE6748");

            entity.ToTable("tblPaymentGatewayMaster");

            entity.Property(e => e.Pgid)
                .ValueGeneratedNever()
                .HasColumnName("PGID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.IsB2b).HasColumnName("IsB2B");
            entity.Property(e => e.IsB2c).HasColumnName("IsB2C");
            entity.Property(e => e.IsOperatorPg).HasColumnName("IsOperatorPG");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Pgcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("PGCode");
            entity.Property(e => e.ToolTip)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPaymentGatewayPgapilinkMaster>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayPgapilinkId).HasName("PK__tblPaymentGatewa__535C469C");

            entity.ToTable("tblPaymentGatewayPGAPILinkMaster");

            entity.Property(e => e.PaymentGatewayPgapilinkId)
                .ValueGeneratedNever()
                .HasColumnName("PaymentGatewayPGAPILinkID");
            entity.Property(e => e.BankIdforPg)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("BankIDForPG");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.CurrCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.Gmtoffset)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("GMTOffset");
            entity.Property(e => e.MerchantAuthKey)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.MerchantId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("MerchantID");
            entity.Property(e => e.Partner)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentGatewayPggroupTypeLinkId).HasColumnName("PaymentGatewayPGGroupTypeLinkID");
            entity.Property(e => e.Pgapiid).HasColumnName("PGAPIID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.RespMethod)
                .HasMaxLength(4)
                .IsUnicode(false);
            entity.Property(e => e.RespUrl)
                .HasMaxLength(80)
                .IsUnicode(false)
                .HasColumnName("RespURL");
            entity.Property(e => e.TranTypeAuthKeyCredit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TranTypeAuthKeyDebit)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TranTypeCreditId).HasColumnName("TranTypeCreditID");
            entity.Property(e => e.TranTypeDebitId).HasColumnName("TranTypeDebitID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.Vendor)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WebSiteUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("WebSiteURL");
        });

        modelBuilder.Entity<TblPaymentGatewayPgapiprocessLinkMaster>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayPgapiprocessLinkId).HasName("PK__tblPayme__7440BA84080C0D4A");

            entity.ToTable("tblPaymentGatewayPGAPIProcessLinkMaster");

            entity.Property(e => e.PaymentGatewayPgapiprocessLinkId)
                .ValueGeneratedNever()
                .HasColumnName("PaymentGatewayPGAPIProcessLinkID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.OsstranChargeAmount)
                .HasColumnType("money")
                .HasColumnName("OSSTranChargeAmount");
            entity.Property(e => e.OsstranChargePer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OSSTranChargePer");
            entity.Property(e => e.PaymentGatewayPgapilinkId).HasColumnName("PaymentGatewayPGAPILinkID");
            entity.Property(e => e.ProcessId).HasColumnName("ProcessID");
            entity.Property(e => e.ServiceTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPaymentGatewayPggroupTypeLinkMaster>(entity =>
        {
            entity.HasKey(e => e.PaymentGatewayPggroupTypeLinkId).HasName("PK__tblPayme__AA217ED037F02A96");

            entity.ToTable("tblPaymentGatewayPGGroupTypeLinkMaster");

            entity.Property(e => e.PaymentGatewayPggroupTypeLinkId)
                .ValueGeneratedNever()
                .HasColumnName("PaymentGatewayPGGroupTypeLinkID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.PggroupTypeId).HasColumnName("PGGroupTypeID");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPer>(entity =>
        {
            entity.HasKey(e => e.PerId).HasName("PK__tblPer__3B825B06");

            entity.ToTable("tblPer");

            entity.Property(e => e.PerId)
                .ValueGeneratedNever()
                .HasColumnName("PerID");
            entity.Property(e => e.Amt).HasColumnType("money");
            entity.Property(e => e.Per).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.PerName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPerchaseCoupon>(entity =>
        {
            entity.HasKey(e => e.PId);

            entity.ToTable("tbl_perchase_coupon");

            entity.Property(e => e.PId).HasColumnName("p_id");
            entity.Property(e => e.CouponCode)
                .HasMaxLength(100)
                .HasColumnName("coupon_code");
            entity.Property(e => e.PAmount).HasColumnName("p_amount");
            entity.Property(e => e.PName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("p_name");
            entity.Property(e => e.PPhone).HasColumnName("p_phone");
            entity.Property(e => e.PStatus)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("p_status");
        });

        modelBuilder.Entity<TblPersonCommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblPersonCommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblPersonHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblPerso__4D7B4ADDADE665B3");

            entity.ToTable("tblPersonHistory");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewFields).HasMaxLength(50);
            entity.Property(e => e.Oldfields)
                .HasMaxLength(50)
                .HasColumnName("OLDFields");
        });

        modelBuilder.Entity<TblPersonInfo>(entity =>
        {
            entity.HasKey(e => e.PersonId).HasName("PK__tblPerso__AA2FFB8528EDDE28");

            entity.ToTable("tblPersonInfo");

            entity.Property(e => e.PersonId)
                .ValueGeneratedNever()
                .HasColumnName("PersonID");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.PersonName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPersonMaster>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tblPerso__AF2DBA79B75C58DB");

            entity.ToTable("tblPersonMaster", tb => tb.HasTrigger("trgPersonMasterAudit"));

            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmpName).HasMaxLength(50);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPgapimaster>(entity =>
        {
            entity.HasKey(e => e.Pgapiid).HasName("PK__tblPGAPI__3EB5DCB73BC0BB7A");

            entity.ToTable("tblPGAPIMaster");

            entity.Property(e => e.Pgapiid).HasColumnName("PGAPIID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.MisloginId)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("MISLoginID");
            entity.Property(e => e.Mispassword)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("MISPassword");
            entity.Property(e => e.Pgapicode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PGAPICode");
            entity.Property(e => e.Pgapidesc)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PGAPIDesc");
            entity.Property(e => e.Pgapiname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("PGAPIName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPggroupTypeMaster>(entity =>
        {
            entity.HasKey(e => e.PggroupTypeId).HasName("PK__tblPGGro__640656763F914C5E");

            entity.ToTable("tblPGGroupTypeMaster");

            entity.Property(e => e.PggroupTypeId)
                .ValueGeneratedNever()
                .HasColumnName("PGGroupTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Description)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.PggroupTypeCode)
                .HasMaxLength(6)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("PGGroupTypeCode");
            entity.Property(e => e.PggroupTypeName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PGGroupTypeName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPinCodeMasterOld>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblPinCodeMaster_OLD");

            entity.Property(e => e.CityName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.DistrictsName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PinCodeId)
                .ValueGeneratedOnAdd()
                .HasColumnName("PinCodeID");
            entity.Property(e => e.Pincode)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.PostOfficeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StateName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPinCodeTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblPinCode_Temp");

            entity.Property(e => e.Pincode)
                .HasMaxLength(6)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPinMaster>(entity =>
        {
            entity.HasKey(e => e.PinId).HasName("PK__tblPinMa__A9250495719DA93E");

            entity.ToTable("tblPinMaster");

            entity.Property(e => e.PinId)
                .ValueGeneratedNever()
                .HasColumnName("PinID");
            entity.Property(e => e.PinNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PinRequestId).HasColumnName("PinRequestID");
            entity.Property(e => e.PinSrNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblPinRequestMaster>(entity =>
        {
            entity.HasKey(e => e.PinRequestId).HasName("PK__tblPinRe__6E22455A6DCD185A");

            entity.ToTable("tblPinRequestMaster");

            entity.Property(e => e.PinRequestId)
                .ValueGeneratedNever()
                .HasColumnName("PinRequestID");
            entity.Property(e => e.PinTypeId).HasColumnName("PinTypeID");
        });

        modelBuilder.Entity<TblPinTypeMaster>(entity =>
        {
            entity.HasKey(e => e.PinTypeId).HasName("PK__tblPinTy__4093C57F69FC8776");

            entity.ToTable("tblPinTypeMaster");

            entity.Property(e => e.PinTypeId)
                .ValueGeneratedNever()
                .HasColumnName("PinTypeID");
            entity.Property(e => e.PinId)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PinID");
            entity.Property(e => e.PinTitle)
                .HasMaxLength(15)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPincodeMaster>(entity =>
        {
            entity.HasKey(e => e.PinCodeId);

            entity.ToTable("tblPINCodeMaster");

            entity.Property(e => e.PinCodeId)
                .ValueGeneratedNever()
                .HasColumnName("PinCodeID");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CityName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DistrictName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PinCode)
                .HasMaxLength(6)
                .IsUnicode(false);
            entity.Property(e => e.PostOfficeName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblPlantMaster>(entity =>
        {
            entity.HasKey(e => e.PlantId).HasName("PK_PlantMaster");

            entity.ToTable("tblPlantMaster", tb => tb.HasTrigger("trgPlantMasterHistory"));

            entity.Property(e => e.PlantId)
                .ValueGeneratedNever()
                .HasColumnName("PlantID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.PlantCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlantName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.PlantTypeId).HasColumnName("PlantTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPlantMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_PlantMasterCommands");

            entity.ToTable("tblPlantMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblPlantMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK_PlantMasterHistory");

            entity.ToTable("tblPlantMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewplantCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWPlantCode");
            entity.Property(e => e.NewplantName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWPlantName");
            entity.Property(e => e.NewplantTypeId).HasColumnName("NEWPlantTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldplantCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDPlantCode");
            entity.Property(e => e.OldplantName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDPlantName");
            entity.Property(e => e.OldplantTypeId).HasColumnName("OLDPlantTypeID");
            entity.Property(e => e.PlantId).HasColumnName("PlantID");
        });

        modelBuilder.Entity<TblPlantTypeMaster>(entity =>
        {
            entity.HasKey(e => e.PlantTypeId).HasName("PK_PlantTypeMaster");

            entity.ToTable("tblPlantTypeMaster", tb => tb.HasTrigger("trgPlantTypeMasterHistory"));

            entity.Property(e => e.PlantTypeId)
                .ValueGeneratedNever()
                .HasColumnName("PlantTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.PlantTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PlantTypeName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblPlantTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK_PlantTypeCommands");

            entity.ToTable("tblPlantTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblPlantTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK_PlantTypeMasterHistory");

            entity.ToTable("tblPlantTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewplantTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWPlantTypeCode");
            entity.Property(e => e.NewplantTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWPlantTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldplantTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDPlantTypeCode");
            entity.Property(e => e.OldplantTypeName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDPlantTypeName");
            entity.Property(e => e.PlantTypeId).HasColumnName("PlantTypeID");
        });

        modelBuilder.Entity<TblProcessMaster>(entity =>
        {
            entity.HasKey(e => e.ProcessId).HasName("PK__tblProcessMaster__5AFD6864");

            entity.ToTable("tblProcessMaster");

            entity.Property(e => e.ProcessId)
                .ValueGeneratedNever()
                .HasColumnName("ProcessID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ProcessCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProcessDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.ProcessName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblProdMaster>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__tblProdM__B40CC6ED64E2CC9E");

            entity.ToTable("tblProdMaster");

            entity.Property(e => e.ProductId)
                .ValueGeneratedNever()
                .HasColumnName("ProductID");
            entity.Property(e => e.Price).HasColumnType("money");
            entity.Property(e => e.ProdcutmgtDate).HasColumnType("datetime");
            entity.Property(e => e.ProductName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblProductMast>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__tblProdu__B40CC6CD4203A4B5");

            entity.ToTable("tblProductMast");

            entity.Property(e => e.ProductId).ValueGeneratedNever();
            entity.Property(e => e.MgfDate).HasColumnType("date");
            entity.Property(e => e.ProductName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ProductType)
                .HasMaxLength(1)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblProductMaster>(entity =>
        {
            entity.HasKey(e => e.ProductId);

            entity.ToTable("tblProductMaster");

            entity.Property(e => e.ProductId)
                .ValueGeneratedNever()
                .HasColumnName("ProductID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ProductCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.ProductName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblProductMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblProductMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblProductMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblProductMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewproductCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NEWProductCode");
            entity.Property(e => e.NewproductName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWProductName");
            entity.Property(e => e.NewproductTypeId).HasColumnName("NEWProductTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldproductCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OLDProductCode");
            entity.Property(e => e.OldproductName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDProductName");
            entity.Property(e => e.OldproductTypeId).HasColumnName("OLDProductTypeID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
        });

        modelBuilder.Entity<TblProductServiceMaster>(entity =>
        {
            entity.HasKey(e => e.ProductServiceId).HasName("PK__tblProdu__A4EAC406ACF6B5F5");

            entity.ToTable("tblProductServiceMaster", tb => tb.HasTrigger("trgProductServiceMasterHistory"));

            entity.Property(e => e.ProductServiceId)
                .ValueGeneratedNever()
                .HasColumnName("ProductServiceID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.MerchantId).HasColumnName("MerchantID");
            entity.Property(e => e.ProductServiceCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProductServiceName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.Updatedate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblProductServiceMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblProdu__6B4108E6BD5216D1");

            entity.ToTable("tblProductServiceMasterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblProductServiceMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblProdu__4D7B4ADDD4759985");

            entity.ToTable("tblProductServiceMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewmerchantId).HasColumnName("NEWMerchantID");
            entity.Property(e => e.NewproductServiceCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWProductServiceCode");
            entity.Property(e => e.NewproductServiceName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWProductServiceName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldmerchantId).HasColumnName("OLDMerchantID");
            entity.Property(e => e.OldproductServiceCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDProductServiceCode");
            entity.Property(e => e.OldproductServiceName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDProductServiceName");
            entity.Property(e => e.ProductServiceId).HasColumnName("ProductServiceID");
        });

        modelBuilder.Entity<TblProductTypeMaster>(entity =>
        {
            entity.HasKey(e => e.ProductTypeId).HasName("PK__tblProdu__A1312F4E55F65A20");

            entity.ToTable("tblProductTypeMaster");

            entity.Property(e => e.ProductTypeId)
                .ValueGeneratedNever()
                .HasColumnName("ProductTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ProductTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProductTypeName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblProductTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblProdu__6B4108E65E8BA021");

            entity.ToTable("tblProductTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblProductTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblProdu__4D7B4ADD1E711B0C");

            entity.ToTable("tblProductTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewproductTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWProductTypeCode");
            entity.Property(e => e.NewproductTypeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWProductTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldproductTypeCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDProductTypeCode");
            entity.Property(e => e.OldproductTypeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDProductTypeName");
            entity.Property(e => e.ProductTypeId).HasColumnName("ProductTypeID");
        });

        modelBuilder.Entity<TblProviderMaster>(entity =>
        {
            entity.HasKey(e => e.ProviderId).HasName("PK__tblProvi__B54C689D493A1746");

            entity.ToTable("tblProviderMaster");

            entity.Property(e => e.ProviderId)
                .ValueGeneratedNever()
                .HasColumnName("ProviderID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ProviderCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ProviderName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ProviderTypeId).HasColumnName("ProviderTypeID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblProviderMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblProvi__6B4108E6F57690CF");

            entity.ToTable("tblProviderMasterCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblProviderMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblProvi__4D7B4ADD647C9C04");

            entity.ToTable("tblProviderMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewproviderCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWProviderCode");
            entity.Property(e => e.NewproviderName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWProviderName");
            entity.Property(e => e.NewproviderTypeId).HasColumnName("NEWProviderTypeID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldproviderCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDProviderCode");
            entity.Property(e => e.OldproviderName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDProviderName");
            entity.Property(e => e.OldproviderTypeId).HasColumnName("OLDProviderTypeID");
            entity.Property(e => e.ProviderId).HasColumnName("ProviderID");
        });

        modelBuilder.Entity<TblProviderTypeMaster>(entity =>
        {
            entity.HasKey(e => e.ProviderTypeId).HasName("PK__tblProvi__21326757EA99540F");

            entity.ToTable("tblProviderTypeMaster");

            entity.Property(e => e.ProviderTypeId)
                .ValueGeneratedNever()
                .HasColumnName("ProviderTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ProviderTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ProviderTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblProviderTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblProvi__6B4108E63CD36E7E");

            entity.ToTable("tblProviderTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblProviderTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblProvi__4D7B4ADD11949E12");

            entity.ToTable("tblProviderTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewproviderTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWProviderTypeCode");
            entity.Property(e => e.NewproviderTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWProviderTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldproviderTypeCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDProviderTypeCode");
            entity.Property(e => e.OldproviderTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDProviderTypeName");
            entity.Property(e => e.ProviderTypeId).HasColumnName("ProviderTypeID");
        });

        modelBuilder.Entity<TblReconciliationDetail>(entity =>
        {
            entity.HasKey(e => e.IntReconciliationDetId);

            entity.ToTable("tblReconciliationDetail");

            entity.Property(e => e.IntReconciliationDetId)
                .ValueGeneratedNever()
                .HasColumnName("intReconciliationDetID");
            entity.Property(e => e.BitIsProcessed).HasColumnName("bitIsProcessed");
            entity.Property(e => e.BitIsVerified).HasColumnName("bitIsVerified");
            entity.Property(e => e.BitIsWlautoCancelled).HasColumnName("bitIsWLAutoCancelled");
            entity.Property(e => e.CurAmt)
                .HasColumnType("money")
                .HasColumnName("curAmt");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.DtmProcessedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmProcessedDateTime");
            entity.Property(e => e.DtmVerifiedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmVerifiedDateTime");
            entity.Property(e => e.IntReconciliationId).HasColumnName("intReconciliationID");
            entity.Property(e => e.StrClass)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strClass");
            entity.Property(e => e.StrOperatorTranId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strOperatorTranID");
            entity.Property(e => e.StrPnrnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strPNRNumber");
            entity.Property(e => e.StrProcessRemark)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("strProcessRemark");
            entity.Property(e => e.StrTicketNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strTicketNumber");
            entity.Property(e => e.UserId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UserID");
        });

        modelBuilder.Entity<TblReconciliationMaster>(entity =>
        {
            entity.HasKey(e => e.IntReconciliationId);

            entity.ToTable("tblReconciliationMaster");

            entity.Property(e => e.IntReconciliationId)
                .ValueGeneratedNever()
                .HasColumnName("intReconciliationID");
            entity.Property(e => e.BitIsBookCancel).HasColumnName("bitIsBookCancel");
            entity.Property(e => e.BitIsProcessed).HasColumnName("bitIsProcessed");
            entity.Property(e => e.BitIsSpecialRefund).HasColumnName("bitIsSpecialRefund");
            entity.Property(e => e.BitIsTdr).HasColumnName("bitIsTDR");
            entity.Property(e => e.CurTotalAmt)
                .HasColumnType("money")
                .HasColumnName("curTotalAmt");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.DtmProcessedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmProcessedDateTime");
            entity.Property(e => e.DtmTranDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmTranDate");
            entity.Property(e => e.DtmUploadDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUploadDateTime");
            entity.Property(e => e.IntConfigurationId).HasColumnName("intConfigurationID");
            entity.Property(e => e.IntTotalTran).HasColumnName("intTotalTran");
            entity.Property(e => e.StrClientIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strClientIP");
            entity.Property(e => e.StrFileName)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("strFileName");
            entity.Property(e => e.StrRemark)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("strRemark");
            entity.Property(e => e.StrUserId)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("strUserID");
        });

        modelBuilder.Entity<TblRedeem>(entity =>
        {
            entity.HasKey(e => e.CouponRedeemId).HasName("PK__tblRedee__54D91FD5267F5D80");

            entity.ToTable("tblRedeem");

            entity.Property(e => e.CouponRedeemId)
                .ValueGeneratedNever()
                .HasColumnName("CouponRedeemID");
            entity.Property(e => e.CouponCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CouponId).HasColumnName("CouponID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");
        });

        modelBuilder.Entity<TblRedeemOrder>(entity =>
        {
            entity.HasKey(e => e.RedeemOrderId).HasName("PK_tblRedeemOrders_RedeemOrderID");

            entity.ToTable("tblRedeemOrders");

            entity.Property(e => e.RedeemOrderId)
                .ValueGeneratedNever()
                .HasColumnName("RedeemOrderID");
            entity.Property(e => e.ConsignmentNo)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CourierName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DispatchDate).HasColumnType("datetime");
            entity.Property(e => e.DispatchMode)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.DispatchRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProcessedDate).HasColumnType("datetime");
            entity.Property(e => e.ReedeemProductId).HasColumnName("ReedeemProductID");
            entity.Property(e => e.RejectedDate).HasColumnType("datetime");
            entity.Property(e => e.RejectedRemark)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.RequestDate).HasColumnType("datetime");
            entity.Property(e => e.RewardPointValue).HasColumnType("money");
            entity.Property(e => e.TotalRewardPointValue).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRedeemOrdersMax>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblRedeemOrdersMax");

            entity.Property(e => e.MaxId).HasColumnName("MaxID");
        });

        modelBuilder.Entity<TblRedeemProductBrandMaster>(entity =>
        {
            entity.HasKey(e => e.ReedeemProductBrandId).HasName("PK_tblRedeemProductBrandMaster_ReedeemProductBrandID");

            entity.ToTable("tblRedeemProductBrandMaster");

            entity.Property(e => e.ReedeemProductBrandId)
                .ValueGeneratedNever()
                .HasColumnName("ReedeemProductBrandID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ReedeemProductBrandCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReedeemProductBrandDesc)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReedeemProductBrandName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRedeemProductCategoryMaster>(entity =>
        {
            entity.HasKey(e => e.ReedeemProductCategoryId).HasName("PK_tblRedeemProductCategoryMaster_ReedeemProductCategoryID");

            entity.ToTable("tblRedeemProductCategoryMaster");

            entity.Property(e => e.ReedeemProductCategoryId)
                .ValueGeneratedNever()
                .HasColumnName("ReedeemProductCategoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ReedeemProductCategoryCode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReedeemProductCategoryDesc)
                .HasMaxLength(1000)
                .IsUnicode(false);
            entity.Property(e => e.ReedeemProductCategoryName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRedeemProductMaster>(entity =>
        {
            entity.HasKey(e => e.ReedeemProductId).HasName("PK_tblRedeemProductMaster_ReedeemProductID");

            entity.ToTable("tblRedeemProductMaster");

            entity.Property(e => e.ReedeemProductId)
                .ValueGeneratedNever()
                .HasColumnName("ReedeemProductID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ImageUrl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("ImageURL");
            entity.Property(e => e.ProductMrp)
                .HasColumnType("money")
                .HasColumnName("ProductMRP");
            entity.Property(e => e.ReedeemProductBrandId).HasColumnName("ReedeemProductBrandID");
            entity.Property(e => e.ReedeemProductCategoryId).HasColumnName("ReedeemProductCategoryID");
            entity.Property(e => e.ReedeemProductCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ReedeemProductDesc).HasColumnType("text");
            entity.Property(e => e.ReedeemProductName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.RewardPointValue).HasColumnType("money");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRoleMaster>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK_tblRoleMaster_1");

            entity.ToTable("tblRoleMaster", tb =>
                {
                    tb.HasTrigger("trgRoleMasterHistory");
                    tb.HasTrigger("trgSyncRoleMaster");
                });

            entity.Property(e => e.RoleId)
                .ValueGeneratedNever()
                .HasColumnName("RoleID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RoleDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RoleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRoleMaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblRoleMAster1");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RoleDesc)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
            entity.Property(e => e.RoleName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblRoleMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblRoleMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewisOfflineSupport).HasColumnName("NEWIsOfflineSupport");
            entity.Property(e => e.NewroleDesc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("NEWRoleDesc");
            entity.Property(e => e.NewroleName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWRoleName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldisOfflineSupport).HasColumnName("OLDIsOfflineSupport");
            entity.Property(e => e.OldroleDesc)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("OLDRoleDesc");
            entity.Property(e => e.OldroleName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDRoleName");
            entity.Property(e => e.RoleId).HasColumnName("RoleID");
        });

        modelBuilder.Entity<TblSampleMaster>(entity =>
        {
            entity.HasKey(e => e.SampleId).HasName("PK_tblSampleMaster_SampleID");

            entity.ToTable("tblSampleMaster");

            entity.Property(e => e.SampleId)
                .ValueGeneratedNever()
                .HasColumnName("SampleID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Description)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SampleCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasComment("store code");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblSampleMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblSampl__4D7B4ADD65570293");

            entity.ToTable("tblSampleMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newdescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWDescription");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewsampleCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("NEWSampleCode");
            entity.Property(e => e.Olddescription)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDDescription");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldsampleCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("OLDSampleCode");
            entity.Property(e => e.SampleId).HasColumnName("SampleID");
        });

        modelBuilder.Entity<TblServiceMaster>(entity =>
        {
            entity.HasKey(e => e.ServiceId).HasName("PK__tblServi__C51BB0EA0000D72E");

            entity.ToTable("tblServiceMaster");

            entity.Property(e => e.ServiceId)
                .ValueGeneratedNever()
                .HasColumnName("ServiceID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.ServiceCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ServiceDesc)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.ServiceFee).HasColumnType("money");
            entity.Property(e => e.ServiceName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblServiceMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblServi__6B4108E603D16812");

            entity.ToTable("tblServiceMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblServiceMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblServi__4D7B4ADD3DFE09A7");

            entity.ToTable("tblServiceMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewserviceCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWServiceCode");
            entity.Property(e => e.NewserviceDesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("NEWServiceDesc");
            entity.Property(e => e.NewserviceFee)
                .HasColumnType("money")
                .HasColumnName("NEWServiceFee");
            entity.Property(e => e.NewserviceName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWServiceName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldserviceCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDServiceCode");
            entity.Property(e => e.OldserviceDesc)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("OLDServiceDesc");
            entity.Property(e => e.OldserviceFee)
                .HasColumnType("money")
                .HasColumnName("OLDServiceFee");
            entity.Property(e => e.OldserviceName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDServiceName");
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
        });

        modelBuilder.Entity<TblSperrorMgmt>(entity =>
        {
            entity.HasKey(e => e.Spname).HasName("PK_tblSPErrorMgmt_1");

            entity.ToTable("tblSPErrorMgmt", tb => tb.HasTrigger("trgSyncSPErrorMgmt"));

            entity.Property(e => e.Spname)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TblStaffIncentivePeriod>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStaffIncentivePeriod");

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.GenarationDate).HasColumnType("datetime");
            entity.Property(e => e.IncentivePeriodId).HasColumnName("IncentivePeriodID");
            entity.Property(e => e.Month).HasColumnName("MONTH");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.Year).HasColumnName("YEAR");
        });

        modelBuilder.Entity<TblState>(entity =>
        {
            entity.HasKey(e => e.Sid);

            entity.ToTable("tbl_state");

            entity.Property(e => e.Sid).HasColumnName("sid");
            entity.Property(e => e.Cid).HasColumnName("cid");
            entity.Property(e => e.Sname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("sname");
        });

        modelBuilder.Entity<TblState1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStates");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.ZoneId).HasColumnName("ZoneID");
        });

        modelBuilder.Entity<TblStateMaster>(entity =>
        {
            entity.HasKey(e => e.StateId).HasName("PK_tblStates");

            entity.ToTable("tblStateMaster");

            entity.Property(e => e.StateId)
                .ValueGeneratedNever()
                .HasColumnName("StateID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpDateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpDateIP");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStateMasterBu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStateMasterBus");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpDateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpDateIP");
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblStatesAto>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStatesATO");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateCode)
                .HasMaxLength(4)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StateName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStationMasterBu>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStationMasterBus");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StateId).HasColumnName("StateID");
            entity.Property(e => e.StationCode)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.StationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStdMaster>(entity =>
        {
            entity.HasKey(e => e.StudId).HasName("PK__tblStdMa__F5C0A81F29C206D0");

            entity.ToTable("tblStdMaster");

            entity.Property(e => e.StudId)
                .ValueGeneratedNever()
                .HasColumnName("StudID");
            entity.Property(e => e.AddmissionDate).HasColumnType("datetime");
            entity.Property(e => e.Address)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("date");
            entity.Property(e => e.Branch)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.ContactNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Course)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("EmailID");
            entity.Property(e => e.EnrollNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StudName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStdMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblStdMa__6B4108E60955373E");

            entity.ToTable("tblStdMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStdMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblStdMa__4D7B4ADD31632898");

            entity.ToTable("tblStdMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("date");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.Newcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.NewcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NEWContactNo");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmailID");
            entity.Property(e => e.NewenrollNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWEnrollNo");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.OldcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("OLDContactNo");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmailID");
            entity.Property(e => e.OldenrollNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDEnrollNo");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.StudId).HasColumnName("StudID");
        });

        modelBuilder.Entity<TblStomenuMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblSTOMenuMaster");

            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IdKey).HasColumnName("ID_Key");
            entity.Property(e => e.IntCompId).HasColumnName("intCompID");
            entity.Property(e => e.IntMenuId).HasColumnName("intMenuID");
            entity.Property(e => e.IntOperationlevel).HasColumnName("intOperationlevel");
            entity.Property(e => e.IntParentMenuId).HasColumnName("intParentMenuID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrMenuItem)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strMenuItem");
            entity.Property(e => e.StrMenuName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strMenuName");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblStoredProcedureMaster>(entity =>
        {
            entity.HasKey(e => e.Spid).HasName("PK_tblStoredProcedureMaster_SPID");

            entity.ToTable("tblStoredProcedureMaster");

            entity.Property(e => e.Spid)
                .ValueGeneratedNever()
                .HasColumnName("SPID");
            entity.Property(e => e.Spname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TblStousersMenuRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblSTOUsersMenuRights");

            entity.Property(e => e.BitIsAdd).HasColumnName("bitIsAdd");
            entity.Property(e => e.BitIsAllowed).HasColumnName("bitIsAllowed");
            entity.Property(e => e.BitIsDelete).HasColumnName("bitIsDelete");
            entity.Property(e => e.BitIsEdit).HasColumnName("bitIsEdit");
            entity.Property(e => e.BitIsPrint).HasColumnName("bitIsPrint");
            entity.Property(e => e.BitIsView).HasColumnName("bitIsView");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IdKey).HasColumnName("ID_Key");
            entity.Property(e => e.IntMenuId).HasColumnName("intMenuID");
            entity.Property(e => e.IntUserId).HasColumnName("intUserID");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblStud>(entity =>
        {
            entity.HasKey(e => e.StudId).HasName("PK__tblStud__F5C0A81F2F7D2352");

            entity.ToTable("tblStud");

            entity.Property(e => e.StudId)
                .ValueGeneratedNever()
                .HasColumnName("StudID");
            entity.Property(e => e.StudCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StudName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblStudMaster>(entity =>
        {
            entity.HasKey(e => e.StudId).HasName("PK__tblStud___F5C0A7FF6458BCB9");

            entity.ToTable("tblStud_Master");

            entity.Property(e => e.StudId).ValueGeneratedNever();
            entity.Property(e => e.AddmissionDate).HasColumnType("date");
            entity.Property(e => e.Address)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BirthDate).HasColumnType("date");
            entity.Property(e => e.Branch)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.City)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ContactNo)
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.Course)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.EmailId)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.StudName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStudMaster1>(entity =>
        {
            entity.HasKey(e => e.StudentId).HasName("PK__tblStudM__F5C0A81F55AE121F");

            entity.ToTable("tblStudMaster");

            entity.Property(e => e.StudentId)
                .ValueGeneratedNever()
                .HasColumnName("StudentID");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StudentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStudMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblStud___6B4108E668294D9D");

            entity.ToTable("tblStud_MasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStudMasterCommand2>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblStudM__6B4108E6B3ACC50D");

            entity.ToTable("tblStudMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStudMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblStud___4D7B4ABD6BF9DE81");

            entity.ToTable("tblStud_MasterHistory");

            entity.Property(e => e.HistoryId).ValueGeneratedNever();
            entity.Property(e => e.HistoryDate).HasColumnType("date");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWAddress");
            entity.Property(e => e.Newcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWCity");
            entity.Property(e => e.NewcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("NEWContactNo");
            entity.Property(e => e.NewemailId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWEmailId");
            entity.Property(e => e.NewenrollNo).HasColumnName("NEWEnrollNo");
            entity.Property(e => e.Oldaddress)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDAddress");
            entity.Property(e => e.Oldcity)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDCity");
            entity.Property(e => e.OldcontactNo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("OLDContactNo");
            entity.Property(e => e.OldemailId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("OLDEmailId");
            entity.Property(e => e.OldenrollNo).HasColumnName("OLDEnrollNo");

            entity.HasOne(d => d.Command).WithMany(p => p.TblStudMasterHistories)
                .HasForeignKey(d => d.CommandId)
                .HasConstraintName("FK__tblStud_M__Comma__6DE226F3");

            entity.HasOne(d => d.Stud).WithMany(p => p.TblStudMasterHistories)
                .HasForeignKey(d => d.StudId)
                .HasConstraintName("FK__tblStud_M__StudI__6ED64B2C");
        });

        modelBuilder.Entity<TblStudMasterHistory1>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblStudM__4D7B4ADDDD75F207");

            entity.ToTable("tblStudMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcityId).HasColumnName("NEWCityID");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewstudName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWStudName");
            entity.Property(e => e.OldcityId).HasColumnName("OLDCityID");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldstudName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDStudName");
            entity.Property(e => e.StudId).HasColumnName("StudID");
        });

        modelBuilder.Entity<TblStudMasterMark>(entity =>
        {
            entity.HasKey(e => e.MarkId).HasName("PK__tblStudM__4E30D34639B87777");

            entity.ToTable("tblStudMasterMark", tb => tb.HasTrigger("trgStudMasterMarkHistory"));

            entity.Property(e => e.MarkId)
                .ValueGeneratedNever()
                .HasColumnName("MarkID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DiplomaPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.Hscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("HSCPer");
            entity.Property(e => e.Sscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("SSCPer");
            entity.Property(e => e.StudId).HasColumnName("StudID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStudMasterMarkCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblStudM__6B4108E63D89085B");

            entity.ToTable("tblStudMasterMarkCommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStudMasterMarkHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblStudM__4D7B4ADD4159993F");

            entity.ToTable("tblStudMasterMarkHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.MarkId).HasColumnName("MarkID");
            entity.Property(e => e.NewdiplomaPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWDiplomaPer");
            entity.Property(e => e.Newhscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWHSCPer");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newsscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("NEWSSCPer");
            entity.Property(e => e.NewstudId).HasColumnName("NEWStudID");
            entity.Property(e => e.OlddiplomaPer)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDDiplomaPer");
            entity.Property(e => e.Oldhscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDHSCPer");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldsscper)
                .HasColumnType("decimal(5, 2)")
                .HasColumnName("OLDSSCPer");
            entity.Property(e => e.OldstudId).HasColumnName("OLDStudID");
        });

        modelBuilder.Entity<TblStudMastercommand1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStudMastercommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStudent>(entity =>
        {
            entity.ToTable("tbl_Student");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.StudentAddress)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.StudentEmail)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.StudentName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblStudent1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStudent");

            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StudId).HasColumnName("StudID");
            entity.Property(e => e.StudName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStudent2>(entity =>
        {
            entity.HasKey(e => e.StudId);

            entity.ToTable("tblStudents", tb => tb.HasTrigger("trgStudens"));

            entity.Property(e => e.StudId)
                .ValueGeneratedNever()
                .HasColumnName("StudID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.StudName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblStudentCourseRegistration>(entity =>
        {
            entity.HasKey(e => e.StudentCourseRegId).HasName("PK__tblStude__68BA42E543188FD6");

            entity.ToTable("tblStudentCourseRegistration");

            entity.Property(e => e.StudentCourseRegId)
                .ValueGeneratedNever()
                .HasColumnName("StudentCourseRegID");
            entity.Property(e => e.CourseId).HasColumnName("CourseID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.RegDate).HasColumnType("datetime");
            entity.Property(e => e.RegFee).HasColumnType("money");
            entity.Property(e => e.StudentId).HasColumnName("StudentID");
        });

        modelBuilder.Entity<TblStudentHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId);

            entity.ToTable("tblStudentHistory");

            entity.Property(e => e.HistoryId).HasColumnName("historyID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryBy)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.HistoryOn).HasColumnType("datetime");
            entity.Property(e => e.NewstudAge).HasColumnName("NEWStudAge");
            entity.Property(e => e.NewstudName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWStud_Name");
            entity.Property(e => e.NewstudStandard).HasColumnName("NEWStudStandard");
            entity.Property(e => e.OldstudAge).HasColumnName("OLDStudAge");
            entity.Property(e => e.OldstudName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDStud_Name");
            entity.Property(e => e.OldstudStandard).HasColumnName("OLDStudStandard");
            entity.Property(e => e.Operation)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StudId).HasColumnName("StudID");
        });

        modelBuilder.Entity<TblStudentMaster>(entity =>
        {
            entity.HasKey(e => e.StudentId).HasName("PK__tblStude__32C52A7931EE03D4");

            entity.ToTable("tblStudentMaster", tb => tb.HasTrigger("trgStudentMasterHistory"));

            entity.Property(e => e.StudentId)
                .ValueGeneratedNever()
                .HasColumnName("StudentID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StudentAddress)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.StudentCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StudentName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblStudentMasterCommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblStudentMasterCommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblStudentMasterCommand1>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblStudentMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.CommnadProc)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblStudentMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblStude__4D7B4ADD398F259C");

            entity.ToTable("tblStudentMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate)
                .HasColumnType("datetime")
                .HasColumnName("HIstoryDate");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewstudentAddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("NEWStudentAddress");
            entity.Property(e => e.NewstudentCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWStudentCode");
            entity.Property(e => e.NewstudentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWStudentName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldstudentAddress)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("OLDStudentAddress");
            entity.Property(e => e.OldstudentCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDStudentCode");
            entity.Property(e => e.OldstudentName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDStudentName");
            entity.Property(e => e.StudentId).HasColumnName("StudentID");
        });

        modelBuilder.Entity<TblSubCategoryMaster>(entity =>
        {
            entity.HasKey(e => e.SubCategoryId).HasName("PK__tblSubCa__26BE5BF954EC0214");

            entity.ToTable("tblSubCategoryMaster");

            entity.Property(e => e.SubCategoryId)
                .ValueGeneratedNever()
                .HasColumnName("SubCategoryID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.SubCategoryCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.SubCategoryName)
                .HasMaxLength(500)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblSyncDb>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblSyncDB");

            entity.Property(e => e.DatabaseName)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTeamMaster>(entity =>
        {
            entity.HasKey(e => e.TeamId).HasName("PK__tblTeamM__123AE7B976818E95");

            entity.ToTable("tblTeamMaster");

            entity.Property(e => e.TeamId)
                .ValueGeneratedNever()
                .HasColumnName("TeamID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.TeamDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.TeamName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTeamMemberMaster>(entity =>
        {
            entity.HasKey(e => e.TeamMemberId).HasName("PK__tblTeamM__C7C092857A521F79");

            entity.ToTable("tblTeamMemberMaster");

            entity.Property(e => e.TeamMemberId)
                .ValueGeneratedNever()
                .HasColumnName("TeamMemberID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.TeamId).HasColumnName("TeamID");
            entity.Property(e => e.TeamMemberName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamMemberRole)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TeamMemberSurname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTeamMemberMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblTeamM__6B4108E67E22B05D");

            entity.ToTable("tblTeamMemberMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblTeamMemberMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblTeamM__4D7B4ADD01F34141");

            entity.ToTable("tblTeamMemberMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewteamId).HasColumnName("NEWTeamID");
            entity.Property(e => e.NewteamMemberName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWTeamMemberName");
            entity.Property(e => e.NewteamMemberRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWTeamMemberRole");
            entity.Property(e => e.NewteamMemberSurname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWTeamMemberSurname");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OldteamId).HasColumnName("OLDTeamID");
            entity.Property(e => e.OldteamMemberName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDTeamMemberName");
            entity.Property(e => e.OldteamMemberRole)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDTeamMemberRole");
            entity.Property(e => e.OldteamMemberSurname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDTeamMemberSurname");
            entity.Property(e => e.TeamMemberId).HasColumnName("TeamMemberID");
        });

        modelBuilder.Entity<TblTemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTemp");

            entity.Property(e => e.Desc).HasMaxLength(255);
            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.Status).HasMaxLength(255);
        });

        modelBuilder.Entity<TblTempBusapistationLinkMaster>(entity =>
        {
            entity.HasKey(e => e.ApistationLinkId).HasName("PK__tblTempB__441478641DDCE986");

            entity.ToTable("tblTempBUSAPIStationLinkMaster");

            entity.Property(e => e.ApistationLinkId)
                .ValueGeneratedNever()
                .HasColumnName("APIStationLinkID");
            entity.Property(e => e.Apiid).HasColumnName("APIID");
            entity.Property(e => e.ApirequestValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIRequestValue");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StationId).HasColumnName("StationID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTempBusstationMaster>(entity =>
        {
            entity.HasKey(e => e.StationId).HasName("PK__tblTempB__E0D8A6DD21AD7A6A");

            entity.ToTable("tblTempBUSStationMaster");

            entity.Property(e => e.StationId)
                .ValueGeneratedNever()
                .HasColumnName("StationID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommonStationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StationCode)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.StationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTempKeyoor>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("pk_keyoor");

            entity.ToTable("tblTempKeyoor");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("Emp_ID");
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.BankType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength();
            entity.Property(e => e.CityName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IntuserId).HasColumnName("intuserID");
            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Occupation)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTempRedBusStationResponse>(entity =>
        {
            entity.HasKey(e => e.StationId).HasName("PK__tblTempR__E0D8A6DD257E0B4E");

            entity.ToTable("tblTempRedBusStationResponse");

            entity.Property(e => e.StationId)
                .ValueGeneratedNever()
                .HasColumnName("StationID");
            entity.Property(e => e.ApirequestValue)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APIRequestValue");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StationName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTest>(entity =>
        {
            entity.HasKey(e => e.IntTestId);

            entity.ToTable("tblTest");

            entity.Property(e => e.IntTestId)
                .ValueGeneratedNever()
                .HasColumnName("intTestID");
            entity.Property(e => e.StrAddress)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strAddress");
            entity.Property(e => e.StrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCity");
            entity.Property(e => e.StrName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strName");
            entity.Property(e => e.Test).HasColumnName("test");
        });

        modelBuilder.Entity<TblTest1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTest1");

            entity.Property(e => e.CreateDateTime).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Name)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("NAME");
            entity.Property(e => e.RollNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDateTime).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTest123>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTest123");

            entity.Property(e => e.Column1).IsUnicode(false);
            entity.Property(e => e.EcAcode)
                .IsUnicode(false)
                .HasColumnName("EC_ACODE");
            entity.Property(e => e.EcAname)
                .IsUnicode(false)
                .HasColumnName("EC_ANAME");
            entity.Property(e => e.EcBcode)
                .IsUnicode(false)
                .HasColumnName("EC_BCODE");
            entity.Property(e => e.EcBillRef)
                .IsUnicode(false)
                .HasColumnName("EC_BILL_REF");
            entity.Property(e => e.EcBname)
                .IsUnicode(false)
                .HasColumnName("EC_BNAME");
            entity.Property(e => e.EcCcode)
                .IsUnicode(false)
                .HasColumnName("EC_CCODE");
            entity.Property(e => e.EcCname)
                .IsUnicode(false)
                .HasColumnName("EC_CNAME");
            entity.Property(e => e.EcEcode)
                .IsUnicode(false)
                .HasColumnName("EC_ECODE");
            entity.Property(e => e.EcEname)
                .IsUnicode(false)
                .HasColumnName("EC_ENAME");
            entity.Property(e => e.EcIlRef)
                .IsUnicode(false)
                .HasColumnName("EC_IL_REF");
            entity.Property(e => e.EcSbankname)
                .IsUnicode(false)
                .HasColumnName("EC_SBANKNAME");
            entity.Property(e => e.EcScode)
                .IsUnicode(false)
                .HasColumnName("EC_SCODE");
            entity.Property(e => e.EcScodeC)
                .IsUnicode(false)
                .HasColumnName("EC_SCODE_C");
            entity.Property(e => e.EcSname)
                .IsUnicode(false)
                .HasColumnName("EC_SNAME");
            entity.Property(e => e.NcBookClass)
                .IsUnicode(false)
                .HasColumnName("NC_BOOK_CLASS");
            entity.Property(e => e.NcCosname)
                .IsUnicode(false)
                .HasColumnName("NC_COSNAME");
            entity.Property(e => e.NcCrs)
                .IsUnicode(false)
                .HasColumnName("NC_CRS");
            entity.Property(e => e.NcCurrc)
                .IsUnicode(false)
                .HasColumnName("NC_CURRC");
            entity.Property(e => e.NcCurrs)
                .IsUnicode(false)
                .HasColumnName("NC_CURRS");
            entity.Property(e => e.NcDealCode)
                .IsUnicode(false)
                .HasColumnName("NC_DEAL_CODE");
            entity.Property(e => e.NcFareBasis)
                .IsUnicode(false)
                .HasColumnName("NC_FARE_BASIS");
            entity.Property(e => e.NcFltcl1)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_1");
            entity.Property(e => e.NcFltcl2)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_2");
            entity.Property(e => e.NcFltcl3)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_3");
            entity.Property(e => e.NcFltcl4)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_4");
            entity.Property(e => e.NcFltno1)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_1");
            entity.Property(e => e.NcFltno2)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_2");
            entity.Property(e => e.NcFltno3)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_3");
            entity.Property(e => e.NcFltno4)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_4");
            entity.Property(e => e.NcIlNarration1)
                .IsUnicode(false)
                .HasColumnName("NC_IL_NARRATION1");
            entity.Property(e => e.NcMsNarration1)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION1");
            entity.Property(e => e.NcMsNarration2)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION2");
            entity.Property(e => e.NcMsNarration3)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION3");
            entity.Property(e => e.NcMsNarration4)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION4");
            entity.Property(e => e.NcMsNarration5)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION5");
            entity.Property(e => e.NcMsNarration6)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION6");
            entity.Property(e => e.NcPax)
                .IsUnicode(false)
                .HasColumnName("NC_PAX");
            entity.Property(e => e.NcPaxtype)
                .IsUnicode(false)
                .HasColumnName("NC_PAXTYPE");
            entity.Property(e => e.NcPayType)
                .IsUnicode(false)
                .HasColumnName("NC_PAY_TYPE");
            entity.Property(e => e.NcPnrNo)
                .IsUnicode(false)
                .HasColumnName("NC_PNR_NO");
            entity.Property(e => e.NcRefrKey)
                .IsUnicode(false)
                .HasColumnName("NC_REFR_KEY");
            entity.Property(e => e.NcSector)
                .IsUnicode(false)
                .HasColumnName("NC_SECTOR");
            entity.Property(e => e.NcTicketno)
                .IsUnicode(false)
                .HasColumnName("NC_TICKETNO");
            entity.Property(e => e.NcVisaCountry)
                .IsUnicode(false)
                .HasColumnName("NC_VISA_COUNTRY");
            entity.Property(e => e.NcXoNos)
                .IsUnicode(false)
                .HasColumnName("NC_XO_NOS");
            entity.Property(e => e.NcXoRef)
                .IsUnicode(false)
                .HasColumnName("NC_XO_REF");
            entity.Property(e => e.NdIdate)
                .IsUnicode(false)
                .HasColumnName("ND_IDATE");
            entity.Property(e => e.NdJdate)
                .IsUnicode(false)
                .HasColumnName("ND_JDATE");
            entity.Property(e => e.NdTdate)
                .IsUnicode(false)
                .HasColumnName("ND_TDATE");
            entity.Property(e => e.NnBasicFare)
                .IsUnicode(false)
                .HasColumnName("NN_BASIC_FARE");
            entity.Property(e => e.NnBasicTaxes)
                .IsUnicode(false)
                .HasColumnName("NN_BASIC_TAXES");
            entity.Property(e => e.NnBillAmt)
                .IsUnicode(false)
                .HasColumnName("NN_BILL_AMT");
            entity.Property(e => e.NnBrokPaid1)
                .IsUnicode(false)
                .HasColumnName("NN_BROK_PAID1");
            entity.Property(e => e.NnDiscPaidz)
                .IsUnicode(false)
                .HasColumnName("NN_DISC_PAIDZ");
            entity.Property(e => e.NnDiscRecdz)
                .IsUnicode(false)
                .HasColumnName("NN_DISC_RECDZ");
            entity.Property(e => e.NnOnlyrafC)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYRAF_C");
            entity.Property(e => e.NnOnlyrafP)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYRAF_P");
            entity.Property(e => e.NnOnlyxxlC)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYXXL_C");
            entity.Property(e => e.NnOnlyxxlP)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYXXL_P");
            entity.Property(e => e.NnPaxNosA)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_A");
            entity.Property(e => e.NnPaxNosC)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_C");
            entity.Property(e => e.NnPaxNosI)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_I");
            entity.Property(e => e.NnPurchAmt)
                .IsUnicode(false)
                .HasColumnName("NN_PURCH_AMT");
            entity.Property(e => e.NnRafC)
                .IsUnicode(false)
                .HasColumnName("NN_RAF_C");
            entity.Property(e => e.NnRafP)
                .IsUnicode(false)
                .HasColumnName("NN_RAF_P");
            entity.Property(e => e.NnRoeC)
                .IsUnicode(false)
                .HasColumnName("NN_ROE_C");
            entity.Property(e => e.NnRoeS)
                .IsUnicode(false)
                .HasColumnName("NN_ROE_S");
            entity.Property(e => e.NnServTaxp)
                .IsUnicode(false)
                .HasColumnName("NN_SERV_TAXP");
            entity.Property(e => e.NnSrvChrg1c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG1C");
            entity.Property(e => e.NnSrvChrg1p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG1P");
            entity.Property(e => e.NnSrvChrg2c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG2C");
            entity.Property(e => e.NnSrvChrg2p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG2P");
            entity.Property(e => e.NnSrvChrg3c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG3C");
            entity.Property(e => e.NnSrvChrg3p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG3P");
            entity.Property(e => e.NnSrvChrgfc)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRGFC");
            entity.Property(e => e.NnSrvChrgfp)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRGFP");
            entity.Property(e => e.NnTax1)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_1");
            entity.Property(e => e.NnTax2)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_2");
            entity.Property(e => e.NnTax4)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_4");
            entity.Property(e => e.NnTaxAll)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_ALL");
            entity.Property(e => e.NnTaxOt)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_OT");
            entity.Property(e => e.NnTdsB)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_B");
            entity.Property(e => e.NnTdsC)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_C");
            entity.Property(e => e.NnTdsP)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_P");
            entity.Property(e => e.NtFltdt1)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_1");
            entity.Property(e => e.NtFltdt2)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_2");
            entity.Property(e => e.NtFltdt3)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_3");
            entity.Property(e => e.NtFltdt4)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_4");
        });

        modelBuilder.Entity<TblTest1History>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTest1History");

            entity.Property(e => e.HistoryDateTime).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newage).HasColumnName("NEWAge");
            entity.Property(e => e.Oldage).HasColumnName("OLDAge");
            entity.Property(e => e.RollNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.SqluserName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("SQLUserName");
        });

        modelBuilder.Entity<TblTest567>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTest567");

            entity.Property(e => e.EcBcode)
                .IsUnicode(false)
                .HasColumnName("EC_BCODE");
            entity.Property(e => e.EcBillRef)
                .IsUnicode(false)
                .HasColumnName("EC_BILL_REF");
            entity.Property(e => e.EcBname)
                .IsUnicode(false)
                .HasColumnName("EC_BNAME");
            entity.Property(e => e.EcCcode)
                .IsUnicode(false)
                .HasColumnName("EC_CCODE");
            entity.Property(e => e.EcCname)
                .IsUnicode(false)
                .HasColumnName("EC_CNAME");
            entity.Property(e => e.EcEcode)
                .IsUnicode(false)
                .HasColumnName("EC_ECODE");
            entity.Property(e => e.EndDate).IsUnicode(false);
            entity.Property(e => e.StartDate)
                .IsUnicode(false)
                .HasColumnName("startDAte");
        });

        modelBuilder.Entity<TblTest789>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTest789");

            entity.Property(e => e.EcBcode)
                .IsUnicode(false)
                .HasColumnName("EC_BCODE");
            entity.Property(e => e.EcBillRef)
                .IsUnicode(false)
                .HasColumnName("EC_BILL_REF");
            entity.Property(e => e.EcBname)
                .IsUnicode(false)
                .HasColumnName("EC_BNAME");
            entity.Property(e => e.EcCcode)
                .IsUnicode(false)
                .HasColumnName("EC_CCODE");
            entity.Property(e => e.EcCname)
                .IsUnicode(false)
                .HasColumnName("EC_CNAME");
            entity.Property(e => e.EcEcode)
                .IsUnicode(false)
                .HasColumnName("EC_ECODE");
            entity.Property(e => e.EndDate).IsUnicode(false);
            entity.Property(e => e.StartDate)
                .IsUnicode(false)
                .HasColumnName("startDAte");
        });

        modelBuilder.Entity<TblTestDate>(entity =>
        {
            entity.ToTable("tblTestDate");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.TranDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblTestDyn>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTestDYN", "db_owner");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTestEmp>(entity =>
        {
            entity.HasKey(e => e.EmpNum).HasName("PK_tblTestEmp_1");

            entity.ToTable("tblTestEmp");

            entity.Property(e => e.EmpNum)
                .ValueGeneratedNever()
                .HasColumnName("emp_num");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("last_name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("middle_name");
        });

        modelBuilder.Entity<TblTestSql>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTestSQL");

            entity.Property(e => e.TestName)
                .HasMaxLength(50)
                .HasColumnName("testName");
        });

        modelBuilder.Entity<TblTestTrigger>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTestTrigger");

            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblTestTriggerStatusLog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTestTriggerStatusLog");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.StatusNew)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.StatusOld)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<TblTesting>(entity =>
        {
            entity.HasKey(e => e.LogId)
                .HasName("PK__tblTesting__2E3D6E81")
                .IsClustered(false);

            entity.ToTable("tblTesting");

            entity.Property(e => e.LogId)
                .ValueGeneratedNever()
                .HasColumnName("LogID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.Remark).HasColumnType("image");
        });

        modelBuilder.Entity<TblText>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblText");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Text).HasColumnType("text");
        });

        modelBuilder.Entity<TblTexthistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblTexth__4D7B4ADD17E28260");

            entity.ToTable("tblTexthistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewDtext)
                .HasColumnType("text")
                .HasColumnName("NewDText");
            entity.Property(e => e.Oldtext)
                .HasColumnType("text")
                .HasColumnName("OLDText");
        });

        modelBuilder.Entity<TblTicketDetail>(entity =>
        {
            entity.HasKey(e => e.TicketDetId);

            entity.ToTable("tblTicketDetail");

            entity.Property(e => e.TicketDetId)
                .ValueGeneratedNever()
                .HasColumnName("TicketDetID");
            entity.Property(e => e.BedRoll)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength();
            entity.Property(e => e.Berth)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.BerthPref)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BookingStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Coach)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Concession)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.CurrentStatus)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FoodPref)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Gender)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.TicketCancelDetId).HasColumnName("TicketCancelDetID");
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
        });

        modelBuilder.Entity<TblTicketDetailMax>(entity =>
        {
            entity.HasKey(e => e.MaxId);

            entity.ToTable("tblTicketDetailMax");

            entity.Property(e => e.MaxId)
                .ValueGeneratedNever()
                .HasColumnName("MaxID");
        });

        modelBuilder.Entity<TblTicketFlightDetail>(entity =>
        {
            entity.HasKey(e => e.TicketFlightDetId);

            entity.ToTable("tblTicketFlightDetails");

            entity.Property(e => e.TicketFlightDetId)
                .ValueGeneratedNever()
                .HasColumnName("TicketFlightDetID");
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
        });

        modelBuilder.Entity<TblTicketMaster>(entity =>
        {
            entity.HasKey(e => e.TicketId).IsClustered(false);

            entity.ToTable("tblTicketMaster");

            entity.HasIndex(e => e.OperatorTranId, "IX_tblTicketMasterOperatorTranID").IsUnique();

            entity.Property(e => e.TicketId)
                .ValueGeneratedNever()
                .HasColumnName("TicketID");
            entity.Property(e => e.AgentCharges).HasColumnType("money");
            entity.Property(e => e.AssignedServerId).HasColumnName("AssignedServerID");
            entity.Property(e => e.BoardingDate).HasColumnType("datetime");
            entity.Property(e => e.BoardingPointStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BoardingPointStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.BookingDateTime).HasColumnType("datetime");
            entity.Property(e => e.Class)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClsUpgrade)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength();
            entity.Property(e => e.ConfigurationId).HasColumnName("ConfigurationID");
            entity.Property(e => e.CreditDebitInterfacePgtranCharges).HasColumnName("CreditDebitInterfacePGTranCharges");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FareDifference).HasColumnType("money");
            entity.Property(e => e.FromStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.IdproofCarryPassenger).HasColumnName("IDProofCarryPassenger");
            entity.Property(e => e.IdproofIssueAuthority)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDProofIssueAuthority");
            entity.Property(e => e.IdproofNo)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("IDProofNo");
            entity.Property(e => e.IdproofType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDProofType");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.IrctcaccountMasterAmount)
                .HasColumnType("money")
                .HasColumnName("IRCTCAccountMasterAmount");
            entity.Property(e => e.IsPnrstatusUpdated).HasColumnName("IsPNRStatusUpdated");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.OperatorTranId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OperatorTranID");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.Pnrnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PNRNumber");
            entity.Property(e => e.ProcessedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quota)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResUptoStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ResUptoStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleDeparture)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServerIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServerIP");
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.ServiceTax).HasColumnType("money");
            entity.Property(e => e.ServiceTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SessionId)
                .HasMaxLength(19)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SessionID");
            entity.Property(e => e.SlipRouteMsg)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("('')");
            entity.Property(e => e.SpecialRefundAmount).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasComment("RC - Booking Request From Client\r\nPR - Payment Transaction Request at Donecard\r\nPC - Payment Transaction Confirmed at Donecard\r\nPF - Payment Transaction Failed at Donecard\r\nBR - Actual Booking Request at IRCTC\r\nBC - Confirmed Booking Response Came From IRCTC\r\nBF - Failed Booking Response Came From IRCTC\r\nTR - Payment Refunded Fully because of Failed Booking Response Came From IRCTC\r\nTP - Ticket Partially Cancelled\r\nTC - Ticket Fully Cancelled\r\n");
            entity.Property(e => e.TicketNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCancelPgtranCharges)
                .HasColumnType("money")
                .HasColumnName("TotalCancelPGTranCharges");
            entity.Property(e => e.TotalCancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalInterfacePgtranCharges)
                .HasColumnType("money")
                .HasColumnName("TotalInterfacePGTranCharges");
            entity.Property(e => e.TotalIrctcserviceChg)
                .HasColumnType("money")
                .HasColumnName("TotalIRCTCServiceChg");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalServiceCharges).HasColumnType("money");
            entity.Property(e => e.TotalTicketAmount).HasColumnType("money");
            entity.Property(e => e.TrainName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TrainNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TranClientIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TranClientIP");
            entity.Property(e => e.TravelDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TblTicketMasterMax>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTicketMasterMax");

            entity.Property(e => e.MaxId).HasColumnName("MaxID");
        });

        modelBuilder.Entity<TblTicketMasterTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTicketMasterTest");

            entity.Property(e => e.AgentCharges).HasColumnType("money");
            entity.Property(e => e.AssignedServerId).HasColumnName("AssignedServerID");
            entity.Property(e => e.BoardingDate).HasColumnType("datetime");
            entity.Property(e => e.BoardingPointStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.BoardingPointStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.BookingDateTime).HasColumnType("datetime");
            entity.Property(e => e.Class)
                .HasMaxLength(2)
                .IsUnicode(false);
            entity.Property(e => e.ClsUpgrade)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ConfigurationId).HasColumnName("ConfigurationID");
            entity.Property(e => e.CreditDebitInterfacePgtranCharges).HasColumnName("CreditDebitInterfacePGTranCharges");
            entity.Property(e => e.DistributorId).HasColumnName("DistributorID");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FareDifference).HasColumnType("money");
            entity.Property(e => e.FromStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.FromStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.IdproofCarryPassenger).HasColumnName("IDProofCarryPassenger");
            entity.Property(e => e.IdproofIssueAuthority)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDProofIssueAuthority");
            entity.Property(e => e.IdproofNo)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("IDProofNo");
            entity.Property(e => e.IdproofType)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("IDProofType");
            entity.Property(e => e.InterfaceId).HasColumnName("InterfaceID");
            entity.Property(e => e.IrctcaccountMasterAmount)
                .HasColumnType("money")
                .HasColumnName("IRCTCAccountMasterAmount");
            entity.Property(e => e.IsPnrstatusUpdated).HasColumnName("IsPNRStatusUpdated");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(16)
                .IsUnicode(false);
            entity.Property(e => e.OperatorTranId)
                .HasMaxLength(20)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OperatorTranID");
            entity.Property(e => e.Pgid).HasColumnName("PGID");
            entity.Property(e => e.PgtranCharges)
                .HasColumnType("money")
                .HasColumnName("PGTranCharges");
            entity.Property(e => e.Pnrnumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("PNRNumber");
            entity.Property(e => e.ProcessedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Quota)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.RequestDateTime).HasColumnType("datetime");
            entity.Property(e => e.ResUptoStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ResUptoStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.ScheduleDeparture)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ServerIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("ServerIP");
            entity.Property(e => e.ServiceCharges).HasColumnType("money");
            entity.Property(e => e.ServiceTax).HasColumnType("money");
            entity.Property(e => e.ServiceTaxPer).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.SessionId)
                .HasMaxLength(19)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("SessionID");
            entity.Property(e => e.SlipRouteMsg)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.SpecialRefundAmount).HasColumnType("money");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
            entity.Property(e => e.TicketNumber)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ToStationCode)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.ToStationName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TotalAmount).HasColumnType("money");
            entity.Property(e => e.TotalCancelPgtranCharges)
                .HasColumnType("money")
                .HasColumnName("TotalCancelPGTranCharges");
            entity.Property(e => e.TotalCancelRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalInterfacePgtranCharges)
                .HasColumnType("money")
                .HasColumnName("TotalInterfacePGTranCharges");
            entity.Property(e => e.TotalIrctcserviceChg)
                .HasColumnType("money")
                .HasColumnName("TotalIRCTCServiceChg");
            entity.Property(e => e.TotalRefundAmount).HasColumnType("money");
            entity.Property(e => e.TotalServiceCharges).HasColumnType("money");
            entity.Property(e => e.TotalTicketAmount).HasColumnType("money");
            entity.Property(e => e.TrainName)
                .HasMaxLength(60)
                .IsUnicode(false);
            entity.Property(e => e.TrainNo)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.TranClientIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("TranClientIP");
            entity.Property(e => e.TravelDate).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TblTicketPassengerDetail>(entity =>
        {
            entity.HasKey(e => e.TicketPxDetId);

            entity.ToTable("tblTicketPassengerDetails");

            entity.Property(e => e.TicketPxDetId)
                .ValueGeneratedNever()
                .HasColumnName("TicketPxDetID");
            entity.Property(e => e.TicketId).HasColumnName("TicketID");
        });

        modelBuilder.Entity<TblTicketPxFareDetail>(entity =>
        {
            entity.HasKey(e => e.TicketPxFareDetId);

            entity.ToTable("tblTicketPxFareDetails");

            entity.Property(e => e.TicketPxFareDetId)
                .ValueGeneratedNever()
                .HasColumnName("TicketPxFareDetID");
            entity.Property(e => e.TicketFlightDetId).HasColumnName("TicketFlightDetID");
            entity.Property(e => e.TicketPxDetId).HasColumnName("TicketPxDetID");
        });

        modelBuilder.Entity<TblTrainingMe>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TblTrain__3214EC0769BE2702");

            entity.ToTable("TblTrainingMe");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbl_transaction");

            entity.Property(e => e.CBranchCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBranchCode");
            entity.Property(e => e.CBranchName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cBranchName");
            entity.Property(e => e.CCreateBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cCreateBy");
            entity.Property(e => e.CCreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cCreateIP");
            entity.Property(e => e.CUpdateBy)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cUpdateBy");
            entity.Property(e => e.CUpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cUpdateIP");
            entity.Property(e => e.DCreateDate)
                .HasColumnType("datetime")
                .HasColumnName("dCreateDate");
            entity.Property(e => e.DUpdateDate)
                .HasColumnType("datetime")
                .HasColumnName("dUpdateDate");
            entity.Property(e => e.IBranchId).HasColumnName("iBranchID");
        });

        modelBuilder.Entity<TblTransactionAmount>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTransactionAmount");

            entity.Property(e => e.AccountBank)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Amount).HasColumnType("money");
            entity.Property(e => e.BankName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Branch)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PaymentMode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.PendingAmount).HasColumnType("money");
            entity.Property(e => e.ProcessType)
                .HasMaxLength(3)
                .IsUnicode(false);
            entity.Property(e => e.TranAmount).HasColumnType("money");
            entity.Property(e => e.TranAmountId).HasColumnName("TranAmountID");
            entity.Property(e => e.TranDate).HasColumnType("datetime");
            entity.Property(e => e.TranNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblTripPeriodMaster>(entity =>
        {
            entity.HasKey(e => e.TripPeriodId).HasName("PK_tblTripPeriodMaster_TripPeriodID");

            entity.ToTable("tblTripPeriodMaster");

            entity.Property(e => e.TripPeriodId)
                .ValueGeneratedNever()
                .HasColumnName("TripPeriodID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DepartureTime).HasColumnType("datetime");
            entity.Property(e => e.GeneratedDate)
                .HasDefaultValueSql("(((1)/(1))/(1900))")
                .HasColumnType("datetime");
            entity.Property(e => e.GeneratedIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .HasColumnName("GeneratedIP");
            entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            entity.Property(e => e.TripEndDate).HasColumnType("datetime");
            entity.Property(e => e.TripStartDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblTripRegenerationCriterion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblTripRegenerationCriteria");

            entity.Property(e => e.CommandId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.TripRegenerationCriteriaId).HasColumnName("TripRegenerationCriteriaID");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__tblUsers__1788CCAC401882D1");

            entity.ToTable("tblUsers");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.RoleId)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.UserPsw)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblUserAccessLocationMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblUserAccessLocationMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Ualcode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UALCode");
            entity.Property(e => e.Ualdesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("UALDesc");
            entity.Property(e => e.Ualid).HasColumnName("UALID");
            entity.Property(e => e.Ualname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("UALName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblUserAccessTimeMaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblUserAccessTimeMaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Description)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.FromTimeFri).HasColumnType("datetime");
            entity.Property(e => e.FromTimeMon).HasColumnType("datetime");
            entity.Property(e => e.FromTimeSat).HasColumnType("datetime");
            entity.Property(e => e.FromTimeSun).HasColumnType("datetime");
            entity.Property(e => e.FromTimeThu).HasColumnType("datetime");
            entity.Property(e => e.FromTimeTue).HasColumnType("datetime");
            entity.Property(e => e.FromTimeWed).HasColumnType("datetime");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.ToTimeFri).HasColumnType("datetime");
            entity.Property(e => e.ToTimeMon).HasColumnType("datetime");
            entity.Property(e => e.ToTimeSat).HasColumnType("datetime");
            entity.Property(e => e.ToTimeSun).HasColumnType("datetime");
            entity.Property(e => e.ToTimeThu).HasColumnType("datetime");
            entity.Property(e => e.ToTimeTue).HasColumnType("datetime");
            entity.Property(e => e.ToTimeWed).HasColumnType("datetime");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserAccessTimeId).HasColumnName("UserAccessTimeID");
        });

        modelBuilder.Entity<TblUserMaster>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__tblUserM__1788CCACA9BD5640");

            entity.ToTable("tblUserMaster", tb => tb.HasTrigger("trgUserMasterHistory"));

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.CityId).HasColumnName("CityID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Mobile)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserTypeId).HasColumnName("UserTypeID");
        });

        modelBuilder.Entity<TblUserMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblUserM__6B4108E6C9AC06E3");

            entity.ToTable("tblUserMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblUserMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblUserM__4D7B4ADD79AE9CA0");

            entity.ToTable("tblUserMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewcityId).HasColumnName("NEWCityID");
            entity.Property(e => e.Newemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NEWEmail");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.Newmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("NEWMobile");
            entity.Property(e => e.NewuserCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWUserCode");
            entity.Property(e => e.NewuserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("NEWUserName");
            entity.Property(e => e.NewuserTypeId).HasColumnName("NEWUserTypeID");
            entity.Property(e => e.OldcityId).HasColumnName("OLDCityID");
            entity.Property(e => e.Oldemail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("OLDEmail");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.Oldmobile)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("OLDMobile");
            entity.Property(e => e.OlduserCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDUserCode");
            entity.Property(e => e.OlduserName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("OLDUserName");
            entity.Property(e => e.OlduserTypeId).HasColumnName("OLDUserTypeID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TblUserTypeMaster>(entity =>
        {
            entity.HasKey(e => e.UserTypeId).HasName("PK__tblUserT__40D2D8F6D8DF0CC8");

            entity.ToTable("tblUserTypeMaster", tb => tb.HasTrigger("trgUserTypeMasterHistory"));

            entity.Property(e => e.UserTypeId)
                .ValueGeneratedNever()
                .HasColumnName("UserTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblUserTypeMaster1>(entity =>
        {
            entity.HasKey(e => e.UserTypeId).HasName("PK__tblUserT__40D2D8F61B0B8B46");

            entity.ToTable("tblUserTypeMaster1");

            entity.Property(e => e.UserTypeId)
                .ValueGeneratedNever()
                .HasColumnName("UserTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblUserTypeMasterCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblUserT__6B4108E63FD6F5B1");

            entity.ToTable("tblUserTypeMasterCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblUserTypeMasterHistory>(entity =>
        {
            entity.HasKey(e => e.HistoryId).HasName("PK__tblUserT__4D7B4ADD5E8F8FFD");

            entity.ToTable("tblUserTypeMasterHistory");

            entity.Property(e => e.HistoryId)
                .ValueGeneratedNever()
                .HasColumnName("HistoryID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.NewisActive).HasColumnName("NEWIsActive");
            entity.Property(e => e.NewuserTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWUserTypeCode");
            entity.Property(e => e.NewuserTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWUserTypeName");
            entity.Property(e => e.OldisActive).HasColumnName("OLDIsActive");
            entity.Property(e => e.OlduserTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDUserTypeCode");
            entity.Property(e => e.OlduserTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDUserTypeName");
            entity.Property(e => e.UserTypeId).HasColumnName("UserTypeID");
        });

        modelBuilder.Entity<TblUserTypeMasterd1>(entity =>
        {
            entity.HasKey(e => e.UserTypeId).HasName("PK__tblUserT__40D2D8F688180EAA");

            entity.ToTable("tblUserTypeMasterd1");

            entity.Property(e => e.UserTypeId)
                .ValueGeneratedNever()
                .HasColumnName("UserTypeID");
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
            entity.Property(e => e.UserTypeCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UserTypeName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblUsersDocSeriesRight>(entity =>
        {
            entity.HasKey(e => new { e.IntUserId, e.IntDocId });

            entity.ToTable("tblUsersDocSeriesRights");

            entity.Property(e => e.IntUserId).HasColumnName("intUserID");
            entity.Property(e => e.IntDocId).HasColumnName("intDocID");
            entity.Property(e => e.BitIsAllowed).HasColumnName("bitIsAllowed");
            entity.Property(e => e.DtmCreateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCreateDateTime");
            entity.Property(e => e.DtmUpdateDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmUpdateDateTime");
            entity.Property(e => e.IdKey)
                .ValueGeneratedOnAdd()
                .HasColumnName("ID_Key");
            entity.Property(e => e.StrCreateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strCreateID");
            entity.Property(e => e.StrCreateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCreateIPAddress");
            entity.Property(e => e.StrUpdateId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("strUpdateID");
            entity.Property(e => e.StrUpdateIpaddress)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strUpdateIPAddress");
        });

        modelBuilder.Entity<TblVehicleMaster>(entity =>
        {
            entity.HasKey(e => e.VehicleId).HasName("PK__tblVehic__476B54B244214D23");

            entity.ToTable("tblVehicleMaster");

            entity.Property(e => e.VehicleId)
                .ValueGeneratedNever()
                .HasColumnName("VehicleID");
            entity.Property(e => e.PlateId)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("PlateID");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblVehicleMasterDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblVehicleMasterDetail");

            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.ModelName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleDetailId).HasColumnName("vehicleDetailID");
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TblVendor>(entity =>
        {
            entity.HasKey(e => e.VendorId).HasName("PK__tblVendo__FC8618D3C273970A");

            entity.ToTable("tblVendor");

            entity.Property(e => e.VendorId)
                .ValueGeneratedNever()
                .HasColumnName("VendorID");
            entity.Property(e => e.VendorName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TblWsdata2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblWSData2");

            entity.Property(e => e.Address1)
                .HasMaxLength(255)
                .HasColumnName(" Address 1*");
            entity.Property(e => e.Address2)
                .HasMaxLength(255)
                .HasColumnName("Address 2");
            entity.Property(e => e.BpCode)
                .HasMaxLength(255)
                .HasColumnName("BP CODE");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName(" City*");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasColumnName("Company NAME*");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("Country*");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("Email*");
            entity.Property(e => e.F9).HasMaxLength(255);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(255)
                .HasColumnName("Fax No#");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasColumnName("First Name*");
            entity.Property(e => e.MerchantIdLoginId)
                .HasMaxLength(255)
                .HasColumnName("Merchant Id/Login Id*");
            entity.Property(e => e.MobileNumber).HasColumnName("Mobile Number*");
            entity.Property(e => e.MobileNumber1).HasColumnName("Mobile Number*1");
            entity.Property(e => e.OssCode)
                .HasMaxLength(255)
                .HasColumnName("OSS Code");
            entity.Property(e => e.OtherContactNo)
                .HasMaxLength(255)
                .HasColumnName("Other Contact No#");
            entity.Property(e => e.PinCode).HasColumnName("Pin Code*");
            entity.Property(e => e.RtoCode)
                .HasMaxLength(255)
                .HasColumnName("RTO CODE");
            entity.Property(e => e.SrNo).HasColumnName("Sr# No#");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName(" State*");
        });

        modelBuilder.Entity<TblWsdataLive>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblWSDataLive");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(255)
                .HasColumnName("BPCode");
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNo).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.MerchantId).HasMaxLength(255);
            entity.Property(e => e.Osscode)
                .HasMaxLength(255)
                .HasColumnName("OSSCode");
            entity.Property(e => e.OtherContactNo).HasMaxLength(255);
            entity.Property(e => e.Rtocode)
                .HasMaxLength(255)
                .HasColumnName("RTOCode");
            entity.Property(e => e.State).HasMaxLength(255);
        });

        modelBuilder.Entity<TblWsdataTest>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblWSDataTest");

            entity.Property(e => e.Address1).HasMaxLength(255);
            entity.Property(e => e.Address2).HasMaxLength(255);
            entity.Property(e => e.Bpcode)
                .HasMaxLength(255)
                .HasColumnName("BPCode");
            entity.Property(e => e.City).HasMaxLength(255);
            entity.Property(e => e.CompanyName).HasMaxLength(255);
            entity.Property(e => e.Country).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FaxNo).HasMaxLength(255);
            entity.Property(e => e.FirstName).HasMaxLength(255);
            entity.Property(e => e.MerchantId).HasMaxLength(255);
            entity.Property(e => e.Osscode)
                .HasMaxLength(255)
                .HasColumnName("OSSCode");
            entity.Property(e => e.OtherContactNo).HasMaxLength(255);
            entity.Property(e => e.Rtocode)
                .HasMaxLength(255)
                .HasColumnName("RTOCode");
            entity.Property(e => e.State).HasMaxLength(255);
        });

        modelBuilder.Entity<TblWsjayesh>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblWSJayesh");

            entity.Property(e => e.Address1)
                .HasMaxLength(255)
                .HasColumnName(" Address 1*");
            entity.Property(e => e.Address2)
                .HasMaxLength(255)
                .HasColumnName("Address 2");
            entity.Property(e => e.BpCode)
                .HasMaxLength(255)
                .HasColumnName("BP CODE");
            entity.Property(e => e.City)
                .HasMaxLength(255)
                .HasColumnName(" City*");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(255)
                .HasColumnName("Company NAME*");
            entity.Property(e => e.Country)
                .HasMaxLength(255)
                .HasColumnName("Country*");
            entity.Property(e => e.Email)
                .HasMaxLength(255)
                .HasColumnName("Email*");
            entity.Property(e => e.F9).HasMaxLength(255);
            entity.Property(e => e.FaxNo)
                .HasMaxLength(255)
                .HasColumnName("Fax No#");
            entity.Property(e => e.FirstName)
                .HasMaxLength(255)
                .HasColumnName("First Name*");
            entity.Property(e => e.MerchantIdLoginId)
                .HasMaxLength(255)
                .HasColumnName("Merchant Id/Login Id*");
            entity.Property(e => e.MobileNumber).HasColumnName("Mobile Number*");
            entity.Property(e => e.MobileNumber1).HasColumnName("Mobile Number*1");
            entity.Property(e => e.OssCode)
                .HasMaxLength(255)
                .HasColumnName("OSS Code");
            entity.Property(e => e.OtherContactNo)
                .HasMaxLength(255)
                .HasColumnName("Other Contact No#");
            entity.Property(e => e.PinCode).HasColumnName("Pin Code*");
            entity.Property(e => e.RtoCode)
                .HasMaxLength(255)
                .HasColumnName("RTO CODE");
            entity.Property(e => e.SrNo).HasColumnName("Sr# No#");
            entity.Property(e => e.State)
                .HasMaxLength(255)
                .HasColumnName(" State*");
        });

        modelBuilder.Entity<TblWsjayeshCommand>(entity =>
        {
            entity.HasKey(e => e.CommandId);

            entity.ToTable("tblWSJayeshCommands");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<TblauthorMasterCommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblauthorMaster_Commands");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tblbranch>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblbranch");

            entity.Property(e => e.CBranchCode)
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("cBranchCode");
            entity.Property(e => e.CBranchName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("cBranchName");
            entity.Property(e => e.IBranchId).HasColumnName("iBranchID");
        });

        modelBuilder.Entity<TblcommandEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblcommand_emp");

            entity.Property(e => e.Commanddesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("commanddesc");
            entity.Property(e => e.Commandid).HasColumnName("commandid");
            entity.Property(e => e.Commandproc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("commandproc");
            entity.Property(e => e.Commandtype)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("commandtype");
        });

        modelBuilder.Entity<Tblcrudnetcore>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tblcrudn__3214EC2755D18902");

            entity.ToTable("tblcrudnetcore");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CreatedOn).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsActive).HasColumnName("IsACTIVE");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tbldepartment>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbldepartment", "db_owner");

            entity.Property(e => e.Departmentname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("departmentname");
            entity.Property(e => e.Deptid)
                .IsUnicode(false)
                .HasColumnName("deptid");
            entity.Property(e => e.Status)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("status");
        });

        modelBuilder.Entity<Tbldepartment1>(entity =>
        {
            entity.HasKey(e => e.Deptid);

            entity.ToTable("tbldepartment");

            entity.Property(e => e.Deptid)
                .ValueGeneratedNever()
                .HasColumnName("deptid");
            entity.Property(e => e.Deptname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deptname");
        });

        modelBuilder.Entity<Tbldeptmaster11>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbldeptmaster11", "db_owner");

            entity.Property(e => e.Departmentname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("departmentname");
            entity.Property(e => e.Deptid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deptid");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");
        });

        modelBuilder.Entity<TblebusTransaction>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblebus_transaction");

            entity.Property(e => e.BusNo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("bus_no");
            entity.Property(e => e.BusStops)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("bus_stops");
            entity.Property(e => e.BusTransDate)
                .HasColumnType("datetime")
                .HasColumnName("bus_trans_date");
            entity.Property(e => e.TarnsId).HasColumnName("tarns_id");
            entity.Property(e => e.TarvelDate)
                .HasColumnType("datetime")
                .HasColumnName("tarvel_date");
            entity.Property(e => e.TicketAmt)
                .HasColumnType("money")
                .HasColumnName("ticket_amt");
        });

        modelBuilder.Entity<Tbleempmaster1>(entity =>
        {
            entity.HasKey(e => e.EmpId).HasName("PK__tbleempm__AFB3EC6D1F4B3386");

            entity.ToTable("tbleempmaster1");

            entity.Property(e => e.EmpId)
                .ValueGeneratedNever()
                .HasColumnName("empID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.EmpCode).HasColumnName("empCode");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empName");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tblektum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblekta");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<Tblemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblemp", "db_owner");

            entity.Property(e => e.Active)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("active");
            entity.Property(e => e.Deptid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("deptid");
            entity.Property(e => e.Dob)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("dob");
            entity.Property(e => e.Empid)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empid");
            entity.Property(e => e.Empname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("empname");
            entity.Property(e => e.Gender)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.Mobileno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mobileno");
        });

        modelBuilder.Entity<Tblemployee>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblemployee");

            entity.Property(e => e.Deptid).HasColumnName("deptid");
            entity.Property(e => e.Empid).HasColumnName("empid");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ename");
            entity.Property(e => e.Managerid).HasColumnName("managerid");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("phoneno");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
        });

        modelBuilder.Entity<Tblemployee1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblemployees");

            entity.Property(e => e.Deptid).HasColumnName("deptid");
            entity.Property(e => e.Empid).HasColumnName("empid");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ename");
            entity.Property(e => e.Managerid).HasColumnName("managerid");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("phoneno");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
        });

        modelBuilder.Entity<Tblempmaster1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblempmaster1", "db_owner");

            entity.Property(e => e.Deptid).HasColumnName("deptid");
            entity.Property(e => e.Empid).HasColumnName("empid");
            entity.Property(e => e.Empname)
                .HasMaxLength(100)
                .HasColumnName("empname");
            entity.Property(e => e.Salary)
                .HasColumnType("money")
                .HasColumnName("salary");
        });

        modelBuilder.Entity<TblhistoryEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblhistory_emp");

            entity.Property(e => e.Commandid).HasColumnName("commandid");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.HistoryBy).HasMaxLength(50);
            entity.Property(e => e.HistoryId)
                .ValueGeneratedOnAdd()
                .HasColumnName("historyID");
            entity.Property(e => e.HistoryOn).HasColumnType("datetime");
            entity.Property(e => e.NewbirthDate)
                .HasColumnType("date")
                .HasColumnName("NEWBirthDate");
            entity.Property(e => e.NewfirstName)
                .HasMaxLength(50)
                .HasColumnName("NEWFirstName");
            entity.Property(e => e.NewlastName)
                .HasMaxLength(50)
                .HasColumnName("NEWLastName");
            entity.Property(e => e.OldbirthDate)
                .HasColumnType("date")
                .HasColumnName("OLDBirthDate");
            entity.Property(e => e.OldfirstName)
                .HasMaxLength(50)
                .HasColumnName("OLDFirstName");
            entity.Property(e => e.OldlastName)
                .HasMaxLength(50)
                .HasColumnName("OLDLastName");
            entity.Property(e => e.Operation).HasMaxLength(50);
        });

        modelBuilder.Entity<Tblmaster>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblmaster");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.DeptId).HasColumnName("DeptID");
            entity.Property(e => e.EmpCode)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.EmpName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<TblmasterEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblmaster_emp", tb => tb.HasTrigger("trg_master"));

            entity.Property(e => e.BirthDate).HasColumnType("date");
            entity.Property(e => e.Commandid).HasColumnName("commandid");
            entity.Property(e => e.Createby)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("createby");
            entity.Property(e => e.Createdate)
                .HasColumnType("date")
                .HasColumnName("createdate");
            entity.Property(e => e.EmpId).HasColumnName("EmpID");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Isactive).HasColumnName("isactive");
            entity.Property(e => e.LastName).HasMaxLength(50);
        });

        modelBuilder.Entity<TblmasterEmp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblmasterEmp", tb => tb.HasTrigger("trgEmployeeAudit"));

            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
        });

        modelBuilder.Entity<TblmasterEmplog>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblmasterEmplog");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.LastName).HasMaxLength(50);
            entity.Property(e => e.LogId)
                .ValueGeneratedOnAdd()
                .HasColumnName("logID");
            entity.Property(e => e.UpdatedBy).HasMaxLength(50);
            entity.Property(e => e.UpdatedOn).HasColumnType("datetime");
        });

        modelBuilder.Entity<Tblmerchantmastercommand>(entity =>
        {
            entity.HasKey(e => e.CommandId).HasName("PK__tblmerch__6B4108E68E7E6494");

            entity.ToTable("tblmerchantmastercommands");

            entity.Property(e => e.CommandId)
                .ValueGeneratedNever()
                .HasColumnName("CommandID");
            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tblre>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblres");

            entity.Property(e => e.Emp).HasColumnName("emp");
        });

        modelBuilder.Entity<TblspErrMgmt>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblspErrMgmt");

            entity.Property(e => e.Spname)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<Tblstudcommand>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblstudcommand");

            entity.Property(e => e.CommandDesc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CommandProc)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.CommandType)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<Tblstudentmasterhistorye>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblstudentmasterhistorye");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newcityid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWcityid");
            entity.Property(e => e.NewisActive).HasColumnName("NEWisActive");
            entity.Property(e => e.Newstudname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWstudname");
            entity.Property(e => e.Oldcityid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("oldcityid");
            entity.Property(e => e.OldisActive).HasColumnName("oldisActive");
            entity.Property(e => e.Oldstudname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("oldstudname");
            entity.Property(e => e.StudId).HasColumnName("StudID");
        });

        modelBuilder.Entity<Tblstudmastere>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblstudmastere");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.StudId).HasColumnName("StudID");
            entity.Property(e => e.Studcity)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Studname)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<Tblstudmasterhistorye>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tblstudmasterhistorye");

            entity.Property(e => e.CommandId).HasColumnName("CommandID");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newcityid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("NEWcityid");
            entity.Property(e => e.NewisActive).HasColumnName("NEWisActive");
            entity.Property(e => e.Newstudcode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("NEWstudcode");
            entity.Property(e => e.Newstudname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWstudname");
            entity.Property(e => e.Oldcityid)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("oldcityid");
            entity.Property(e => e.OldisActive).HasColumnName("oldisActive");
            entity.Property(e => e.Oldstudcode)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("oldstudcode");
            entity.Property(e => e.Oldstudname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("oldstudname");
            entity.Property(e => e.StudId).HasColumnName("StudID");
        });

        modelBuilder.Entity<TbltblRdsaccountSyncFileDetail>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbltblRDSAccountSyncFileDetail");

            entity.Property(e => e.Column1).IsUnicode(false);
            entity.Property(e => e.EcAcode)
                .IsUnicode(false)
                .HasColumnName("EC_ACODE");
            entity.Property(e => e.EcAname)
                .IsUnicode(false)
                .HasColumnName("EC_ANAME");
            entity.Property(e => e.EcBcode)
                .IsUnicode(false)
                .HasColumnName("EC_BCODE");
            entity.Property(e => e.EcBillRef)
                .IsUnicode(false)
                .HasColumnName("EC_BILL_REF");
            entity.Property(e => e.EcBname)
                .IsUnicode(false)
                .HasColumnName("EC_BNAME");
            entity.Property(e => e.EcCcode)
                .IsUnicode(false)
                .HasColumnName("EC_CCODE");
            entity.Property(e => e.EcCname)
                .IsUnicode(false)
                .HasColumnName("EC_CNAME");
            entity.Property(e => e.EcEcode)
                .IsUnicode(false)
                .HasColumnName("EC_ECODE");
            entity.Property(e => e.EcEname)
                .IsUnicode(false)
                .HasColumnName("EC_ENAME");
            entity.Property(e => e.EcIlRef)
                .IsUnicode(false)
                .HasColumnName("EC_IL_REF");
            entity.Property(e => e.EcSbankname)
                .IsUnicode(false)
                .HasColumnName("EC_SBANKNAME");
            entity.Property(e => e.EcScode)
                .IsUnicode(false)
                .HasColumnName("EC_SCODE");
            entity.Property(e => e.EcScodeC)
                .IsUnicode(false)
                .HasColumnName("EC_SCODE_C");
            entity.Property(e => e.EcSname)
                .IsUnicode(false)
                .HasColumnName("EC_SNAME");
            entity.Property(e => e.NcBookClass)
                .IsUnicode(false)
                .HasColumnName("NC_BOOK_CLASS");
            entity.Property(e => e.NcCosname)
                .IsUnicode(false)
                .HasColumnName("NC_COSNAME");
            entity.Property(e => e.NcCrs)
                .IsUnicode(false)
                .HasColumnName("NC_CRS");
            entity.Property(e => e.NcCurrc)
                .IsUnicode(false)
                .HasColumnName("NC_CURRC");
            entity.Property(e => e.NcCurrs)
                .IsUnicode(false)
                .HasColumnName("NC_CURRS");
            entity.Property(e => e.NcDealCode)
                .IsUnicode(false)
                .HasColumnName("NC_DEAL_CODE");
            entity.Property(e => e.NcFareBasis)
                .IsUnicode(false)
                .HasColumnName("NC_FARE_BASIS");
            entity.Property(e => e.NcFltcl1)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_1");
            entity.Property(e => e.NcFltcl2)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_2");
            entity.Property(e => e.NcFltcl3)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_3");
            entity.Property(e => e.NcFltcl4)
                .IsUnicode(false)
                .HasColumnName("NC_FLTCL_4");
            entity.Property(e => e.NcFltno1)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_1");
            entity.Property(e => e.NcFltno2)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_2");
            entity.Property(e => e.NcFltno3)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_3");
            entity.Property(e => e.NcFltno4)
                .IsUnicode(false)
                .HasColumnName("NC_FLTNO_4");
            entity.Property(e => e.NcIlNarration1)
                .IsUnicode(false)
                .HasColumnName("NC_IL_NARRATION1");
            entity.Property(e => e.NcMsNarration1)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION1");
            entity.Property(e => e.NcMsNarration2)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION2");
            entity.Property(e => e.NcMsNarration3)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION3");
            entity.Property(e => e.NcMsNarration4)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION4");
            entity.Property(e => e.NcMsNarration5)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION5");
            entity.Property(e => e.NcMsNarration6)
                .IsUnicode(false)
                .HasColumnName("NC_MS_NARRATION6");
            entity.Property(e => e.NcPax)
                .IsUnicode(false)
                .HasColumnName("NC_PAX");
            entity.Property(e => e.NcPaxtype)
                .IsUnicode(false)
                .HasColumnName("NC_PAXTYPE");
            entity.Property(e => e.NcPayType)
                .IsUnicode(false)
                .HasColumnName("NC_PAY_TYPE");
            entity.Property(e => e.NcPnrNo)
                .IsUnicode(false)
                .HasColumnName("NC_PNR_NO");
            entity.Property(e => e.NcRefrKey)
                .IsUnicode(false)
                .HasColumnName("NC_REFR_KEY");
            entity.Property(e => e.NcSector)
                .IsUnicode(false)
                .HasColumnName("NC_SECTOR");
            entity.Property(e => e.NcTicketno)
                .IsUnicode(false)
                .HasColumnName("NC_TICKETNO");
            entity.Property(e => e.NcVisaCountry)
                .IsUnicode(false)
                .HasColumnName("NC_VISA_COUNTRY");
            entity.Property(e => e.NcXoNos)
                .IsUnicode(false)
                .HasColumnName("NC_XO_NOS");
            entity.Property(e => e.NcXoRef)
                .IsUnicode(false)
                .HasColumnName("NC_XO_REF");
            entity.Property(e => e.NdIdate)
                .IsUnicode(false)
                .HasColumnName("ND_IDATE");
            entity.Property(e => e.NdJdate)
                .IsUnicode(false)
                .HasColumnName("ND_JDATE");
            entity.Property(e => e.NdTdate)
                .IsUnicode(false)
                .HasColumnName("ND_TDATE");
            entity.Property(e => e.NnBasicFare)
                .IsUnicode(false)
                .HasColumnName("NN_BASIC_FARE");
            entity.Property(e => e.NnBasicTaxes)
                .IsUnicode(false)
                .HasColumnName("NN_BASIC_TAXES");
            entity.Property(e => e.NnBillAmt)
                .IsUnicode(false)
                .HasColumnName("NN_BILL_AMT");
            entity.Property(e => e.NnBrokPaid1)
                .IsUnicode(false)
                .HasColumnName("NN_BROK_PAID1");
            entity.Property(e => e.NnDiscPaidz)
                .IsUnicode(false)
                .HasColumnName("NN_DISC_PAIDZ");
            entity.Property(e => e.NnDiscRecdz)
                .IsUnicode(false)
                .HasColumnName("NN_DISC_RECDZ");
            entity.Property(e => e.NnOnlyrafC)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYRAF_C");
            entity.Property(e => e.NnOnlyrafP)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYRAF_P");
            entity.Property(e => e.NnOnlyxxlC)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYXXL_C");
            entity.Property(e => e.NnOnlyxxlP)
                .IsUnicode(false)
                .HasColumnName("NN_ONLYXXL_P");
            entity.Property(e => e.NnPaxNosA)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_A");
            entity.Property(e => e.NnPaxNosC)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_C");
            entity.Property(e => e.NnPaxNosI)
                .IsUnicode(false)
                .HasColumnName("NN_PAX_NOS_I");
            entity.Property(e => e.NnPurchAmt)
                .IsUnicode(false)
                .HasColumnName("NN_PURCH_AMT");
            entity.Property(e => e.NnRafC)
                .IsUnicode(false)
                .HasColumnName("NN_RAF_C");
            entity.Property(e => e.NnRafP)
                .IsUnicode(false)
                .HasColumnName("NN_RAF_P");
            entity.Property(e => e.NnRoeC)
                .IsUnicode(false)
                .HasColumnName("NN_ROE_C");
            entity.Property(e => e.NnRoeS)
                .IsUnicode(false)
                .HasColumnName("NN_ROE_S");
            entity.Property(e => e.NnServTaxp)
                .IsUnicode(false)
                .HasColumnName("NN_SERV_TAXP");
            entity.Property(e => e.NnSrvChrg1c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG1C");
            entity.Property(e => e.NnSrvChrg1p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG1P");
            entity.Property(e => e.NnSrvChrg2c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG2C");
            entity.Property(e => e.NnSrvChrg2p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG2P");
            entity.Property(e => e.NnSrvChrg3c)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG3C");
            entity.Property(e => e.NnSrvChrg3p)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRG3P");
            entity.Property(e => e.NnSrvChrgfc)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRGFC");
            entity.Property(e => e.NnSrvChrgfp)
                .IsUnicode(false)
                .HasColumnName("NN_SRV_CHRGFP");
            entity.Property(e => e.NnTax1)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_1");
            entity.Property(e => e.NnTax2)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_2");
            entity.Property(e => e.NnTax4)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_4");
            entity.Property(e => e.NnTaxAll)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_ALL");
            entity.Property(e => e.NnTaxOt)
                .IsUnicode(false)
                .HasColumnName("NN_TAX_OT");
            entity.Property(e => e.NnTdsB)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_B");
            entity.Property(e => e.NnTdsC)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_C");
            entity.Property(e => e.NnTdsP)
                .IsUnicode(false)
                .HasColumnName("NN_TDS_P");
            entity.Property(e => e.NtFltdt1)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_1");
            entity.Property(e => e.NtFltdt2)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_2");
            entity.Property(e => e.NtFltdt3)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_3");
            entity.Property(e => e.NtFltdt4)
                .IsUnicode(false)
                .HasColumnName("NT_FLTDT_4");
        });

        modelBuilder.Entity<Tbltempemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbltempemp");

            entity.Property(e => e.Certs)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
        });

        modelBuilder.Entity<Tbltraining>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__tbltrain__3213E83F2CF50FE4");

            entity.ToTable("tbltraining");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Mobileno)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("mobileno");
            entity.Property(e => e.Name)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("name");
        });

        modelBuilder.Entity<Tbluserdatum>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tbluserdata");

            entity.Property(e => e.Uid).HasColumnName("uid");
            entity.Property(e => e.Uname)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("UName");
            entity.Property(e => e.Upass)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Temp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temp");

            entity.Property(e => e.Result)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("result");
        });

        modelBuilder.Entity<Temp1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Temp1");

            entity.Property(e => e.EmpName)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Salery).HasColumnType("money");
        });

        modelBuilder.Entity<TempAtsr>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TempATSR");

            entity.Property(e => e.AccountInformation).HasMaxLength(255);
            entity.Property(e => e.AirlineCode).HasMaxLength(255);
            entity.Property(e => e.AirlinePnrno)
                .HasMaxLength(255)
                .HasColumnName("AirlinePNRNo");
            entity.Property(e => e.AmadeusPnr)
                .HasMaxLength(255)
                .HasColumnName("AmadeusPNR");
            entity.Property(e => e.ArrivalDateTime).HasMaxLength(255);
            entity.Property(e => e.BaseFare).HasMaxLength(255);
            entity.Property(e => e.BaseFareRefund).HasMaxLength(255);
            entity.Property(e => e.BaseFareUsed).HasMaxLength(255);
            entity.Property(e => e.BookingClass).HasMaxLength(255);
            entity.Property(e => e.CancellationAmt).HasMaxLength(255);
            entity.Property(e => e.CancellationDate).HasMaxLength(255);
            entity.Property(e => e.CancellationPercentage).HasMaxLength(255);
            entity.Property(e => e.CardNumber).HasMaxLength(255);
            entity.Property(e => e.Code)
                .HasMaxLength(255)
                .HasColumnName("CODE");
            entity.Property(e => e.Commission).HasMaxLength(255);
            entity.Property(e => e.CommissionPercentage).HasMaxLength(255);
            entity.Property(e => e.ConjunctionTickets).HasMaxLength(255);
            entity.Property(e => e.CreationDateTime).HasMaxLength(255);
            entity.Property(e => e.CreatorIataid)
                .HasMaxLength(255)
                .HasColumnName("CreatorIATAID");
            entity.Property(e => e.CreatorOfficeId)
                .HasMaxLength(255)
                .HasColumnName("CreatorOfficeID");
            entity.Property(e => e.CreatorSignIn).HasMaxLength(255);
            entity.Property(e => e.Cucom)
                .HasMaxLength(255)
                .HasColumnName("CUCOM");
            entity.Property(e => e.Cuplb)
                .HasMaxLength(255)
                .HasColumnName("CUPLB");
            entity.Property(e => e.DateOfIssue).HasMaxLength(255);
            entity.Property(e => e.DateOfRefund).HasMaxLength(255);
            entity.Property(e => e.DepartureDateTime).HasMaxLength(255);
            entity.Property(e => e.EquivalentFare).HasMaxLength(255);
            entity.Property(e => e.EquivalentFareCurreny).HasMaxLength(255);
            entity.Property(e => e.FareBasis).HasMaxLength(255);
            entity.Property(e => e.FareCalculation).HasMaxLength(255);
            entity.Property(e => e.Fee).HasMaxLength(255);
            entity.Property(e => e.FlightNumber).HasMaxLength(255);
            entity.Property(e => e.FormOfPayment).HasMaxLength(255);
            entity.Property(e => e.IsCnj)
                .HasMaxLength(255)
                .HasColumnName("IsCNJ");
            entity.Property(e => e.LastTransactionDate).HasMaxLength(255);
            entity.Property(e => e.NetRemit).HasMaxLength(255);
            entity.Property(e => e.NotValidAfter).HasMaxLength(255);
            entity.Property(e => e.NotValidBefore).HasMaxLength(255);
            entity.Property(e => e.PassengerName).HasMaxLength(255);
            entity.Property(e => e.RefundAmount).HasMaxLength(255);
            entity.Property(e => e.RefundCommissionAmt).HasMaxLength(255);
            entity.Property(e => e.RefundOfficeId).HasMaxLength(255);
            entity.Property(e => e.RefundSignIn).HasMaxLength(255);
            entity.Property(e => e.RefundTotalTax).HasMaxLength(255);
            entity.Property(e => e.ReissueFo)
                .HasMaxLength(255)
                .HasColumnName("ReissueFO");
            entity.Property(e => e.Rmremark1)
                .HasMaxLength(255)
                .HasColumnName("RMRemark1");
            entity.Property(e => e.Rmremark2)
                .HasMaxLength(255)
                .HasColumnName("RMRemark2");
            entity.Property(e => e.Rmremark3)
                .HasMaxLength(255)
                .HasColumnName("RMRemark3");
            entity.Property(e => e.Rmremark4)
                .HasMaxLength(255)
                .HasColumnName("RMRemark4");
            entity.Property(e => e.Rmremark5)
                .HasMaxLength(255)
                .HasColumnName("RMRemark5");
            entity.Property(e => e.Rmremark6)
                .HasMaxLength(255)
                .HasColumnName("RMRemark6");
            entity.Property(e => e.Rmremark7)
                .HasMaxLength(255)
                .HasColumnName("RMRemark7");
            entity.Property(e => e.Sacnumber)
                .HasMaxLength(255)
                .HasColumnName("SACNumber");
            entity.Property(e => e.Sectors).HasMaxLength(255);
            entity.Property(e => e.Spcom)
                .HasMaxLength(255)
                .HasColumnName("SPCOM");
            entity.Property(e => e.Spplb)
                .HasMaxLength(255)
                .HasColumnName("SPPLB");
            entity.Property(e => e.SrNo).HasMaxLength(255);
            entity.Property(e => e.StopOverIndicator).HasMaxLength(255);
            entity.Property(e => e.TaxAmt1).HasMaxLength(255);
            entity.Property(e => e.TaxAmt2).HasMaxLength(255);
            entity.Property(e => e.TaxAmt3).HasMaxLength(255);
            entity.Property(e => e.TaxAmt4).HasMaxLength(255);
            entity.Property(e => e.TaxAmt5).HasMaxLength(255);
            entity.Property(e => e.TaxType1).HasMaxLength(255);
            entity.Property(e => e.TaxType2).HasMaxLength(255);
            entity.Property(e => e.TaxType3).HasMaxLength(255);
            entity.Property(e => e.TaxType4).HasMaxLength(255);
            entity.Property(e => e.TaxType5).HasMaxLength(255);
            entity.Property(e => e.TicketIataid)
                .HasMaxLength(255)
                .HasColumnName("TicketIATAID");
            entity.Property(e => e.TicketNumber).HasMaxLength(255);
            entity.Property(e => e.TicketSignIn).HasMaxLength(255);
            entity.Property(e => e.TicketedOfficeId).HasMaxLength(255);
            entity.Property(e => e.TotalAmount).HasMaxLength(255);
            entity.Property(e => e.TotalTax).HasMaxLength(255);
            entity.Property(e => e.TourCode).HasMaxLength(255);
            entity.Property(e => e.TransactionStatus).HasMaxLength(255);
            entity.Property(e => e.TypeOfTicket).HasMaxLength(255);
            entity.Property(e => e.Weekdays).HasMaxLength(255);
        });

        modelBuilder.Entity<Temptable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("temptable");

            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("ID");
            entity.Property(e => e.Title)
                .HasMaxLength(10)
                .IsFixedLength();
        });

        modelBuilder.Entity<Temptest>(entity =>
        {
            entity.HasKey(e => e.RowNumber).HasName("PK__temptest__AAAC09D84C564A9F");

            entity.ToTable("temptest");

            entity.Property(e => e.ApplicationName).HasMaxLength(128);
            entity.Property(e => e.Cpu).HasColumnName("CPU");
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.HostName).HasMaxLength(128);
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NtuserName)
                .HasMaxLength(128)
                .HasColumnName("NTUserName");
            entity.Property(e => e.ObjectName).HasMaxLength(128);
            entity.Property(e => e.Rowguid).HasColumnName("rowguid");
            entity.Property(e => e.Spid).HasColumnName("SPID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TextData).HasColumnType("ntext");
        });

        modelBuilder.Entity<Test>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TEST");

            entity.Property(e => e.I).HasColumnName("i");
            entity.Property(e => e.X)
                .HasColumnType("xml")
                .HasColumnName("x");
        });

        modelBuilder.Entity<Test1>(entity =>
        {
            entity.HasKey(e => e.SrNo);

            entity.ToTable("test1");

            entity.Property(e => e.SrNo).ValueGeneratedNever();
            entity.Property(e => e.DtDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtDateTime");
        });

        modelBuilder.Entity<Test10>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test10");

            entity.Property(e => e.Mypassword)
                .HasMaxLength(128)
                .HasColumnName("mypassword");
        });

        modelBuilder.Entity<Test100>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test100");

            entity.Property(e => e.String)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("string");
        });

        modelBuilder.Entity<Test11>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test11");

            entity.Property(e => e.IntuserId).HasColumnName("intuserID");
        });

        modelBuilder.Entity<Test123>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Test123");

            entity.Property(e => e.Amt).HasColumnType("money");
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.NewDt)
                .HasDefaultValueSql("('')")
                .HasColumnType("datetime")
                .HasColumnName("New_Dt");
            entity.Property(e => e.NewNo).HasColumnName("New_No");
        });

        modelBuilder.Entity<Test2>(entity =>
        {
            entity.HasKey(e => e.SrNo);

            entity.ToTable("test2");

            entity.Property(e => e.SrNo).ValueGeneratedNever();
            entity.Property(e => e.DtDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtDateTime");
        });

        modelBuilder.Entity<Test22>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test22");

            entity.Property(e => e.IntuserId).HasColumnName("intuserID");
        });

        modelBuilder.Entity<TestDepartmentMaster>(entity =>
        {
            entity.HasKey(e => e.DeptId);

            entity.ToTable("testDepartmentMaster", "db_owner");

            entity.Property(e => e.DeptId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DeptID");
            entity.Property(e => e.DeptName)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TestEmp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TestEmp");

            entity.Property(e => e.EmpNum).HasColumnName("emp_num");
            entity.Property(e => e.FirstName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasDefaultValueSql("('')")
                .IsFixedLength()
                .HasColumnName("last_name");
            entity.Property(e => e.MiddleName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("middle_name");
        });

        modelBuilder.Entity<TestEmployeeMaster>(entity =>
        {
            entity.HasKey(e => e.EmpId);

            entity.ToTable("testEmployeeMaster", "db_owner");

            entity.Property(e => e.EmpId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("EmpID");
            entity.Property(e => e.DeptId)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("DeptID");
            entity.Property(e => e.DeptName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Dob)
                .HasColumnType("date")
                .HasColumnName("DOB");
            entity.Property(e => e.EmpName)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.MobileNo)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TestImage>(entity =>
        {
            entity.HasKey(e => e.ImgId).HasName("PK__Test_Ima__05B3F7FB5026DB83");

            entity.ToTable("Test_Image");

            entity.Property(e => e.ImgId)
                .ValueGeneratedNever()
                .HasColumnName("Img_ID");
            entity.Property(e => e.ImgImage)
                .HasColumnType("image")
                .HasColumnName("Img_Image");
        });

        modelBuilder.Entity<TestProfiler>(entity =>
        {
            entity.HasKey(e => e.RowNumber).HasName("PK__testProf__AAAC09D8642DD430");

            entity.ToTable("testProfiler");

            entity.Property(e => e.ApplicationName).HasMaxLength(128);
            entity.Property(e => e.Cpu).HasColumnName("CPU");
            entity.Property(e => e.DatabaseName).HasMaxLength(128);
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.HostName).HasMaxLength(128);
            entity.Property(e => e.LoginName).HasMaxLength(128);
            entity.Property(e => e.MsreplTranVersion).HasColumnName("msrepl_tran_version");
            entity.Property(e => e.NtuserName)
                .HasMaxLength(128)
                .HasColumnName("NTUserName");
            entity.Property(e => e.ObjectName).HasMaxLength(128);
            entity.Property(e => e.Spid).HasColumnName("SPID");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.TextData).HasColumnType("ntext");
        });

        modelBuilder.Entity<TestProject>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TestProject");

            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .IsUnicode(false);
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.WorkItemType)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("WorkItem Type");
        });

        modelBuilder.Entity<TestSpit1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test_spit1");

            entity.Property(e => e.Item)
                .HasMaxLength(8000)
                .IsUnicode(false)
                .HasColumnName("item");
        });

        modelBuilder.Entity<TestSplit>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test_split");

            entity.Property(e => e.String)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("string");
        });

        modelBuilder.Entity<TestTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("testTable", "db_owner");

            entity.Property(e => e.Firstname)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.Lsatname)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("lsatname");
            entity.Property(e => e.PaxAddress)
                .HasMaxLength(1)
                .IsUnicode(false);
            entity.Property(e => e.TestTableid).HasColumnName("testTableid");
        });

        modelBuilder.Entity<TestTable1>(entity =>
        {
            entity.HasKey(e => e.TestId);

            entity.ToTable("Test_table");

            entity.Property(e => e.TestId).HasColumnName("TestID");
            entity.Property(e => e.TestDesc)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.TestName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TestTable2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TestTabl__3214EC2793DAF6A7");

            entity.ToTable("TestTable");

            entity.HasIndex(e => e.Col1, "ix_Test");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Col1)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())");
            entity.Property(e => e.Col2)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())");
            entity.Property(e => e.Col3)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasDefaultValueSql("(newid())");
            entity.Property(e => e.Col4)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
        });

        modelBuilder.Entity<TestTableForEncryption>(entity =>
        {
            entity.HasKey(e => e.FirstColId);

            entity.ToTable("TestTableForEncryption");

            entity.Property(e => e.FirstColId)
                .ValueGeneratedNever()
                .HasColumnName("FirstCol_ID");
            entity.Property(e => e.EncryptSecondColPwd)
                .HasMaxLength(128)
                .HasColumnName("EncryptSecondCol_Pwd");
            entity.Property(e => e.SecondColPwd)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SecondCol_Pwd");
        });

        modelBuilder.Entity<TestTblVehicleMasterDetail>(entity =>
        {
            entity.HasKey(e => e.VehicleDetailId).HasName("PK__Test.tbl__41F0F6D292969E52");

            entity.ToTable("Test.tblVehicleMasterDetail");

            entity.Property(e => e.VehicleDetailId)
                .ValueGeneratedNever()
                .HasColumnName("vehicleDetailID");
            entity.Property(e => e.Cost).HasColumnName("cost");
            entity.Property(e => e.ModelName)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.StateCode)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.VehicleId).HasColumnName("VehicleID");
        });

        modelBuilder.Entity<TestTree>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("testTree");

            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TestUnknownToken1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("test_unknown_token1");

            entity.Property(e => e.Col1)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("col1");
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("timestamp");
        });

        modelBuilder.Entity<Testalter>(entity =>
        {
            entity.HasKey(e => e.Column0).HasName("PK__testalte__DB06C12C60731D3C");

            entity.ToTable("testalter");

            entity.Property(e => e.Column0)
                .ValueGeneratedNever()
                .HasColumnName("column0");
            entity.Property(e => e.Column1).HasColumnName("column1");
            entity.Property(e => e.Column2)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("column2");
            entity.Property(e => e.Column3)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("column3");
            entity.Property(e => e.Column4)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("column4");
            entity.Property(e => e.Column5)
                .HasColumnType("datetime")
                .HasColumnName("column5");
            entity.Property(e => e.Column6).HasColumnName("column6");
            entity.Property(e => e.Column7)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("column7");

            entity.HasOne(d => d.Column6Navigation).WithMany(p => p.InverseColumn6Navigation)
                .HasForeignKey(d => d.Column6)
                .HasConstraintName("FK__testalter__colum__625B65AE");
        });

        modelBuilder.Entity<Testing>(entity =>
        {
            entity.HasKey(e => e.Eno).HasName("PK__testing__D9507B87605D434C");

            entity.ToTable("testing");

            entity.Property(e => e.Eno)
                .ValueGeneratedNever()
                .HasColumnName("eno");
        });

        modelBuilder.Entity<Testque>(entity =>
        {
            entity.HasKey(e => e.TestNo).HasName("PK__Testque__8CECA3B35319221E");

            entity.ToTable("Testque");

            entity.Property(e => e.TestNo).ValueGeneratedNever();
            entity.Property(e => e.Question)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Testtran>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("testtran");

            entity.Property(e => e.A).HasColumnName("a");
            entity.Property(e => e.B).HasColumnName("b");
            entity.Property(e => e.C)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("c");
        });

        modelBuilder.Entity<Testxml>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__testxml__3214EC0774AF2013");

            entity.ToTable("testxml");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.XmlInfo).HasColumnType("xml");
        });

        modelBuilder.Entity<Tfsclient>(entity =>
        {
            entity.HasKey(e => e.Username);

            entity.ToTable("TFSClients");

            entity.Property(e => e.Username)
                .HasMaxLength(15)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ProCollection)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("Pro_Collection");
            entity.Property(e => e.Project)
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmpProduct>(entity =>
        {
            entity.HasKey(e => new { e.Product, e.MarketYear }).HasName("pk_products");

            entity.ToTable("tmpProducts");

            entity.Property(e => e.Product)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("product");
            entity.Property(e => e.MarketYear).HasColumnName("market_year");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Value).HasColumnName("value");
        });

        modelBuilder.Entity<Tmpemp>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TMPEMP");

            entity.Property(e => e.Empno).HasColumnName("EMPNO");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ENAME");
        });

        modelBuilder.Entity<Tmptestsalary>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmptestsalary");

            entity.Property(e => e.Salary).HasColumnType("money");
        });

        modelBuilder.Entity<TmtblDocMgmtClassMaster>(entity =>
        {
            entity.HasKey(e => e.IntClassId).HasName("PK_tblDocMgmtClassMaster");

            entity.ToTable("tmtblDocMgmtClassMaster");

            entity.Property(e => e.IntClassId)
                .ValueGeneratedNever()
                .HasColumnName("intClassID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrClassDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strClassDesc");
            entity.Property(e => e.StrClassName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strClassName");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtDataTypeMaster>(entity =>
        {
            entity.HasKey(e => e.IntDataTypeId).HasName("PK_tblDocMgmtDataTypeMaster");

            entity.ToTable("tmtblDocMgmtDataTypeMaster");

            entity.Property(e => e.IntDataTypeId)
                .ValueGeneratedNever()
                .HasColumnName("intDataTypeID");
            entity.Property(e => e.BitIsSqldataType).HasColumnName("bitIsSQLDataType");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.StrDataTypeDesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("strDataTypeDesc");
            entity.Property(e => e.StrDataTypeName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("strDataTypeName");
        });

        modelBuilder.Entity<TmtblDocMgmtFrmpgclassFunctionsUsed>(entity =>
        {
            entity.HasKey(e => e.IntFrmpgclassFunctionId).HasName("PK_tblDocMgmtFRMPGClassFunctionsUsed");

            entity.ToTable("tmtblDocMgmtFRMPGClassFunctionsUsed");

            entity.Property(e => e.IntFrmpgclassFunctionId)
                .ValueGeneratedNever()
                .HasColumnName("intFRMPGClassFunctionID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntFrmpgfunctionId).HasColumnName("intFRMPGFunctionID");
            entity.Property(e => e.IntSpcfid).HasColumnName("intSPCFID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtFrmpgfunctionMaster>(entity =>
        {
            entity.HasKey(e => e.IntFrmpgfunctionId).HasName("PK_tblDocMgmtFRMPGFunctionMaster");

            entity.ToTable("tmtblDocMgmtFRMPGFunctionMaster");

            entity.Property(e => e.IntFrmpgfunctionId)
                .ValueGeneratedNever()
                .HasColumnName("intFRMPGFunctionID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntFrmpgid).HasColumnName("intFRMPGID");
            entity.Property(e => e.IntUpdatedBy)
                .HasColumnType("datetime")
                .HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrFunctionDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strFunctionDesc");
            entity.Property(e => e.StrFunctionName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strFunctionName");
            entity.Property(e => e.StrFunctionType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strFunctionType");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtFrmpgmaster>(entity =>
        {
            entity.HasKey(e => e.IntFrmpgid).HasName("PK_tblDocMgmtFRMPGMaster");

            entity.ToTable("tmtblDocMgmtFRMPGMaster");

            entity.Property(e => e.IntFrmpgid)
                .ValueGeneratedNever()
                .HasColumnName("intFRMPGID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrFrmpgdesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strFRMPGDesc");
            entity.Property(e => e.StrFrmpgname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strFRMPGName");
            entity.Property(e => e.StrFrmpgurl)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strFRMPGURL");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtReportMaster>(entity =>
        {
            entity.HasKey(e => e.IntReportId).HasName("PK_tblDocMgmtReportMaster");

            entity.ToTable("tmtblDocMgmtReportMaster");

            entity.Property(e => e.IntReportId)
                .ValueGeneratedNever()
                .HasColumnName("intReportID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrReportDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strReportDesc");
            entity.Property(e => e.StrReportFileName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strReportFileName");
            entity.Property(e => e.StrReportName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strReportName");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtReportSpused>(entity =>
        {
            entity.HasKey(e => e.IntReportSpusedId).HasName("PK_tblDocMgmtReportSPUsed");

            entity.ToTable("tmtblDocMgmtReportSPUsed");

            entity.Property(e => e.IntReportSpusedId)
                .ValueGeneratedNever()
                .HasColumnName("intReportSPUsedID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntReportId).HasColumnName("intReportID");
            entity.Property(e => e.IntSpcfid).HasColumnName("intSPCFID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strDesc");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtSpcfdataRetrievalDetail>(entity =>
        {
            entity.HasKey(e => e.IntSpcfdataRetrievalId).HasName("PK_tblDocMgmtSPCFDataRetrievalDetail");

            entity.ToTable("tmtblDocMgmtSPCFDataRetrievalDetail");

            entity.Property(e => e.IntSpcfdataRetrievalId)
                .ValueGeneratedNever()
                .HasColumnName("intSPCFDataRetrievalID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDataTypeId).HasColumnName("intDataTypeID");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntSequenceNo).HasColumnName("intSequenceNo");
            entity.Property(e => e.IntSetNo).HasColumnName("intSetNo");
            entity.Property(e => e.IntSpcfid).HasColumnName("intSPCFID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrFieldDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strFieldDesc");
            entity.Property(e => e.StrFieldName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strFieldName");
            entity.Property(e => e.StrSize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strSize");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtSpcfmaster>(entity =>
        {
            entity.HasKey(e => e.IntSpcfid).HasName("PK_tblDocMgmtSPCFMaster");

            entity.ToTable("tmtblDocMgmtSPCFMaster");

            entity.Property(e => e.IntSpcfid)
                .ValueGeneratedNever()
                .HasColumnName("intSPCFID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.BitIsSp).HasColumnName("bitIsSP");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntClassId).HasColumnName("intClassID");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntRefSpcfid).HasColumnName("intRefSPCFID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrSpcfdesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("strSPCFDesc");
            entity.Property(e => e.StrSpcfname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strSPCFName");
            entity.Property(e => e.StrSpcfscript)
                .HasColumnType("text")
                .HasColumnName("strSPCFScript");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtSpcfparametersDetail>(entity =>
        {
            entity.HasKey(e => e.IntSpcfparameterId).HasName("PK_tblDocMgmtSPCFParametersDetail");

            entity.ToTable("tmtblDocMgmtSPCFParametersDetail");

            entity.Property(e => e.IntSpcfparameterId)
                .ValueGeneratedNever()
                .HasColumnName("intSPCFParameterID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDataTypeId).HasColumnName("intDataTypeID");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntSequenceNo).HasColumnName("intSequenceNo");
            entity.Property(e => e.IntSpcfid).HasColumnName("intSPCFID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrParameterDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strParameterDesc");
            entity.Property(e => e.StrParameterName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strParameterName");
            entity.Property(e => e.StrParameterType)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strParameterType");
            entity.Property(e => e.StrSize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strSize");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtSpcftablesUsed>(entity =>
        {
            entity.HasKey(e => e.IntSpcftableId).HasName("PK_tblDocMgmtSPCFTablesUsed");

            entity.ToTable("tmtblDocMgmtSPCFTablesUsed");

            entity.Property(e => e.IntSpcftableId)
                .ValueGeneratedNever()
                .HasColumnName("intSPCFTableID");
            entity.Property(e => e.BitIsDelete).HasColumnName("bitIsDelete");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.BitIsInsert).HasColumnName("bitIsInsert");
            entity.Property(e => e.BitIsSelect).HasColumnName("bitIsSelect");
            entity.Property(e => e.BitIsUpdate).HasColumnName("bitIsUpdate");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntSpcfid).HasColumnName("intSPCFID");
            entity.Property(e => e.IntTableId).HasColumnName("intTableID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtTableFieldsDetail>(entity =>
        {
            entity.HasKey(e => e.IntTableFieldId).HasName("PK_tblDocMgmtTableFieldsDetail");

            entity.ToTable("tmtblDocMgmtTableFieldsDetail");

            entity.Property(e => e.IntTableFieldId)
                .ValueGeneratedNever()
                .HasColumnName("intTableFieldID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDataTypeId).HasColumnName("intDataTypeID");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntTableId).HasColumnName("intTableID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrFieldDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strFieldDesc");
            entity.Property(e => e.StrFieldName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strFieldName");
            entity.Property(e => e.StrSize)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strSize");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocMgmtTableMaster>(entity =>
        {
            entity.HasKey(e => e.IntTableId).HasName("PK_tblDocMgmtTableMaster");

            entity.ToTable("tmtblDocMgmtTableMaster");

            entity.Property(e => e.IntTableId)
                .ValueGeneratedNever()
                .HasColumnName("intTableID");
            entity.Property(e => e.BitIsDeleted).HasColumnName("bitIsDeleted");
            entity.Property(e => e.DtmAddedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmAddedDateTime");
            entity.Property(e => e.DtmDeletedDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmDeletedDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAddedBy).HasColumnName("intAddedBy");
            entity.Property(e => e.IntDeletedBy).HasColumnName("intDeletedBy");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntUpdatedBy).HasColumnName("intUpdatedBy");
            entity.Property(e => e.StrDeleteRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strDeleteRemark");
            entity.Property(e => e.StrTableDesc)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("strTableDesc");
            entity.Property(e => e.StrTableName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strTableName");
            entity.Property(e => e.StrTableScript)
                .HasMaxLength(2000)
                .IsUnicode(false)
                .HasColumnName("strTableScript");
            entity.Property(e => e.StrUpdateHistory)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strUpdateHistory");
            entity.Property(e => e.StrUpdateRemark)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strUpdateRemark");
        });

        modelBuilder.Entity<TmtblDocument>(entity =>
        {
            entity.HasKey(e => e.IntDocId).HasName("PK_tblDocuments");

            entity.ToTable("tmtblDocuments");

            entity.Property(e => e.IntDocId)
                .ValueGeneratedNever()
                .HasColumnName("intDocID");
            entity.Property(e => e.BitIsEvaluation).HasColumnName("bitIsEvaluation");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.IntWorkDoneDetId).HasColumnName("intWorkDoneDetID");
            entity.Property(e => e.StrFileName)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("strFileName");
        });

        modelBuilder.Entity<TmtblEmployeeMaster>(entity =>
        {
            entity.HasKey(e => e.IntEmpId).HasName("PK_tblEmployeeMaster");

            entity.ToTable("tmtblEmployeeMaster");

            entity.Property(e => e.IntEmpId)
                .ValueGeneratedNever()
                .HasColumnName("intEmpID");
            entity.Property(e => e.BitIsActive).HasColumnName("bitIsActive");
            entity.Property(e => e.BitIsAdmin).HasColumnName("bitIsAdmin");
            entity.Property(e => e.DtmDateOfBirth)
                .HasColumnType("datetime")
                .HasColumnName("dtmDateOfBirth");
            entity.Property(e => e.DtmJoiningDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmJoiningDate");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntLevel).HasColumnName("intLevel");
            entity.Property(e => e.StrAdd1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strAdd1");
            entity.Property(e => e.StrAdd2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strAdd2");
            entity.Property(e => e.StrAdd3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strAdd3");
            entity.Property(e => e.StrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCity");
            entity.Property(e => e.StrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCountry");
            entity.Property(e => e.StrCurrAdd1)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strCurrAdd1");
            entity.Property(e => e.StrCurrAdd2)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strCurrAdd2");
            entity.Property(e => e.StrCurrAdd3)
                .HasMaxLength(60)
                .IsUnicode(false)
                .HasColumnName("strCurrAdd3");
            entity.Property(e => e.StrCurrCity)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCurrCity");
            entity.Property(e => e.StrCurrCountry)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCurrCountry");
            entity.Property(e => e.StrCurrPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCurrPhone");
            entity.Property(e => e.StrCurrPincode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strCurrPINCode");
            entity.Property(e => e.StrCurrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strCurrState");
            entity.Property(e => e.StrEmail)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strEmail");
            entity.Property(e => e.StrEmailCompany)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strEmailCompany");
            entity.Property(e => e.StrEmpName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("strEmpName");
            entity.Property(e => e.StrLoginName)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("strLoginName");
            entity.Property(e => e.StrMobile)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strMobile");
            entity.Property(e => e.StrPhone)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strPhone");
            entity.Property(e => e.StrPincode)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strPINCode");
            entity.Property(e => e.StrPwd)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("strPwd");
            entity.Property(e => e.StrState)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strState");
        });

        modelBuilder.Entity<TmtblError>(entity =>
        {
            entity.HasKey(e => e.ErrorNo).HasName("PK_tblErrors");

            entity.ToTable("tmtblErrors");

            entity.Property(e => e.ErrorNo).ValueGeneratedNever();
            entity.Property(e => e.ErrorDesc)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Spname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TmtblErrorMgmtUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_tblErrorMgmtUsers");

            entity.ToTable("tmtblErrorMgmtUsers");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoginName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Pwd)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmtblMailServerConfiguration>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmtblMailServerConfiguration");

            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.HostName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.IsWebServiceUrl).HasColumnName("IsWebServiceURL");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.ServerId).HasColumnName("ServerID");
            entity.Property(e => e.WebServerUrl)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("WebServerURL");
        });

        modelBuilder.Entity<TmtblMenuMaster>(entity =>
        {
            entity.HasKey(e => e.MenuId).HasName("PK_tblMenuMaster");

            entity.ToTable("tmtblMenuMaster");

            entity.Property(e => e.MenuId)
                .ValueGeneratedNever()
                .HasColumnName("MenuID");
            entity.Property(e => e.LogoUrl)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.MenuControlName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.ParentMenuId).HasColumnName("ParentMenuID");
        });

        modelBuilder.Entity<TmtblMenuRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmtblMenuRights");

            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TmtblPageMaster>(entity =>
        {
            entity.HasKey(e => e.PageId).HasName("PK_tblPageMaster");

            entity.ToTable("tmtblPageMaster");

            entity.Property(e => e.PageId)
                .ValueGeneratedNever()
                .HasColumnName("PageID");
            entity.Property(e => e.BitMenuDefaultPage).HasColumnName("bitMenuDefaultPage");
            entity.Property(e => e.MenuId).HasColumnName("MenuID");
            entity.Property(e => e.PageCaption)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.PageUrl)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("PageURL");
        });

        modelBuilder.Entity<TmtblPageRight>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmtblPageRights");

            entity.Property(e => e.PageId).HasColumnName("PageID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
        });

        modelBuilder.Entity<TmtblProjectMaster>(entity =>
        {
            entity.HasKey(e => e.IntProjectId).HasName("PK_tblProjectMaster");

            entity.ToTable("tmtblProjectMaster");

            entity.Property(e => e.IntProjectId)
                .ValueGeneratedNever()
                .HasColumnName("intProjectID");
            entity.Property(e => e.BitIsActive).HasColumnName("bitIsActive");
            entity.Property(e => e.BitIsDesktop).HasColumnName("bitIsDesktop");
            entity.Property(e => e.BitIsUnderMaintenance).HasColumnName("bitIsUnderMaintenance");
            entity.Property(e => e.DtmCompleteDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmCompleteDate");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.DtmStartDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmStartDate");
            entity.Property(e => e.StrProjectDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strProjectDesc");
            entity.Property(e => e.StrProjectName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strProjectName");
        });

        modelBuilder.Entity<TmtblProjectTeamMaster>(entity =>
        {
            entity.HasKey(e => e.IntProjectTeamId).HasName("PK_tblProjectTeamMaster");

            entity.ToTable("tmtblProjectTeamMaster");

            entity.Property(e => e.IntProjectTeamId)
                .ValueGeneratedNever()
                .HasColumnName("intProjectTeamID");
            entity.Property(e => e.BitIsAssign).HasColumnName("bitIsAssign");
            entity.Property(e => e.BitIsCheck).HasColumnName("bitIsCheck");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntEmpId).HasColumnName("intEmpID");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntRoleId).HasColumnName("intRoleID");
            entity.Property(e => e.StrProjectTeamDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strProjectTeamDesc");
            entity.Property(e => e.StrProjectTeamName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strProjectTeamName");
        });

        modelBuilder.Entity<TmtblReminder>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmtblReminders");

            entity.Property(e => e.BitIsReminderViewed).HasColumnName("bitIsReminderViewed");
            entity.Property(e => e.BitIsSnoozed).HasColumnName("bitIsSnoozed");
            entity.Property(e => e.DtmRemindDatetime)
                .HasColumnType("datetime")
                .HasColumnName("dtmRemindDatetime");
            entity.Property(e => e.DtmReminderViewedDatetime)
                .HasColumnType("datetime")
                .HasColumnName("dtmReminderViewedDatetime");
            entity.Property(e => e.IntAssignedTo).HasColumnName("intAssignedTo");
            entity.Property(e => e.IntReminderId).HasColumnName("intReminderID");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.StrReminderDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strReminderDesc");
        });

        modelBuilder.Entity<TmtblRightsMgmtUser>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tmtblRightsMgmtUsers");

            entity.Property(e => e.IsActive)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.LoginName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Pwd)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.UserName)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmtblRoleMaster>(entity =>
        {
            entity.HasKey(e => e.IntRoleId).HasName("PK_tblRoleMaster");

            entity.ToTable("tmtblRoleMaster");

            entity.Property(e => e.IntRoleId)
                .ValueGeneratedNever()
                .HasColumnName("intRoleID");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.StrRoleDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strRoleDesc");
            entity.Property(e => e.StrRoleName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strRoleName");
        });

        modelBuilder.Entity<TmtblSperrorMgmt>(entity =>
        {
            entity.HasKey(e => e.Spname).HasName("PK_tblSPErrorMgmt");

            entity.ToTable("tmtblSPErrorMgmt");

            entity.Property(e => e.Spname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("SPName");
        });

        modelBuilder.Entity<TmtblUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK_tblUsers");

            entity.ToTable("tmtblUsers");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("UserID");
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LoginName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Pwd)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.UserName)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TmtblWmpriorityMaster>(entity =>
        {
            entity.HasKey(e => e.IntPriorityId).HasName("PK_tblWMPriorityMaster");

            entity.ToTable("tmtblWMPriorityMaster");

            entity.Property(e => e.IntPriorityId)
                .ValueGeneratedNever()
                .HasColumnName("intPriorityID");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.StrPriorityDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strPriorityDesc");
            entity.Property(e => e.StrPriorityName)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("strPriorityName");
        });

        modelBuilder.Entity<TmtblWmworkAssignmentMaster>(entity =>
        {
            entity.HasKey(e => e.IntWorkAssignmentId).HasName("PK_tblWMWorkAssignmentMaster");

            entity.ToTable("tmtblWMWorkAssignmentMaster");

            entity.Property(e => e.IntWorkAssignmentId)
                .ValueGeneratedNever()
                .HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.BitIsTransMsgViewed).HasColumnName("bitIsTransMsgViewed");
            entity.Property(e => e.BitIsWorkCancel).HasColumnName("bitIsWorkCancel");
            entity.Property(e => e.DtmAssignedDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmAssignedDate");
            entity.Property(e => e.DtmCompleteDate)
                .HasColumnType("datetime")
                .HasColumnName("dtmCompleteDate");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.IntAssignedBy).HasColumnName("intAssignedBy");
            entity.Property(e => e.IntAssignedTo).HasColumnName("intAssignedTo");
            entity.Property(e => e.IntEstimatedTime).HasColumnName("intEstimatedTime");
            entity.Property(e => e.IntPriorityId).HasColumnName("intPriorityID");
            entity.Property(e => e.IntProjectId).HasColumnName("intProjectID");
            entity.Property(e => e.IntWorkTypeId).HasColumnName("intWorkTypeID");
            entity.Property(e => e.StrAssignmentRemark)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strAssignmentRemark");
            entity.Property(e => e.StrStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("strStatus");
            entity.Property(e => e.StrSubject)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("strSubject");
            entity.Property(e => e.StrUploadFile1)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("strUploadFile1");
            entity.Property(e => e.StrUploadFile2)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("strUploadFile2");
            entity.Property(e => e.StrUploadFile3)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("strUploadFile3");
            entity.Property(e => e.StrUploadFile4)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("strUploadFile4");
            entity.Property(e => e.StrUploadFile5)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("strUploadFile5");
            entity.Property(e => e.StrWorkDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strWorkDesc");
        });

        modelBuilder.Entity<TmtblWmworkDoneDetail>(entity =>
        {
            entity.HasKey(e => e.IntWorkDoneDetId).HasName("PK_tblWMWorkDoneDetail");

            entity.ToTable("tmtblWMWorkDoneDetail");

            entity.Property(e => e.IntWorkDoneDetId)
                .ValueGeneratedNever()
                .HasColumnName("intWorkDoneDetID");
            entity.Property(e => e.BitIsWorkCompleted).HasColumnName("bitIsWorkCompleted");
            entity.Property(e => e.DtmCheckedEndTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCheckedEndTime");
            entity.Property(e => e.DtmCheckedStartTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmCheckedStartTime");
            entity.Property(e => e.DtmEndDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmEndDateTime");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.DtmStartDateTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmStartDateTime");
            entity.Property(e => e.IntActualTime).HasColumnName("intActualTime");
            entity.Property(e => e.IntCheckedBy).HasColumnName("intCheckedBy");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.StrEvaluationRemark)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strEvaluationRemark");
            entity.Property(e => e.StrEvaluationStatus)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("strEvaluationStatus");
            entity.Property(e => e.StrWorkDesc)
                .HasMaxLength(4000)
                .IsUnicode(false)
                .HasColumnName("strWorkDesc");
        });

        modelBuilder.Entity<TmtblWmworkTypeMaster>(entity =>
        {
            entity.HasKey(e => e.IntWorkTypeId).HasName("PK_tblWMWorkTypeMaster");

            entity.ToTable("tmtblWMWorkTypeMaster");

            entity.HasIndex(e => e.StrWorkTypeName, "IX_tblWMWorkTypeMaster").IsUnique();

            entity.Property(e => e.IntWorkTypeId)
                .ValueGeneratedNever()
                .HasColumnName("intWorkTypeID");
            entity.Property(e => e.DtmLastUpdated)
                .HasColumnType("datetime")
                .HasColumnName("dtmLastUpdated");
            entity.Property(e => e.StrWorkTypeDesc)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("strWorkTypeDesc");
            entity.Property(e => e.StrWorkTypeName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("strWorkTypeName");
        });

        modelBuilder.Entity<TmtblWmworkUploadFile>(entity =>
        {
            entity.HasKey(e => e.IntUploadId).HasName("PK_tblWorkMgmtUploadFiles");

            entity.ToTable("tmtblWMWorkUploadFiles");

            entity.Property(e => e.IntUploadId)
                .ValueGeneratedNever()
                .HasColumnName("intUploadID");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.UploadFile).IsUnicode(false);
        });

        modelBuilder.Entity<TmtblWorkSwitchOver>(entity =>
        {
            entity.HasKey(e => e.IntSwid).HasName("PK_tblWorkSwitchOver");

            entity.ToTable("tmtblWorkSwitchOver");

            entity.Property(e => e.IntSwid)
                .ValueGeneratedNever()
                .HasColumnName("intSWID");
            entity.Property(e => e.DtmSwitchStartWork)
                .HasColumnType("datetime")
                .HasColumnName("dtmSwitchStartWork");
            entity.Property(e => e.DtmSwitchStopWork)
                .HasColumnType("datetime")
                .HasColumnName("dtmSwitchStopWork");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.StrSwitchWorkDesc)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("strSwitchWorkDesc");
        });

        modelBuilder.Entity<Tmtblstopcont>(entity =>
        {
            entity.HasKey(e => e.IntStopcontId).HasName("PK__tmtblstopcont__676A338E");

            entity.ToTable("tmtblstopcont");

            entity.Property(e => e.IntStopcontId)
                .ValueGeneratedNever()
                .HasColumnName("intStopcontID");
            entity.Property(e => e.BitIsStop).HasColumnName("bitIsStop");
            entity.Property(e => e.DtmStopcontTime)
                .HasColumnType("datetime")
                .HasColumnName("dtmStopcontTime");
            entity.Property(e => e.IntEmpId).HasColumnName("intEmpID");
            entity.Property(e => e.IntWorkAssignmentId).HasColumnName("intWorkAssignmentID");
            entity.Property(e => e.StrReason)
                .IsUnicode(false)
                .HasColumnName("strReason");
        });

        modelBuilder.Entity<TrainingMst>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__training__3213E83F961B4FDE");

            entity.ToTable("training_mst");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.City)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("city");
            entity.Property(e => e.DestinationFrom)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Destination_from");
            entity.Property(e => e.DestinationTo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("Destination_to");
            entity.Property(e => e.FromDate)
                .HasColumnType("date")
                .HasColumnName("From_date");
            entity.Property(e => e.Name)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("name");
            entity.Property(e => e.ToDate)
                .HasColumnType("date")
                .HasColumnName("To_date");
        });

        modelBuilder.Entity<TransactionHistoryArchive4>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TransactionHistoryArchive4");

            entity.HasIndex(e => e.TransactionId, "AK_TransactionID").IsUnique();

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
        });

        modelBuilder.Entity<TransactionTable>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__3214EC27F350A1C8");

            entity.ToTable("TransactionTable");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.CreateBy).HasColumnName("CreateBY");
            entity.Property(e => e.CreateDate)
                .HasColumnType("datetime")
                .HasColumnName("createDate");
            entity.Property(e => e.CreateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("CreateIP");
            entity.Property(e => e.OtherColumns)
                .HasMaxLength(10)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("otherColumns");
            entity.Property(e => e.ReferenceId).HasColumnName("referenceID");
            entity.Property(e => e.Status)
                .HasMaxLength(2)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.UpdateIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("UpdateIP");
        });

        modelBuilder.Entity<Tree>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Tree");

            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Lineage)
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.Node).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Trimtrailer>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("trimtrailer");

            entity.Property(e => e.A)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("a");
        });

        modelBuilder.Entity<Tt1>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tt1");

            entity.Property(e => e.C1).HasColumnName("c1");
            entity.Property(e => e.C2)
                .HasColumnType("text")
                .HasColumnName("c2");
        });

        modelBuilder.Entity<TttHistory>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tttHistory");

            entity.Property(e => e.ErrorNo).HasColumnName("errorNo");
            entity.Property(e => e.HistoryDate).HasColumnType("datetime");
            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.HistoryIp)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("HistoryIP");
            entity.Property(e => e.Newname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NEWName");
            entity.Property(e => e.Oldname)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("OLDName");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Creditcard)
                .HasMaxLength(25)
                .IsUnicode(false);
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.LastUpdated).HasColumnType("datetime");
            entity.Property(e => e.LoginName)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Photo)
                .HasMaxLength(200)
                .IsUnicode(false);
            entity.Property(e => e.Pwd)
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.SpamEmail).HasColumnName("Spam_Email");
            entity.Property(e => e.SpamMail).HasColumnName("Spam_Mail");
            entity.Property(e => e.SpamPhone).HasColumnName("Spam_Phone");
            entity.Property(e => e.UserName)
                .HasMaxLength(60)
                .IsUnicode(false);
        });

        modelBuilder.Entity<UserError>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.ErrorId });
        });

        modelBuilder.Entity<VenkatTable>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VenkatTable");

            entity.Property(e => e.Answer)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("answer");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Question)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("question");
        });

        modelBuilder.Entity<ViewDemo>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("view_demo");

            entity.Property(e => e.Empid).HasColumnName("empid");
            entity.Property(e => e.Ename)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ename");
            entity.Property(e => e.Phoneno)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("phoneno");
        });

        modelBuilder.Entity<VinDeadlock>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("vin_deadlock");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwEmpMast>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwEmpMast");

            entity.Property(e => e.Address)
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.EmpName)
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<VwMasterItem>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("vwMasterItem");

            entity.Property(e => e.HistoryId).HasColumnName("HistoryID");
            entity.Property(e => e.ItemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ItemId).HasColumnName("ItemID");
            entity.Property(e => e.ItemName)
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.OlditemCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("OLDItemCode");
            entity.Property(e => e.UnitCode)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.UnitId).HasColumnName("UnitID");
            entity.Property(e => e.UnitName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Xmlorg>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("XMLOrg");

            entity.Property(e => e.Orgdata).HasColumnType("xml");
        });

        modelBuilder.Entity<_0IsActive>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("0 IsActive");

            entity.Property(e => e.StudName)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}
